{"version":3,"sources":["turbopack:///[project]/app/accessibility/page.tsx","turbopack:///[project]/lib/accessibility/index.ts","turbopack:///[project]/lib/accessibility/aria.ts","turbopack:///[project]/lib/accessibility/contrast.ts","turbopack:///[project]/lib/accessibility/screen-reader.ts","turbopack:///[project]/hooks/useAccessibility.ts"],"sourcesContent":["/**\n * Accessibility Settings Page\n * \n * Provides comprehensive accessibility settings and preferences management\n * for WCAG 2.1 AA compliance and user customization.\n */\n\n'use client';\n\nimport React from 'react';\nimport { cn } from '@/utils';\nimport {\n  useAccessibilityPreferences,\n  useMediaPreferences,\n  useColorContrast,\n  useAccessibilityTest,\n} from '@/hooks/useAccessibility';\nimport { AnnouncerProvider, useAnnouncer } from '@/components/accessibility/announcer';\nimport { SkipLinks } from '@/components/accessibility/skip-link';\nimport { KeyboardShortcutsProvider, ShortcutsSummary } from '@/components/accessibility/keyboard-shortcuts';\n\n/**\n * Settings section component\n */\nconst SettingsSection: React.FC<{\n  title: string;\n  description?: string;\n  children: React.ReactNode;\n}> = ({ title, description, children }) => (\n  <section\n    className=\"space-y-4 p-6 border rounded-lg bg-card\"\n    aria-labelledby={`section-${title.toLowerCase().replace(/\\s+/g, '-')}`}\n  >\n    <div>\n      <h2\n        id={`section-${title.toLowerCase().replace(/\\s+/g, '-')}`}\n        className=\"text-xl font-semibold text-foreground\"\n      >\n        {title}\n      </h2>\n      {description && (\n        <p className=\"text-sm text-muted-foreground mt-1\">\n          {description}\n        </p>\n      )}\n    </div>\n    {children}\n  </section>\n);\n\n/**\n * Toggle setting component\n */\nconst ToggleSetting: React.FC<{\n  id: string;\n  label: string;\n  description?: string;\n  checked: boolean;\n  onChange: (checked: boolean) => void;\n  disabled?: boolean;\n}> = ({ id, label, description, checked, onChange, disabled }) => {\n  const { announce } = useAnnouncer();\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.target.checked;\n    onChange(newValue);\n    announce(`${label} ${newValue ? 'enabled' : 'disabled'}`, 'polite');\n  };\n\n  return (\n    <div className=\"flex items-start space-x-3\">\n      <div className=\"flex items-center\">\n        <input\n          type=\"checkbox\"\n          id={id}\n          checked={checked}\n          onChange={handleChange}\n          disabled={disabled}\n          className={cn(\n            'w-4 h-4 text-primary bg-background border-2 border-input rounded',\n            'focus:ring-2 focus:ring-ring focus:ring-offset-2',\n            'disabled:opacity-50 disabled:cursor-not-allowed'\n          )}\n          aria-describedby={description ? `${id}-description` : undefined}\n        />\n      </div>\n      <div className=\"flex-1 min-w-0\">\n        <label\n          htmlFor={id}\n          className=\"text-sm font-medium text-foreground cursor-pointer\"\n        >\n          {label}\n        </label>\n        {description && (\n          <p\n            id={`${id}-description`}\n            className=\"text-sm text-muted-foreground mt-1\"\n          >\n            {description}\n          </p>\n        )}\n      </div>\n    </div>\n  );\n};\n\n/**\n * Select setting component\n */\nconst SelectSetting: React.FC<{\n  id: string;\n  label: string;\n  description?: string;\n  value: string;\n  options: Array<{ value: string; label: string }>;\n  onChange: (value: string) => void;\n}> = ({ id, label, description, value, options, onChange }) => {\n  const { announce } = useAnnouncer();\n\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const newValue = event.target.value;\n    onChange(newValue);\n    const selectedOption = options.find(opt => opt.value === newValue);\n    announce(`${label} changed to ${selectedOption?.label || newValue}`, 'polite');\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      <label\n        htmlFor={id}\n        className=\"text-sm font-medium text-foreground block\"\n      >\n        {label}\n      </label>\n      {description && (\n        <p className=\"text-sm text-muted-foreground\">\n          {description}\n        </p>\n      )}\n      <select\n        id={id}\n        value={value}\n        onChange={handleChange}\n        className={cn(\n          'w-full px-3 py-2 text-sm bg-background border border-input rounded-md',\n          'focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent'\n        )}\n        aria-describedby={description ? `${id}-description` : undefined}\n      >\n        {options.map(option => (\n          <option key={option.value} value={option.value}>\n            {option.label}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n};\n\n/**\n * Contrast test component\n */\nconst ContrastTest: React.FC = () => {\n  const { issues, validateContainer, setLevel } = useColorContrast();\n  const [isValidating, setIsValidating] = React.useState(false);\n  const [selectedLevel, setSelectedLevel] = React.useState<'AA' | 'AAA'>('AA');\n  const { announce } = useAnnouncer();\n\n  const runContrastTest = async () => {\n    setIsValidating(true);\n    announce('Running color contrast validation', 'polite');\n    \n    try {\n      setLevel(selectedLevel);\n      await validateContainer();\n      \n      const issueCount = issues.length;\n      announce(\n        issueCount === 0 \n          ? `Contrast validation complete. No issues found.`\n          : `Contrast validation complete. ${issueCount} issue${issueCount > 1 ? 's' : ''} found.`,\n        'polite'\n      );\n    } catch (error) {\n      announce('Contrast validation failed', 'assertive');\n    } finally {\n      setIsValidating(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center gap-4\">\n        <SelectSetting\n          id=\"contrast-level\"\n          label=\"WCAG Level\"\n          value={selectedLevel}\n          options={[\n            { value: 'AA', label: 'WCAG AA (4.5:1)' },\n            { value: 'AAA', label: 'WCAG AAA (7:1)' },\n          ]}\n          onChange={(value) => setSelectedLevel(value as 'AA' | 'AAA')}\n        />\n        <button\n          onClick={runContrastTest}\n          disabled={isValidating}\n          className={cn(\n            'px-4 py-2 bg-primary text-primary-foreground rounded-md',\n            'hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-ring',\n            'disabled:opacity-50 disabled:cursor-not-allowed'\n          )}\n        >\n          {isValidating ? 'Validating...' : 'Test Contrast'}\n        </button>\n      </div>\n\n      {issues.length > 0 && (\n        <div\n          role=\"region\"\n          aria-labelledby=\"contrast-issues-title\"\n          className=\"border border-destructive/50 rounded-md p-4 bg-destructive/5\"\n        >\n          <h3\n            id=\"contrast-issues-title\"\n            className=\"font-medium text-destructive mb-2\"\n          >\n            Contrast Issues Found ({issues.length})\n          </h3>\n          <ul className=\"space-y-2 text-sm\">\n            {issues.slice(0, 5).map((issue, index) => (\n              <li key={index} className=\"text-muted-foreground\">\n                <span className=\"font-medium\">Ratio {issue.ratio.toFixed(2)}:</span> {issue.message}\n              </li>\n            ))}\n            {issues.length > 5 && (\n              <li className=\"text-muted-foreground italic\">\n                And {issues.length - 5} more issues...\n              </li>\n            )}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\n/**\n * Accessibility test component\n */\nconst AccessibilityTest: React.FC = () => {\n  const { runAudit, isLoading, results } = useAccessibilityTest();\n  const { announce } = useAnnouncer();\n\n  const handleRunTest = async () => {\n    announce('Running accessibility audit', 'polite');\n    const auditResults = await runAudit();\n    \n    if (auditResults) {\n      const violationCount = auditResults.violations?.length || 0;\n      announce(\n        violationCount === 0 \n          ? 'Accessibility audit complete. No violations found.'\n          : `Accessibility audit complete. ${violationCount} violation${violationCount > 1 ? 's' : ''} found.`,\n        'polite'\n      );\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <button\n        onClick={handleRunTest}\n        disabled={isLoading}\n        className={cn(\n          'px-4 py-2 bg-primary text-primary-foreground rounded-md',\n          'hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-ring',\n          'disabled:opacity-50 disabled:cursor-not-allowed'\n        )}\n      >\n        {isLoading ? 'Running Audit...' : 'Run Accessibility Audit'}\n      </button>\n\n      {results && (\n        <div\n          role=\"region\"\n          aria-labelledby=\"audit-results-title\"\n          className=\"border rounded-md p-4 bg-muted/50\"\n        >\n          <h3\n            id=\"audit-results-title\"\n            className=\"font-medium mb-2\"\n          >\n            Audit Results\n          </h3>\n          {results.violations ? (\n            <div className=\"space-y-2 text-sm\">\n              <p>\n                <span className=\"font-medium\">Violations:</span> {results.violations.length}\n              </p>\n              <p>\n                <span className=\"font-medium\">Passes:</span> {results.passes?.length || 0}\n              </p>\n              <p>\n                <span className=\"font-medium\">Incomplete:</span> {results.incomplete?.length || 0}\n              </p>\n            </div>\n          ) : results.passes !== undefined ? (\n            <p className=\"text-sm text-green-600\">\n              Test completed successfully. {results.passes ? 'Passed' : 'Issues found'}\n            </p>\n          ) : (\n            <p className=\"text-sm text-muted-foreground\">\n              Unable to parse audit results\n            </p>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\n/**\n * Main accessibility settings content\n */\nconst AccessibilitySettingsContent: React.FC = () => {\n  const {\n    preferences,\n    updatePreference,\n    updatePreferences,\n    resetPreferences,\n  } = useAccessibilityPreferences();\n  \n  const mediaPreferences = useMediaPreferences();\n  const { announce } = useAnnouncer();\n\n  const handleResetSettings = () => {\n    resetPreferences();\n    announce('Accessibility settings reset to defaults', 'polite');\n  };\n\n  // Apply preferences to DOM\n  React.useEffect(() => {\n    const root = document.documentElement;\n    \n    // Apply CSS classes based on preferences\n    root.classList.toggle('reduce-motion', preferences.reduceMotion);\n    root.classList.toggle('high-contrast', preferences.highContrast);\n    root.classList.toggle('focus-rings-visible', preferences.focusRings);\n    \n    // Apply font size\n    root.classList.remove('font-small', 'font-medium', 'font-large', 'font-extra-large');\n    root.classList.add(`font-${preferences.fontSize}`);\n    \n    // Apply color scheme\n    if (preferences.colorScheme !== 'auto') {\n      root.classList.toggle('dark', preferences.colorScheme === 'dark');\n    }\n  }, [preferences]);\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Display Preferences */}\n      <SettingsSection\n        title=\"Display Preferences\"\n        description=\"Customize visual appearance and layout options\"\n      >\n        <div className=\"space-y-4\">\n          <ToggleSetting\n            id=\"reduce-motion\"\n            label=\"Reduce Motion\"\n            description=\"Minimize animations and transitions\"\n            checked={preferences.reduceMotion}\n            onChange={(checked) => updatePreference('reduceMotion', checked)}\n          />\n          \n          <ToggleSetting\n            id=\"high-contrast\"\n            label=\"High Contrast Mode\"\n            description=\"Increase contrast for better visibility\"\n            checked={preferences.highContrast}\n            onChange={(checked) => updatePreference('highContrast', checked)}\n          />\n          \n          <ToggleSetting\n            id=\"focus-rings\"\n            label=\"Visible Focus Indicators\"\n            description=\"Show focus outlines on interactive elements\"\n            checked={preferences.focusRings}\n            onChange={(checked) => updatePreference('focusRings', checked)}\n          />\n\n          <SelectSetting\n            id=\"font-size\"\n            label=\"Text Size\"\n            description=\"Adjust text size for better readability\"\n            value={preferences.fontSize}\n            options={[\n              { value: 'small', label: 'Small' },\n              { value: 'medium', label: 'Medium' },\n              { value: 'large', label: 'Large' },\n              { value: 'extra-large', label: 'Extra Large' },\n            ]}\n            onChange={(value) => updatePreference('fontSize', value as any)}\n          />\n\n          <SelectSetting\n            id=\"color-scheme\"\n            label=\"Color Scheme\"\n            description=\"Choose between light, dark, or system preference\"\n            value={preferences.colorScheme}\n            options={[\n              { value: 'auto', label: 'System Preference' },\n              { value: 'light', label: 'Light Mode' },\n              { value: 'dark', label: 'Dark Mode' },\n            ]}\n            onChange={(value) => updatePreference('colorScheme', value as any)}\n          />\n        </div>\n      </SettingsSection>\n\n      {/* Navigation Preferences */}\n      <SettingsSection\n        title=\"Navigation Preferences\"\n        description=\"Configure keyboard and screen reader behavior\"\n      >\n        <div className=\"space-y-4\">\n          <SelectSetting\n            id=\"screen-reader-level\"\n            label=\"Screen Reader Verbosity\"\n            description=\"Control how much information is announced\"\n            value={preferences.screenReaderLevel}\n            options={[\n              { value: 'minimal', label: 'Minimal' },\n              { value: 'moderate', label: 'Moderate' },\n              { value: 'verbose', label: 'Verbose' },\n            ]}\n            onChange={(value) => updatePreference('screenReaderLevel', value as any)}\n          />\n\n          <SelectSetting\n            id=\"keyboard-mode\"\n            label=\"Keyboard Navigation Mode\"\n            description=\"Choose standard or enhanced keyboard shortcuts\"\n            value={preferences.keyboardMode}\n            options={[\n              { value: 'standard', label: 'Standard' },\n              { value: 'enhanced', label: 'Enhanced' },\n            ]}\n            onChange={(value) => updatePreference('keyboardMode', value as any)}\n          />\n\n          <SelectSetting\n            id=\"contrast-level\"\n            label=\"Color Contrast Standard\"\n            description=\"WCAG compliance level for color contrast\"\n            value={preferences.contrastLevel}\n            options={[\n              { value: 'AA', label: 'WCAG AA' },\n              { value: 'AAA', label: 'WCAG AAA' },\n            ]}\n            onChange={(value) => updatePreference('contrastLevel', value as any)}\n          />\n        </div>\n      </SettingsSection>\n\n      {/* System Preferences (Read-only) */}\n      <SettingsSection\n        title=\"System Preferences\"\n        description=\"Detected system accessibility preferences\"\n      >\n        <div className=\"space-y-4\">\n          <div className=\"text-sm space-y-2\">\n            <p className=\"flex justify-between\">\n              <span>Prefers Reduced Motion:</span>\n              <span className={mediaPreferences.prefersReducedMotion ? 'text-green-600' : 'text-muted-foreground'}>\n                {mediaPreferences.prefersReducedMotion ? 'Yes' : 'No'}\n              </span>\n            </p>\n            <p className=\"flex justify-between\">\n              <span>Prefers High Contrast:</span>\n              <span className={mediaPreferences.prefersHighContrast ? 'text-green-600' : 'text-muted-foreground'}>\n                {mediaPreferences.prefersHighContrast ? 'Yes' : 'No'}\n              </span>\n            </p>\n            <p className=\"flex justify-between\">\n              <span>Prefers Dark Mode:</span>\n              <span className={mediaPreferences.prefersDarkMode ? 'text-green-600' : 'text-muted-foreground'}>\n                {mediaPreferences.prefersDarkMode ? 'Yes' : 'No'}\n              </span>\n            </p>\n          </div>\n        </div>\n      </SettingsSection>\n\n      {/* Color Contrast Testing */}\n      <SettingsSection\n        title=\"Color Contrast Testing\"\n        description=\"Test and validate color contrast ratios\"\n      >\n        <ContrastTest />\n      </SettingsSection>\n\n      {/* Accessibility Testing */}\n      <SettingsSection\n        title=\"Accessibility Testing\"\n        description=\"Run comprehensive accessibility audits\"\n      >\n        <AccessibilityTest />\n      </SettingsSection>\n\n      {/* Keyboard Shortcuts */}\n      <SettingsSection\n        title=\"Available Keyboard Shortcuts\"\n        description=\"Quick reference for keyboard navigation\"\n      >\n        <div className=\"space-y-4\">\n          <ShortcutsSummary categoryId=\"accessibility\" limit={5} />\n          <p className=\"text-sm text-muted-foreground\">\n            Press <kbd className=\"px-2 py-1 bg-muted border rounded text-xs\">Alt + /</kbd> to view all shortcuts\n          </p>\n        </div>\n      </SettingsSection>\n\n      {/* Reset Settings */}\n      <SettingsSection\n        title=\"Reset Settings\"\n        description=\"Restore default accessibility preferences\"\n      >\n        <button\n          onClick={handleResetSettings}\n          className={cn(\n            'px-4 py-2 bg-destructive text-destructive-foreground rounded-md',\n            'hover:bg-destructive/90 focus:outline-none focus:ring-2 focus:ring-ring'\n          )}\n        >\n          Reset All Settings\n        </button>\n      </SettingsSection>\n    </div>\n  );\n};\n\n/**\n * Main accessibility settings page\n */\nexport default function AccessibilityPage() {\n  return (\n    <AnnouncerProvider debugMode={false}>\n      <KeyboardShortcutsProvider>\n        <div className=\"min-h-screen bg-background\">\n          {/* Skip Links */}\n          <SkipLinks />\n\n          <div className=\"container mx-auto px-4 py-8\">\n            {/* Page Header */}\n            <header className=\"mb-8\">\n              <h1 className=\"text-3xl font-bold text-foreground mb-2\">\n                Accessibility Settings\n              </h1>\n              <p className=\"text-lg text-muted-foreground\">\n                Configure accessibility preferences and test WCAG compliance\n              </p>\n            </header>\n\n            {/* Main Content */}\n            <main id=\"main-content\" tabIndex={-1}>\n              <AccessibilitySettingsContent />\n            </main>\n\n            {/* Footer */}\n            <footer className=\"mt-12 pt-8 border-t\">\n              <div className=\"text-center text-sm text-muted-foreground\">\n                <p>\n                  For additional accessibility support, please contact{' '}\n                  <a\n                    href=\"mailto:accessibility@restaurant-dashboard.com\"\n                    className=\"text-primary hover:underline focus:outline-none focus:ring-2 focus:ring-ring rounded\"\n                  >\n                    accessibility@restaurant-dashboard.com\n                  </a>\n                </p>\n              </div>\n            </footer>\n          </div>\n        </div>\n      </KeyboardShortcutsProvider>\n    </AnnouncerProvider>\n  );\n}","/**\n * Core Accessibility Utilities\n * \n * This module provides comprehensive accessibility utilities for WCAG 2.1 AA compliance\n * including semantic HTML helpers, focus management, and screen reader support.\n */\n\nimport { KeyboardNavigationManager } from './keyboard';\nimport { AriaAttributeManager } from './aria';\nimport { ColorContrastValidator } from './contrast';\nimport { ScreenReaderUtilities } from './screen-reader';\n\n// Re-export all utilities\nexport * from './keyboard';\nexport * from './aria';\nexport * from './contrast';\nexport * from './screen-reader';\n\n/**\n * Accessibility Configuration Interface\n */\nexport interface AccessibilityConfig {\n  /** Enable/disable reduced motion support */\n  reduceMotion?: boolean;\n  /** Enable/disable high contrast mode */\n  highContrast?: boolean;\n  /** Enable/disable focus ring visibility */\n  focusRings?: boolean;\n  /** Screen reader announcements verbosity level */\n  screenReaderLevel?: 'minimal' | 'moderate' | 'verbose';\n  /** Keyboard navigation mode */\n  keyboardMode?: 'standard' | 'enhanced';\n  /** Color contrast enforcement level */\n  contrastLevel?: 'AA' | 'AAA';\n}\n\n/**\n * Default accessibility configuration\n */\nexport const DEFAULT_ACCESSIBILITY_CONFIG: AccessibilityConfig = {\n  reduceMotion: false,\n  highContrast: false,\n  focusRings: true,\n  screenReaderLevel: 'moderate',\n  keyboardMode: 'standard',\n  contrastLevel: 'AA',\n};\n\n/**\n * Main Accessibility Manager Class\n * \n * Central hub for managing all accessibility features\n */\nexport class AccessibilityManager {\n  private config: AccessibilityConfig;\n  private keyboardManager: KeyboardNavigationManager;\n  private ariaManager: AriaAttributeManager;\n  private contrastValidator: ColorContrastValidator;\n  private screenReaderUtils: ScreenReaderUtilities;\n\n  constructor(config: AccessibilityConfig = DEFAULT_ACCESSIBILITY_CONFIG) {\n    this.config = { ...DEFAULT_ACCESSIBILITY_CONFIG, ...config };\n    this.keyboardManager = new KeyboardNavigationManager();\n    this.ariaManager = new AriaAttributeManager();\n    this.contrastValidator = new ColorContrastValidator(this.config.contrastLevel || 'AA');\n    this.screenReaderUtils = new ScreenReaderUtilities(this.config.screenReaderLevel || 'moderate');\n  }\n\n  /**\n   * Initialize accessibility features\n   */\n  public initialize(): void {\n    this.setupGlobalAccessibility();\n    this.keyboardManager.initialize();\n    this.screenReaderUtils.initialize();\n    this.applyAccessibilityPreferences();\n  }\n\n  /**\n   * Update accessibility configuration\n   */\n  public updateConfig(newConfig: Partial<AccessibilityConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    this.applyAccessibilityPreferences();\n    this.notifyConfigChange();\n  }\n\n  /**\n   * Get current accessibility configuration\n   */\n  public getConfig(): AccessibilityConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Check if an element meets accessibility standards\n   */\n  public async auditElement(element: HTMLElement): Promise<{\n    passes: boolean;\n    violations: string[];\n    warnings: string[];\n  }> {\n    const violations: string[] = [];\n    const warnings: string[] = [];\n\n    // Check for proper semantic HTML\n    if (!this.hasProperSemantics(element)) {\n      violations.push('Element lacks proper semantic HTML structure');\n    }\n\n    // Check ARIA attributes\n    const ariaIssues = this.ariaManager.validateElement(element);\n    violations.push(...ariaIssues.errors);\n    warnings.push(...ariaIssues.warnings);\n\n    // Check color contrast\n    const contrastIssues = await this.contrastValidator.validateElement(element);\n    if (contrastIssues.length > 0) {\n      violations.push(...contrastIssues.map(issue => `Color contrast issue: ${issue.message}`));\n    }\n\n    // Check keyboard accessibility\n    const keyboardIssues = this.keyboardManager.validateElement(element);\n    violations.push(...keyboardIssues);\n\n    return {\n      passes: violations.length === 0,\n      violations,\n      warnings,\n    };\n  }\n\n  /**\n   * Get accessibility manager instances\n   */\n  public getManagers() {\n    return {\n      keyboard: this.keyboardManager,\n      aria: this.ariaManager,\n      contrast: this.contrastValidator,\n      screenReader: this.screenReaderUtils,\n    };\n  }\n\n  /**\n   * Setup global accessibility features\n   */\n  private setupGlobalAccessibility(): void {\n    // Add skip link if not present\n    this.ensureSkipLink();\n\n    // Setup global keyboard event listeners\n    document.addEventListener('keydown', this.handleGlobalKeydown.bind(this));\n\n    // Setup focus management\n    document.addEventListener('focusin', this.handleFocusIn.bind(this));\n    document.addEventListener('focusout', this.handleFocusOut.bind(this));\n\n    // Setup resize listener for responsive accessibility\n    window.addEventListener('resize', this.handleResize.bind(this));\n\n    // Monitor prefers-reduced-motion changes\n    const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n    mediaQuery.addListener(this.handleMotionPreferenceChange.bind(this));\n    this.handleMotionPreferenceChange(mediaQuery);\n  }\n\n  /**\n   * Apply accessibility preferences to DOM\n   */\n  private applyAccessibilityPreferences(): void {\n    const root = document.documentElement;\n\n    // Apply reduced motion\n    if (this.config.reduceMotion) {\n      root.classList.add('reduce-motion');\n    } else {\n      root.classList.remove('reduce-motion');\n    }\n\n    // Apply high contrast\n    if (this.config.highContrast) {\n      root.classList.add('high-contrast');\n    } else {\n      root.classList.remove('high-contrast');\n    }\n\n    // Apply focus rings visibility\n    if (this.config.focusRings) {\n      root.classList.add('focus-rings-visible');\n    } else {\n      root.classList.remove('focus-rings-visible');\n    }\n\n    // Update CSS custom properties\n    root.style.setProperty('--a11y-contrast-level', this.config.contrastLevel || 'AA');\n  }\n\n  /**\n   * Ensure skip link is present in the document\n   */\n  private ensureSkipLink(): void {\n    const existingSkipLink = document.querySelector('[data-skip-link]');\n    if (!existingSkipLink) {\n      const skipLink = document.createElement('a');\n      skipLink.href = '#main-content';\n      skipLink.textContent = 'Skip to main content';\n      skipLink.className = 'skip-link sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 focus:z-50 focus:px-4 focus:py-2 focus:bg-primary focus:text-primary-foreground focus:rounded-md';\n      skipLink.setAttribute('data-skip-link', 'true');\n      document.body.insertBefore(skipLink, document.body.firstChild);\n    }\n  }\n\n  /**\n   * Handle global keyboard events\n   */\n  private handleGlobalKeydown(event: KeyboardEvent): void {\n    // Handle Escape key globally\n    if (event.key === 'Escape') {\n      this.handleEscapeKey(event);\n    }\n\n    // Handle Alt + / for keyboard shortcuts help\n    if (event.altKey && event.key === '/') {\n      event.preventDefault();\n      this.showKeyboardShortcuts();\n    }\n  }\n\n  /**\n   * Handle Escape key press\n   */\n  private handleEscapeKey(event: KeyboardEvent): void {\n    // Close any open modals or dropdowns\n    const activeModal = document.querySelector('[role=\"dialog\"]:not([aria-hidden=\"true\"])');\n    if (activeModal) {\n      const closeButton = activeModal.querySelector('[data-close]') as HTMLButtonElement;\n      if (closeButton) {\n        closeButton.click();\n        return;\n      }\n    }\n\n    // Remove focus from current element if it's not essential\n    const activeElement = document.activeElement as HTMLElement;\n    if (activeElement && activeElement !== document.body && !this.isEssentialElement(activeElement)) {\n      activeElement.blur();\n    }\n  }\n\n  /**\n   * Show keyboard shortcuts overlay\n   */\n  private showKeyboardShortcuts(): void {\n    // Dispatch custom event that components can listen to\n    window.dispatchEvent(new CustomEvent('accessibility:showKeyboardShortcuts'));\n  }\n\n  /**\n   * Handle focus in events\n   */\n  private handleFocusIn(event: FocusEvent): void {\n    const target = event.target as HTMLElement;\n    if (target) {\n      // Add focus-visible class for custom focus indicators\n      target.classList.add('focus-visible');\n      \n      // Announce focus changes to screen readers if needed\n      this.screenReaderUtils.announceFocusChange(target);\n    }\n  }\n\n  /**\n   * Handle focus out events\n   */\n  private handleFocusOut(event: FocusEvent): void {\n    const target = event.target as HTMLElement;\n    if (target) {\n      target.classList.remove('focus-visible');\n    }\n  }\n\n  /**\n   * Handle window resize for responsive accessibility\n   */\n  private handleResize(): void {\n    // Update mobile-specific accessibility features\n    const isMobile = window.innerWidth < 768;\n    document.documentElement.classList.toggle('mobile-a11y', isMobile);\n  }\n\n  /**\n   * Handle motion preference changes\n   */\n  private handleMotionPreferenceChange(mediaQuery: MediaQueryList): void {\n    const prefersReducedMotion = mediaQuery.matches;\n    this.updateConfig({ reduceMotion: prefersReducedMotion });\n  }\n\n  /**\n   * Check if element has proper semantic HTML\n   */\n  private hasProperSemantics(element: HTMLElement): boolean {\n    const semanticTags = ['main', 'nav', 'header', 'footer', 'aside', 'section', 'article', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\n    const hasSemanticParent = element.closest(semanticTags.join(','));\n    const hasRole = element.getAttribute('role');\n    const hasAriaLabel = element.getAttribute('aria-label') || element.getAttribute('aria-labelledby');\n\n    return !!(hasSemanticParent || hasRole || hasAriaLabel);\n  }\n\n  /**\n   * Check if element is essential for navigation\n   */\n  private isEssentialElement(element: HTMLElement): boolean {\n    const essentialSelectors = [\n      '[role=\"main\"]',\n      '[role=\"navigation\"]',\n      '[role=\"banner\"]',\n      '[role=\"contentinfo\"]',\n      'main',\n      'nav',\n      'header',\n      'footer'\n    ];\n\n    return essentialSelectors.some(selector => element.matches(selector) || element.closest(selector));\n  }\n\n  /**\n   * Notify components of configuration changes\n   */\n  private notifyConfigChange(): void {\n    window.dispatchEvent(new CustomEvent('accessibility:configChanged', {\n      detail: this.config\n    }));\n  }\n\n  /**\n   * Cleanup accessibility manager\n   */\n  public destroy(): void {\n    // Remove event listeners and cleanup resources\n    document.removeEventListener('keydown', this.handleGlobalKeydown.bind(this));\n    document.removeEventListener('focusin', this.handleFocusIn.bind(this));\n    document.removeEventListener('focusout', this.handleFocusOut.bind(this));\n    window.removeEventListener('resize', this.handleResize.bind(this));\n\n    // Cleanup individual managers\n    this.keyboardManager.destroy();\n    this.screenReaderUtils.destroy();\n  }\n}\n\n// Global accessibility manager instance\nlet globalAccessibilityManager: AccessibilityManager | null = null;\n\n/**\n * Get or create global accessibility manager instance\n */\nexport function getAccessibilityManager(config?: AccessibilityConfig): AccessibilityManager {\n  if (!globalAccessibilityManager) {\n    globalAccessibilityManager = new AccessibilityManager(config);\n  }\n  return globalAccessibilityManager;\n}\n\n/**\n * Initialize global accessibility features\n */\nexport function initializeAccessibility(config?: AccessibilityConfig): AccessibilityManager {\n  const manager = getAccessibilityManager(config);\n  manager.initialize();\n  return manager;\n}\n\n/**\n * Utility function to test element accessibility\n */\nexport async function testElementAccessibility(element: HTMLElement): Promise<{\n  passes: boolean;\n  violations: string[];\n  warnings: string[];\n}> {\n  const manager = getAccessibilityManager();\n  return await manager.auditElement(element);\n}\n\n/**\n * Utility function to announce message to screen readers\n */\nexport function announceToScreenReader(message: string, priority: 'polite' | 'assertive' = 'polite'): void {\n  const manager = getAccessibilityManager();\n  manager.getManagers().screenReader.announce(message, priority);\n}\n\n/**\n * Utility function to trap focus within an element\n */\nexport function trapFocus(element: HTMLElement): () => void {\n  const manager = getAccessibilityManager();\n  return manager.getManagers().keyboard.trapFocus(element);\n}\n\n/**\n * Utility function to restore focus to previous element\n */\nexport function restoreFocus(): void {\n  const manager = getAccessibilityManager();\n  manager.getManagers().keyboard.restoreFocus();\n}","/**\n * ARIA Attribute Utilities\n * \n * Provides comprehensive ARIA attribute management for WCAG 2.1 AA compliance\n * including proper roles, states, properties, and relationships.\n */\n\n/**\n * ARIA role definitions with their required and optional attributes\n */\nexport const ARIA_ROLES = {\n  // Landmark roles\n  banner: { required: [], optional: ['aria-label', 'aria-labelledby'] },\n  navigation: { required: [], optional: ['aria-label', 'aria-labelledby'] },\n  main: { required: [], optional: ['aria-label', 'aria-labelledby'] },\n  contentinfo: { required: [], optional: ['aria-label', 'aria-labelledby'] },\n  complementary: { required: [], optional: ['aria-label', 'aria-labelledby'] },\n  search: { required: [], optional: ['aria-label', 'aria-labelledby'] },\n  form: { required: [], optional: ['aria-label', 'aria-labelledby'] },\n  region: { required: ['aria-label', 'aria-labelledby'], optional: [] },\n\n  // Widget roles\n  button: { required: [], optional: ['aria-pressed', 'aria-expanded', 'aria-describedby'] },\n  link: { required: [], optional: ['aria-describedby'] },\n  checkbox: { required: ['aria-checked'], optional: ['aria-describedby'] },\n  radio: { required: ['aria-checked'], optional: ['aria-describedby'] },\n  menuitem: { required: [], optional: ['aria-disabled', 'aria-expanded', 'aria-haspopup'] },\n  tab: { required: ['aria-selected'], optional: ['aria-controls', 'aria-describedby'] },\n  tabpanel: { required: ['aria-labelledby'], optional: ['aria-describedby'] },\n  dialog: { required: ['aria-labelledby', 'aria-label'], optional: ['aria-describedby'] },\n  alertdialog: { required: ['aria-labelledby', 'aria-label'], optional: ['aria-describedby'] },\n  tooltip: { required: [], optional: [] },\n  combobox: { required: ['aria-expanded'], optional: ['aria-controls', 'aria-activedescendant'] },\n  listbox: { required: [], optional: ['aria-label', 'aria-labelledby', 'aria-multiselectable'] },\n  option: { required: ['aria-selected'], optional: ['aria-disabled'] },\n  tree: { required: [], optional: ['aria-label', 'aria-labelledby', 'aria-multiselectable'] },\n  treeitem: { required: [], optional: ['aria-expanded', 'aria-selected', 'aria-level'] },\n  grid: { required: [], optional: ['aria-label', 'aria-labelledby', 'aria-multiselectable'] },\n  gridcell: { required: [], optional: ['aria-selected', 'aria-readonly'] },\n  slider: { required: ['aria-valuemin', 'aria-valuemax', 'aria-valuenow'], optional: ['aria-valuetext'] },\n\n  // Document structure roles\n  article: { required: [], optional: ['aria-label', 'aria-labelledby'] },\n  document: { required: [], optional: ['aria-label', 'aria-labelledby'] },\n  heading: { required: ['aria-level'], optional: [] },\n  list: { required: [], optional: ['aria-label', 'aria-labelledby'] },\n  listitem: { required: [], optional: [] },\n  table: { required: [], optional: ['aria-label', 'aria-labelledby', 'aria-describedby'] },\n  row: { required: [], optional: ['aria-selected', 'aria-expanded'] },\n  columnheader: { required: [], optional: ['aria-sort'] },\n  rowheader: { required: [], optional: [] },\n  cell: { required: [], optional: [] },\n\n  // Live region roles\n  alert: { required: [], optional: [] },\n  log: { required: [], optional: ['aria-live', 'aria-atomic'] },\n  status: { required: [], optional: ['aria-live', 'aria-atomic'] },\n  progressbar: { required: [], optional: ['aria-valuemin', 'aria-valuemax', 'aria-valuenow', 'aria-valuetext'] },\n} as const;\n\n/**\n * ARIA states and properties\n */\nexport const ARIA_ATTRIBUTES = {\n  // Global states and properties\n  'aria-label': { type: 'string', global: true },\n  'aria-labelledby': { type: 'idref_list', global: true },\n  'aria-describedby': { type: 'idref_list', global: true },\n  'aria-hidden': { type: 'boolean', global: true },\n  'aria-live': { type: 'token', values: ['off', 'polite', 'assertive'], global: true },\n  'aria-atomic': { type: 'boolean', global: true },\n  'aria-busy': { type: 'boolean', global: true },\n  'aria-disabled': { type: 'boolean', global: true },\n  'aria-expanded': { type: 'boolean' },\n  'aria-pressed': { type: 'tristate', values: ['true', 'false', 'mixed'] },\n  'aria-selected': { type: 'boolean' },\n  'aria-checked': { type: 'tristate', values: ['true', 'false', 'mixed'] },\n  'aria-current': { type: 'token', values: ['page', 'step', 'location', 'date', 'time', 'true', 'false'] },\n  'aria-invalid': { type: 'token', values: ['true', 'false', 'grammar', 'spelling'] },\n  'aria-required': { type: 'boolean' },\n  'aria-readonly': { type: 'boolean' },\n  'aria-multiselectable': { type: 'boolean' },\n  'aria-sort': { type: 'token', values: ['ascending', 'descending', 'none', 'other'] },\n  'aria-level': { type: 'integer' },\n  'aria-valuemin': { type: 'number' },\n  'aria-valuemax': { type: 'number' },\n  'aria-valuenow': { type: 'number' },\n  'aria-valuetext': { type: 'string' },\n  'aria-controls': { type: 'idref_list' },\n  'aria-haspopup': { type: 'token', values: ['true', 'false', 'menu', 'listbox', 'tree', 'grid', 'dialog'] },\n  'aria-activedescendant': { type: 'idref' },\n} as const;\n\n/**\n * Validation result interface\n */\nexport interface AriaValidationResult {\n  errors: string[];\n  warnings: string[];\n  suggestions: string[];\n}\n\n/**\n * ARIA relationship types\n */\nexport interface AriaRelationship {\n  source: HTMLElement;\n  target: HTMLElement;\n  relationship: string;\n}\n\n/**\n * ARIA Attribute Manager\n */\nexport class AriaAttributeManager {\n  private relationships: Map<string, AriaRelationship[]> = new Map();\n  private generatedIds: Set<string> = new Set();\n\n  /**\n   * Set ARIA attribute with validation\n   */\n  setAttribute(element: HTMLElement, attribute: string, value: string | boolean | number): boolean {\n    if (!this.isValidAriaAttribute(attribute)) {\n      console.warn(`Invalid ARIA attribute: ${attribute}`);\n      return false;\n    }\n\n    const validation = this.validateAttributeValue(attribute, value);\n    if (!validation.isValid) {\n      console.warn(`Invalid value for ${attribute}: ${value}. ${validation.message}`);\n      return false;\n    }\n\n    // Convert value to string for setAttribute\n    const stringValue = typeof value === 'boolean' ? value.toString() : String(value);\n    element.setAttribute(attribute, stringValue);\n\n    // Track relationships\n    if (this.isRelationshipAttribute(attribute)) {\n      this.trackRelationship(element, attribute, stringValue);\n    }\n\n    return true;\n  }\n\n  /**\n   * Remove ARIA attribute\n   */\n  removeAttribute(element: HTMLElement, attribute: string): void {\n    element.removeAttribute(attribute);\n    \n    // Clean up relationships\n    if (this.isRelationshipAttribute(attribute)) {\n      this.removeRelationship(element, attribute);\n    }\n  }\n\n  /**\n   * Set role with validation\n   */\n  setRole(element: HTMLElement, role: string): boolean {\n    if (!this.isValidRole(role)) {\n      console.warn(`Invalid ARIA role: ${role}`);\n      return false;\n    }\n\n    element.setAttribute('role', role);\n    \n    // Validate required attributes for this role\n    const roleDefinition = ARIA_ROLES[role as keyof typeof ARIA_ROLES];\n    if (roleDefinition) {\n      this.validateRoleRequirements(element, role, roleDefinition);\n    }\n\n    return true;\n  }\n\n  /**\n   * Generate unique ID for element\n   */\n  generateId(prefix = 'aria'): string {\n    let id: string;\n    do {\n      id = `${prefix}-${Math.random().toString(36).substr(2, 9)}`;\n    } while (document.getElementById(id) || this.generatedIds.has(id));\n    \n    this.generatedIds.add(id);\n    return id;\n  }\n\n  /**\n   * Ensure element has an ID, generating one if necessary\n   */\n  ensureId(element: HTMLElement, prefix = 'aria'): string {\n    if (!element.id) {\n      element.id = this.generateId(prefix);\n    }\n    return element.id;\n  }\n\n  /**\n   * Create label relationship\n   */\n  createLabel(element: HTMLElement, labelText: string, labelId?: string): HTMLElement {\n    const labelElement = document.createElement('span');\n    labelElement.textContent = labelText;\n    labelElement.id = labelId || this.generateId('label');\n    labelElement.className = 'sr-only'; // Screen reader only\n    \n    // Insert label before the element\n    element.parentNode?.insertBefore(labelElement, element);\n    \n    // Set aria-labelledby relationship\n    this.setAttribute(element, 'aria-labelledby', labelElement.id);\n    \n    return labelElement;\n  }\n\n  /**\n   * Create description relationship\n   */\n  createDescription(element: HTMLElement, descriptionText: string, descriptionId?: string): HTMLElement {\n    const descriptionElement = document.createElement('span');\n    descriptionElement.textContent = descriptionText;\n    descriptionElement.id = descriptionId || this.generateId('desc');\n    descriptionElement.className = 'sr-only'; // Screen reader only\n    \n    // Insert description after the element\n    if (element.nextSibling) {\n      element.parentNode?.insertBefore(descriptionElement, element.nextSibling);\n    } else {\n      element.parentNode?.appendChild(descriptionElement);\n    }\n    \n    // Set aria-describedby relationship\n    const existingDescribedBy = element.getAttribute('aria-describedby');\n    const newDescribedBy = existingDescribedBy \n      ? `${existingDescribedBy} ${descriptionElement.id}`\n      : descriptionElement.id;\n    \n    this.setAttribute(element, 'aria-describedby', newDescribedBy);\n    \n    return descriptionElement;\n  }\n\n  /**\n   * Set up combobox relationships\n   */\n  setupCombobox(\n    combobox: HTMLElement,\n    listbox: HTMLElement,\n    options: HTMLElement[]\n  ): void {\n    // Ensure IDs\n    const comboboxId = this.ensureId(combobox, 'combobox');\n    const listboxId = this.ensureId(listbox, 'listbox');\n    \n    // Set up combobox\n    this.setRole(combobox, 'combobox');\n    this.setAttribute(combobox, 'aria-expanded', false);\n    this.setAttribute(combobox, 'aria-controls', listboxId);\n    this.setAttribute(combobox, 'aria-autocomplete', 'list');\n    \n    // Set up listbox\n    this.setRole(listbox, 'listbox');\n    this.setAttribute(listbox, 'aria-labelledby', comboboxId);\n    \n    // Set up options\n    options.forEach((option, index) => {\n      this.ensureId(option, `option-${index}`);\n      this.setRole(option, 'option');\n      this.setAttribute(option, 'aria-selected', false);\n    });\n  }\n\n  /**\n   * Set up tabs relationships\n   */\n  setupTabs(\n    tablist: HTMLElement,\n    tabs: HTMLElement[],\n    tabpanels: HTMLElement[]\n  ): void {\n    // Set up tablist\n    this.setRole(tablist, 'tablist');\n    \n    // Set up tabs and panels\n    tabs.forEach((tab, index) => {\n      const tabId = this.ensureId(tab, `tab-${index}`);\n      const panelId = this.ensureId(tabpanels[index], `panel-${index}`);\n      \n      // Set up tab\n      this.setRole(tab, 'tab');\n      this.setAttribute(tab, 'aria-selected', index === 0);\n      this.setAttribute(tab, 'aria-controls', panelId);\n      this.setAttribute(tab, 'tabindex', index === 0 ? 0 : -1);\n      \n      // Set up panel\n      this.setRole(tabpanels[index], 'tabpanel');\n      this.setAttribute(tabpanels[index], 'aria-labelledby', tabId);\n      this.setAttribute(tabpanels[index], 'aria-hidden', index !== 0);\n    });\n  }\n\n  /**\n   * Set up dialog relationships\n   */\n  setupDialog(\n    dialog: HTMLElement,\n    titleElement?: HTMLElement,\n    descriptionElement?: HTMLElement\n  ): void {\n    // Set up dialog\n    this.setRole(dialog, 'dialog');\n    this.setAttribute(dialog, 'aria-modal', true);\n    \n    // Set up title relationship\n    if (titleElement) {\n      const titleId = this.ensureId(titleElement, 'dialog-title');\n      this.setAttribute(dialog, 'aria-labelledby', titleId);\n    }\n    \n    // Set up description relationship\n    if (descriptionElement) {\n      const descId = this.ensureId(descriptionElement, 'dialog-desc');\n      this.setAttribute(dialog, 'aria-describedby', descId);\n    }\n  }\n\n  /**\n   * Validate element's ARIA attributes\n   */\n  validateElement(element: HTMLElement): AriaValidationResult {\n    const result: AriaValidationResult = {\n      errors: [],\n      warnings: [],\n      suggestions: []\n    };\n\n    // Get element's role\n    const role = element.getAttribute('role');\n    \n    // Validate role-specific requirements\n    if (role && ARIA_ROLES[role as keyof typeof ARIA_ROLES]) {\n      const roleRequirements = ARIA_ROLES[role as keyof typeof ARIA_ROLES];\n      this.validateRoleRequirements(element, role, roleRequirements, result);\n    }\n\n    // Validate all ARIA attributes\n    Array.from(element.attributes).forEach(attr => {\n      if (attr.name.startsWith('aria-')) {\n        const validation = this.validateAttributeValue(attr.name, attr.value);\n        if (!validation.isValid) {\n          result.errors.push(`Invalid ${attr.name}: ${validation.message}`);\n        }\n      }\n    });\n\n    // Check for accessibility improvements\n    this.suggestImprovements(element, result);\n\n    return result;\n  }\n\n  /**\n   * Check if attribute is a valid ARIA attribute\n   */\n  private isValidAriaAttribute(attribute: string): boolean {\n    return attribute in ARIA_ATTRIBUTES || attribute === 'role';\n  }\n\n  /**\n   * Check if role is valid\n   */\n  private isValidRole(role: string): boolean {\n    return role in ARIA_ROLES;\n  }\n\n  /**\n   * Validate attribute value\n   */\n  private validateAttributeValue(\n    attribute: string,\n    value: string | boolean | number\n  ): { isValid: boolean; message?: string } {\n    const attrDef = ARIA_ATTRIBUTES[attribute as keyof typeof ARIA_ATTRIBUTES];\n    if (!attrDef) {\n      return { isValid: false, message: 'Unknown ARIA attribute' };\n    }\n\n    const stringValue = String(value);\n\n    switch (attrDef.type) {\n      case 'boolean':\n        if (!['true', 'false'].includes(stringValue)) {\n          return { isValid: false, message: 'Must be \"true\" or \"false\"' };\n        }\n        break;\n\n      case 'tristate':\n        if (attrDef.values && !attrDef.values.includes(stringValue)) {\n          return { isValid: false, message: `Must be one of: ${attrDef.values.join(', ')}` };\n        }\n        break;\n\n      case 'token':\n        if (attrDef.values && !attrDef.values.includes(stringValue)) {\n          return { isValid: false, message: `Must be one of: ${attrDef.values.join(', ')}` };\n        }\n        break;\n\n      case 'integer':\n        if (!/^\\d+$/.test(stringValue)) {\n          return { isValid: false, message: 'Must be an integer' };\n        }\n        break;\n\n      case 'number':\n        if (isNaN(Number(stringValue))) {\n          return { isValid: false, message: 'Must be a number' };\n        }\n        break;\n\n      case 'idref':\n        if (!document.getElementById(stringValue)) {\n          return { isValid: false, message: 'Referenced element does not exist' };\n        }\n        break;\n\n      case 'idref_list':\n        const ids = stringValue.split(/\\s+/);\n        for (const id of ids) {\n          if (id && !document.getElementById(id)) {\n            return { isValid: false, message: `Referenced element \"${id}\" does not exist` };\n          }\n        }\n        break;\n    }\n\n    return { isValid: true };\n  }\n\n  /**\n   * Track relationship between elements\n   */\n  private trackRelationship(element: HTMLElement, attribute: string, value: string): void {\n    const ids = value.split(/\\s+/);\n    const elementId = this.ensureId(element);\n    \n    ids.forEach(id => {\n      const target = document.getElementById(id);\n      if (target) {\n        const relationship: AriaRelationship = {\n          source: element,\n          target: target,\n          relationship: attribute\n        };\n        \n        if (!this.relationships.has(elementId)) {\n          this.relationships.set(elementId, []);\n        }\n        this.relationships.get(elementId)!.push(relationship);\n      }\n    });\n  }\n\n  /**\n   * Remove relationship tracking\n   */\n  private removeRelationship(element: HTMLElement, attribute: string): void {\n    const elementId = element.id;\n    if (elementId && this.relationships.has(elementId)) {\n      const relationships = this.relationships.get(elementId)!;\n      const filtered = relationships.filter(rel => rel.relationship !== attribute);\n      \n      if (filtered.length === 0) {\n        this.relationships.delete(elementId);\n      } else {\n        this.relationships.set(elementId, filtered);\n      }\n    }\n  }\n\n  /**\n   * Check if attribute creates relationships\n   */\n  private isRelationshipAttribute(attribute: string): boolean {\n    return ['aria-labelledby', 'aria-describedby', 'aria-controls', 'aria-activedescendant'].includes(attribute);\n  }\n\n  /**\n   * Validate role requirements\n   */\n  private validateRoleRequirements(\n    element: HTMLElement,\n    role: string,\n    roleDefinition: { required: string[]; optional: string[] },\n    result?: AriaValidationResult\n  ): void {\n    // Check required attributes\n    roleDefinition.required.forEach(requiredAttr => {\n      if (!element.hasAttribute(requiredAttr)) {\n        const message = `Role \"${role}\" requires attribute \"${requiredAttr}\"`;\n        if (result) {\n          result.errors.push(message);\n        } else {\n          console.warn(message);\n        }\n      }\n    });\n  }\n\n  /**\n   * Suggest accessibility improvements\n   */\n  private suggestImprovements(element: HTMLElement, result: AriaValidationResult): void {\n    // Check for missing labels\n    if (this.needsLabel(element) && !this.hasLabel(element)) {\n      result.suggestions.push('Consider adding aria-label or aria-labelledby');\n    }\n\n    // Check for missing descriptions\n    if (this.couldBenefitFromDescription(element) && !element.hasAttribute('aria-describedby')) {\n      result.suggestions.push('Consider adding aria-describedby for additional context');\n    }\n\n    // Check for keyboard accessibility\n    if (this.isInteractive(element) && !this.isKeyboardAccessible(element)) {\n      result.warnings.push('Interactive element may not be keyboard accessible');\n    }\n  }\n\n  /**\n   * Check if element needs a label\n   */\n  private needsLabel(element: HTMLElement): boolean {\n    const role = element.getAttribute('role');\n    const tagName = element.tagName.toLowerCase();\n    \n    return (\n      ['button', 'link', 'checkbox', 'radio', 'textbox', 'combobox'].includes(role || tagName) ||\n      ['input', 'button', 'select', 'textarea'].includes(tagName)\n    );\n  }\n\n  /**\n   * Check if element has a label\n   */\n  private hasLabel(element: HTMLElement): boolean {\n    return !!(\n      element.getAttribute('aria-label') ||\n      element.getAttribute('aria-labelledby') ||\n      element.textContent?.trim() ||\n      (element.tagName === 'INPUT' && element.getAttribute('placeholder')) ||\n      document.querySelector(`label[for=\"${element.id}\"]`)\n    );\n  }\n\n  /**\n   * Check if element could benefit from description\n   */\n  private couldBenefitFromDescription(element: HTMLElement): boolean {\n    const role = element.getAttribute('role');\n    return ['button', 'link', 'dialog', 'alertdialog'].includes(role || element.tagName.toLowerCase());\n  }\n\n  /**\n   * Check if element is interactive\n   */\n  private isInteractive(element: HTMLElement): boolean {\n    const interactiveTags = ['button', 'a', 'input', 'select', 'textarea'];\n    const interactiveRoles = ['button', 'link', 'checkbox', 'radio', 'textbox', 'combobox', 'menuitem', 'tab'];\n    \n    return (\n      interactiveTags.includes(element.tagName.toLowerCase()) ||\n      interactiveRoles.includes(element.getAttribute('role') || '') ||\n      element.hasAttribute('onclick') ||\n      element.tabIndex >= 0\n    );\n  }\n\n  /**\n   * Check if element is keyboard accessible\n   */\n  private isKeyboardAccessible(element: HTMLElement): boolean {\n    return (\n      element.tabIndex >= 0 ||\n      ['A', 'BUTTON', 'INPUT', 'SELECT', 'TEXTAREA'].includes(element.tagName) ||\n      element.hasAttribute('onclick') ||\n      element.hasAttribute('onkeydown')\n    );\n  }\n\n  /**\n   * Get all relationships for debugging\n   */\n  getRelationships(): Map<string, AriaRelationship[]> {\n    return new Map(this.relationships);\n  }\n\n  /**\n   * Clean up generated IDs and relationships\n   */\n  cleanup(): void {\n    this.relationships.clear();\n    this.generatedIds.clear();\n  }\n}\n\n/**\n * Utility functions for common ARIA patterns\n */\n\n/**\n * Make element accessible as a button\n */\nexport function makeAccessibleButton(element: HTMLElement, label?: string): void {\n  const ariaManager = new AriaAttributeManager();\n  \n  ariaManager.setRole(element, 'button');\n  element.setAttribute('tabindex', '0');\n  \n  if (label) {\n    ariaManager.setAttribute(element, 'aria-label', label);\n  }\n  \n  // Add keyboard event handling\n  element.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault();\n      element.click();\n    }\n  });\n}\n\n/**\n * Make element accessible as a link\n */\nexport function makeAccessibleLink(element: HTMLElement, href?: string, label?: string): void {\n  const ariaManager = new AriaAttributeManager();\n  \n  if (href) {\n    (element as HTMLAnchorElement).href = href;\n  }\n  \n  if (!element.tagName === 'A') {\n    ariaManager.setRole(element, 'link');\n    element.setAttribute('tabindex', '0');\n  }\n  \n  if (label) {\n    ariaManager.setAttribute(element, 'aria-label', label);\n  }\n  \n  // Add keyboard event handling for non-anchor elements\n  if (element.tagName !== 'A') {\n    element.addEventListener('keydown', (event) => {\n      if (event.key === 'Enter') {\n        event.preventDefault();\n        element.click();\n      }\n    });\n  }\n}\n\n/**\n * Set up live region for announcements\n */\nexport function setupLiveRegion(element: HTMLElement, politeness: 'polite' | 'assertive' = 'polite'): void {\n  const ariaManager = new AriaAttributeManager();\n  \n  ariaManager.setAttribute(element, 'aria-live', politeness);\n  ariaManager.setAttribute(element, 'aria-atomic', true);\n  \n  // Hide from visual display but keep for screen readers\n  element.className = 'sr-only';\n}\n\n/**\n * Create skip link for keyboard navigation\n */\nexport function createSkipLink(targetId: string, text = 'Skip to main content'): HTMLElement {\n  const ariaManager = new AriaAttributeManager();\n  \n  const skipLink = document.createElement('a');\n  skipLink.href = `#${targetId}`;\n  skipLink.textContent = text;\n  skipLink.className = 'skip-link sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 focus:z-50';\n  \n  // Ensure target exists and is focusable\n  const target = document.getElementById(targetId);\n  if (target) {\n    if (!target.hasAttribute('tabindex')) {\n      target.setAttribute('tabindex', '-1');\n    }\n  }\n  \n  return skipLink;\n}\n\n/**\n * Ensure proper heading hierarchy\n */\nexport function validateHeadingHierarchy(container: HTMLElement = document.body): string[] {\n  const issues: string[] = [];\n  const headings = container.querySelectorAll('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n  \n  let previousLevel = 0;\n  \n  headings.forEach((heading, index) => {\n    let currentLevel: number;\n    \n    if (heading.hasAttribute('role') && heading.getAttribute('role') === 'heading') {\n      const ariaLevel = heading.getAttribute('aria-level');\n      currentLevel = ariaLevel ? parseInt(ariaLevel, 10) : 1;\n    } else {\n      currentLevel = parseInt(heading.tagName.charAt(1), 10);\n    }\n    \n    if (index === 0 && currentLevel !== 1) {\n      issues.push(`First heading should be level 1, found level ${currentLevel}`);\n    } else if (index > 0 && currentLevel > previousLevel + 1) {\n      issues.push(`Heading level jumped from ${previousLevel} to ${currentLevel}. Consider using level ${previousLevel + 1} instead.`);\n    }\n    \n    previousLevel = currentLevel;\n  });\n  \n  return issues;\n}","/**\n * Color Contrast Validation\n * \n * Provides comprehensive color contrast validation for WCAG 2.1 AA/AAA compliance\n * including contrast ratio calculations and automatic color adjustments.\n */\n\n/**\n * WCAG contrast ratio requirements\n */\nexport const WCAG_CONTRAST_REQUIREMENTS = {\n  AA: {\n    normal: 4.5,      // Normal text\n    large: 3.0,       // Large text (18pt+ or 14pt+ bold)\n    nonText: 3.0,     // Non-text elements (UI components, graphics)\n  },\n  AAA: {\n    normal: 7.0,      // Normal text\n    large: 4.5,       // Large text\n    nonText: 3.0,     // Non-text elements\n  },\n} as const;\n\n/**\n * Color representation interfaces\n */\nexport interface RGBColor {\n  r: number;\n  g: number;\n  b: number;\n}\n\nexport interface HSLColor {\n  h: number;\n  s: number;\n  l: number;\n}\n\nexport interface ContrastResult {\n  ratio: number;\n  passes: {\n    AA: {\n      normal: boolean;\n      large: boolean;\n      nonText: boolean;\n    };\n    AAA: {\n      normal: boolean;\n      large: boolean;\n      nonText: boolean;\n    };\n  };\n  level: 'AA' | 'AAA' | 'fail';\n}\n\nexport interface ColorAdjustment {\n  original: string;\n  adjusted: string;\n  ratio: number;\n  method: 'lighten' | 'darken' | 'hue-shift' | 'saturation';\n}\n\nexport interface ContrastIssue {\n  element: HTMLElement;\n  foreground: string;\n  background: string;\n  ratio: number;\n  required: number;\n  message: string;\n  suggestions: ColorAdjustment[];\n}\n\n/**\n * Color Contrast Validator\n */\nexport class ColorContrastValidator {\n  private complianceLevel: 'AA' | 'AAA';\n  private cache: Map<string, ContrastResult> = new Map();\n\n  constructor(complianceLevel: 'AA' | 'AAA' = 'AA') {\n    this.complianceLevel = complianceLevel;\n  }\n\n  /**\n   * Calculate contrast ratio between two colors\n   */\n  calculateContrastRatio(color1: string, color2: string): number {\n    const cacheKey = `${color1}-${color2}`;\n    if (this.cache.has(cacheKey)) {\n      return this.cache.get(cacheKey)!.ratio;\n    }\n\n    const rgb1 = this.parseColor(color1);\n    const rgb2 = this.parseColor(color2);\n\n    if (!rgb1 || !rgb2) {\n      return 1; // Return minimum ratio if colors can't be parsed\n    }\n\n    const luminance1 = this.calculateLuminance(rgb1);\n    const luminance2 = this.calculateLuminance(rgb2);\n\n    const lighter = Math.max(luminance1, luminance2);\n    const darker = Math.min(luminance1, luminance2);\n\n    const ratio = (lighter + 0.05) / (darker + 0.05);\n\n    // Cache the result\n    const result = this.createContrastResult(ratio);\n    this.cache.set(cacheKey, result);\n\n    return ratio;\n  }\n\n  /**\n   * Check if contrast meets WCAG requirements\n   */\n  checkContrast(\n    foreground: string,\n    background: string,\n    textSize: 'normal' | 'large' = 'normal',\n    isText = true\n  ): ContrastResult {\n    const ratio = this.calculateContrastRatio(foreground, background);\n    const result = this.createContrastResult(ratio);\n\n    // Determine if it passes based on context\n    const requirements = WCAG_CONTRAST_REQUIREMENTS[this.complianceLevel];\n    const requiredRatio = isText \n      ? (textSize === 'large' ? requirements.large : requirements.normal)\n      : requirements.nonText;\n\n    result.level = ratio >= requiredRatio ? this.complianceLevel : 'fail';\n\n    return result;\n  }\n\n  /**\n   * Validate element's color contrast\n   */\n  async validateElement(element: HTMLElement): Promise<ContrastIssue[]> {\n    const issues: ContrastIssue[] = [];\n    const computedStyle = window.getComputedStyle(element);\n\n    // Get foreground and background colors\n    const foreground = computedStyle.color;\n    const background = await this.getEffectiveBackgroundColor(element);\n\n    if (!foreground || !background) {\n      return issues;\n    }\n\n    // Determine if it's large text\n    const isLargeText = this.isLargeText(computedStyle);\n    const isText = this.isTextContent(element);\n\n    // Check contrast\n    const result = this.checkContrast(foreground, background, isLargeText ? 'large' : 'normal', isText);\n\n    if (result.level === 'fail') {\n      const requirements = WCAG_CONTRAST_REQUIREMENTS[this.complianceLevel];\n      const requiredRatio = isText \n        ? (isLargeText ? requirements.large : requirements.normal)\n        : requirements.nonText;\n\n      const suggestions = this.suggestColorAdjustments(foreground, background, requiredRatio);\n\n      issues.push({\n        element,\n        foreground,\n        background,\n        ratio: result.ratio,\n        required: requiredRatio,\n        message: `Contrast ratio ${result.ratio.toFixed(2)} is below required ${requiredRatio} for ${this.complianceLevel} compliance`,\n        suggestions,\n      });\n    }\n\n    return issues;\n  }\n\n  /**\n   * Validate all elements in container\n   */\n  async validateContainer(container: HTMLElement = document.body): Promise<ContrastIssue[]> {\n    const issues: ContrastIssue[] = [];\n    const elements = container.querySelectorAll('*');\n\n    for (const element of Array.from(elements)) {\n      if (element instanceof HTMLElement && this.shouldValidateElement(element)) {\n        const elementIssues = await this.validateElement(element);\n        issues.push(...elementIssues);\n      }\n    }\n\n    return issues;\n  }\n\n  /**\n   * Suggest color adjustments to meet contrast requirements\n   */\n  suggestColorAdjustments(\n    foreground: string,\n    background: string,\n    targetRatio: number\n  ): ColorAdjustment[] {\n    const suggestions: ColorAdjustment[] = [];\n    \n    // Try adjusting foreground color\n    const foregroundAdjustments = this.adjustColorForContrast(\n      foreground,\n      background,\n      targetRatio,\n      'foreground'\n    );\n    suggestions.push(...foregroundAdjustments);\n\n    // Try adjusting background color\n    const backgroundAdjustments = this.adjustColorForContrast(\n      background,\n      foreground,\n      targetRatio,\n      'background'\n    );\n    suggestions.push(...backgroundAdjustments);\n\n    // Sort by how close they get to the target ratio\n    return suggestions\n      .filter(suggestion => suggestion.ratio >= targetRatio)\n      .sort((a, b) => b.ratio - a.ratio)\n      .slice(0, 5); // Return top 5 suggestions\n  }\n\n  /**\n   * Automatically fix contrast issues\n   */\n  async autoFixContrast(element: HTMLElement): Promise<boolean> {\n    const issues = await this.validateElement(element);\n    \n    if (issues.length === 0) {\n      return true; // No issues to fix\n    }\n\n    const issue = issues[0]; // Fix the first issue\n    if (issue.suggestions.length === 0) {\n      return false; // No suggestions available\n    }\n\n    const bestSuggestion = issue.suggestions[0];\n    \n    // Apply the suggested color\n    if (bestSuggestion.method === 'background') {\n      element.style.backgroundColor = bestSuggestion.adjusted;\n    } else {\n      element.style.color = bestSuggestion.adjusted;\n    }\n\n    return true;\n  }\n\n  /**\n   * Parse color string to RGB\n   */\n  private parseColor(color: string): RGBColor | null {\n    // Handle named colors by creating a temporary element\n    if (!color.startsWith('#') && !color.startsWith('rgb') && !color.startsWith('hsl')) {\n      const tempElement = document.createElement('div');\n      tempElement.style.color = color;\n      document.body.appendChild(tempElement);\n      const computedColor = window.getComputedStyle(tempElement).color;\n      document.body.removeChild(tempElement);\n      color = computedColor;\n    }\n\n    // Parse RGB/RGBA\n    const rgbMatch = color.match(/rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*[\\d.]+)?\\)/);\n    if (rgbMatch) {\n      return {\n        r: parseInt(rgbMatch[1], 10),\n        g: parseInt(rgbMatch[2], 10),\n        b: parseInt(rgbMatch[3], 10),\n      };\n    }\n\n    // Parse hex colors\n    const hexMatch = color.match(/^#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/);\n    if (hexMatch) {\n      const hex = hexMatch[1];\n      if (hex.length === 3) {\n        return {\n          r: parseInt(hex[0] + hex[0], 16),\n          g: parseInt(hex[1] + hex[1], 16),\n          b: parseInt(hex[2] + hex[2], 16),\n        };\n      } else {\n        return {\n          r: parseInt(hex.substring(0, 2), 16),\n          g: parseInt(hex.substring(2, 4), 16),\n          b: parseInt(hex.substring(4, 6), 16),\n        };\n      }\n    }\n\n    // Parse HSL\n    const hslMatch = color.match(/hsla?\\((\\d+),\\s*(\\d+)%,\\s*(\\d+)%(?:,\\s*[\\d.]+)?\\)/);\n    if (hslMatch) {\n      const h = parseInt(hslMatch[1], 10);\n      const s = parseInt(hslMatch[2], 10) / 100;\n      const l = parseInt(hslMatch[3], 10) / 100;\n      return this.hslToRgb({ h, s, l });\n    }\n\n    return null;\n  }\n\n  /**\n   * Calculate relative luminance\n   */\n  private calculateLuminance(rgb: RGBColor): number {\n    const { r, g, b } = rgb;\n\n    // Convert to 0-1 range\n    const rs = r / 255;\n    const gs = g / 255;\n    const bs = b / 255;\n\n    // Apply gamma correction\n    const rLinear = rs <= 0.03928 ? rs / 12.92 : Math.pow((rs + 0.055) / 1.055, 2.4);\n    const gLinear = gs <= 0.03928 ? gs / 12.92 : Math.pow((gs + 0.055) / 1.055, 2.4);\n    const bLinear = bs <= 0.03928 ? bs / 12.92 : Math.pow((bs + 0.055) / 1.055, 2.4);\n\n    // Calculate luminance\n    return 0.2126 * rLinear + 0.7152 * gLinear + 0.0722 * bLinear;\n  }\n\n  /**\n   * Get effective background color (considering parent backgrounds)\n   */\n  private async getEffectiveBackgroundColor(element: HTMLElement): Promise<string> {\n    let currentElement: HTMLElement | null = element;\n    const backgrounds: string[] = [];\n\n    while (currentElement && currentElement !== document.body) {\n      const computedStyle = window.getComputedStyle(currentElement);\n      const backgroundColor = computedStyle.backgroundColor;\n\n      if (backgroundColor && backgroundColor !== 'rgba(0, 0, 0, 0)' && backgroundColor !== 'transparent') {\n        backgrounds.push(backgroundColor);\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    // Add body background as fallback\n    const bodyStyle = window.getComputedStyle(document.body);\n    const bodyBackground = bodyStyle.backgroundColor;\n    if (bodyBackground && bodyBackground !== 'rgba(0, 0, 0, 0)') {\n      backgrounds.push(bodyBackground);\n    } else {\n      backgrounds.push('#ffffff'); // Default to white\n    }\n\n    // If only one background, return it\n    if (backgrounds.length <= 1) {\n      return backgrounds[0] || '#ffffff';\n    }\n\n    // Blend multiple backgrounds (simplified - assumes no alpha)\n    return backgrounds[0];\n  }\n\n  /**\n   * Check if text is considered large\n   */\n  private isLargeText(computedStyle: CSSStyleDeclaration): boolean {\n    const fontSize = parseFloat(computedStyle.fontSize);\n    const fontWeight = computedStyle.fontWeight;\n\n    // 18pt = 24px at 96 DPI\n    if (fontSize >= 24) {\n      return true;\n    }\n\n    // 14pt = ~18.67px at 96 DPI, bold\n    if (fontSize >= 18.67 && (fontWeight === 'bold' || parseInt(fontWeight, 10) >= 700)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Check if element contains text content\n   */\n  private isTextContent(element: HTMLElement): boolean {\n    const textContent = element.textContent?.trim();\n    if (!textContent) return false;\n\n    // Check if element is primarily for text display\n    const role = element.getAttribute('role');\n    const textRoles = ['text', 'heading', 'paragraph'];\n    const textTags = ['P', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'SPAN', 'DIV', 'A', 'BUTTON', 'LABEL'];\n\n    return (\n      textTags.includes(element.tagName) ||\n      (role && textRoles.includes(role)) ||\n      element.matches('p, h1, h2, h3, h4, h5, h6, span:not([class*=\"icon\"]), a, button, label')\n    );\n  }\n\n  /**\n   * Check if element should be validated\n   */\n  private shouldValidateElement(element: HTMLElement): boolean {\n    // Skip elements that are hidden\n    const computedStyle = window.getComputedStyle(element);\n    if (computedStyle.display === 'none' || computedStyle.visibility === 'hidden') {\n      return false;\n    }\n\n    // Skip elements without text content and non-interactive elements\n    const hasTextContent = element.textContent?.trim();\n    const isInteractive = this.isInteractiveElement(element);\n\n    return !!(hasTextContent || isInteractive);\n  }\n\n  /**\n   * Check if element is interactive\n   */\n  private isInteractiveElement(element: HTMLElement): boolean {\n    const interactiveTags = ['BUTTON', 'A', 'INPUT', 'SELECT', 'TEXTAREA'];\n    const interactiveRoles = ['button', 'link', 'checkbox', 'radio', 'menuitem', 'tab'];\n\n    return (\n      interactiveTags.includes(element.tagName) ||\n      interactiveRoles.includes(element.getAttribute('role') || '') ||\n      element.hasAttribute('onclick') ||\n      element.tabIndex >= 0\n    );\n  }\n\n  /**\n   * Create contrast result object\n   */\n  private createContrastResult(ratio: number): ContrastResult {\n    const requirements = WCAG_CONTRAST_REQUIREMENTS;\n\n    return {\n      ratio,\n      passes: {\n        AA: {\n          normal: ratio >= requirements.AA.normal,\n          large: ratio >= requirements.AA.large,\n          nonText: ratio >= requirements.AA.nonText,\n        },\n        AAA: {\n          normal: ratio >= requirements.AAA.normal,\n          large: ratio >= requirements.AAA.large,\n          nonText: ratio >= requirements.AAA.nonText,\n        },\n      },\n      level: ratio >= requirements.AAA.normal ? 'AAA' : \n             ratio >= requirements.AA.normal ? 'AA' : 'fail',\n    };\n  }\n\n  /**\n   * Adjust color to meet contrast requirements\n   */\n  private adjustColorForContrast(\n    colorToAdjust: string,\n    otherColor: string,\n    targetRatio: number,\n    adjustmentType: 'foreground' | 'background'\n  ): ColorAdjustment[] {\n    const adjustments: ColorAdjustment[] = [];\n    const rgb = this.parseColor(colorToAdjust);\n    const otherRgb = this.parseColor(otherColor);\n\n    if (!rgb || !otherRgb) return adjustments;\n\n    const hsl = this.rgbToHsl(rgb);\n\n    // Try lightening/darkening\n    const lightnessAdjustments = this.adjustLightness(hsl, otherColor, targetRatio);\n    adjustments.push(...lightnessAdjustments.map(adj => ({\n      ...adj,\n      original: colorToAdjust,\n      method: adj.ratio > this.calculateContrastRatio(colorToAdjust, otherColor) ? \n        (hsl.l < 0.5 ? 'lighten' : 'darken') as 'lighten' | 'darken' :\n        (hsl.l >= 0.5 ? 'lighten' : 'darken') as 'lighten' | 'darken'\n    })));\n\n    // Try adjusting saturation\n    const saturationAdjustments = this.adjustSaturation(hsl, otherColor, targetRatio);\n    adjustments.push(...saturationAdjustments.map(adj => ({\n      ...adj,\n      original: colorToAdjust,\n      method: 'saturation' as const\n    })));\n\n    return adjustments;\n  }\n\n  /**\n   * Adjust lightness to meet contrast\n   */\n  private adjustLightness(hsl: HSLColor, otherColor: string, targetRatio: number): Omit<ColorAdjustment, 'original' | 'method'>[] {\n    const adjustments: Omit<ColorAdjustment, 'original' | 'method'>[] = [];\n    \n    // Try lightening\n    for (let l = hsl.l + 0.1; l <= 1; l += 0.1) {\n      const adjustedColor = this.hslToHex({ ...hsl, l });\n      const ratio = this.calculateContrastRatio(adjustedColor, otherColor);\n      \n      if (ratio >= targetRatio) {\n        adjustments.push({\n          adjusted: adjustedColor,\n          ratio,\n        });\n        break;\n      }\n    }\n\n    // Try darkening\n    for (let l = hsl.l - 0.1; l >= 0; l -= 0.1) {\n      const adjustedColor = this.hslToHex({ ...hsl, l });\n      const ratio = this.calculateContrastRatio(adjustedColor, otherColor);\n      \n      if (ratio >= targetRatio) {\n        adjustments.push({\n          adjusted: adjustedColor,\n          ratio,\n        });\n        break;\n      }\n    }\n\n    return adjustments;\n  }\n\n  /**\n   * Adjust saturation to meet contrast\n   */\n  private adjustSaturation(hsl: HSLColor, otherColor: string, targetRatio: number): Omit<ColorAdjustment, 'original' | 'method'>[] {\n    const adjustments: Omit<ColorAdjustment, 'original' | 'method'>[] = [];\n    \n    // Try reducing saturation\n    for (let s = hsl.s - 0.1; s >= 0; s -= 0.1) {\n      const adjustedColor = this.hslToHex({ ...hsl, s });\n      const ratio = this.calculateContrastRatio(adjustedColor, otherColor);\n      \n      if (ratio >= targetRatio) {\n        adjustments.push({\n          adjusted: adjustedColor,\n          ratio,\n        });\n        break;\n      }\n    }\n\n    return adjustments;\n  }\n\n  /**\n   * Convert RGB to HSL\n   */\n  private rgbToHsl(rgb: RGBColor): HSLColor {\n    const { r, g, b } = rgb;\n    const rNorm = r / 255;\n    const gNorm = g / 255;\n    const bNorm = b / 255;\n\n    const max = Math.max(rNorm, gNorm, bNorm);\n    const min = Math.min(rNorm, gNorm, bNorm);\n    const diff = max - min;\n\n    let h = 0;\n    let s = 0;\n    const l = (max + min) / 2;\n\n    if (diff !== 0) {\n      s = l > 0.5 ? diff / (2 - max - min) : diff / (max + min);\n\n      switch (max) {\n        case rNorm:\n          h = ((gNorm - bNorm) / diff + (gNorm < bNorm ? 6 : 0)) / 6;\n          break;\n        case gNorm:\n          h = ((bNorm - rNorm) / diff + 2) / 6;\n          break;\n        case bNorm:\n          h = ((rNorm - gNorm) / diff + 4) / 6;\n          break;\n      }\n    }\n\n    return { h: h * 360, s, l };\n  }\n\n  /**\n   * Convert HSL to RGB\n   */\n  private hslToRgb(hsl: HSLColor): RGBColor {\n    const { h, s, l } = hsl;\n    const hNorm = h / 360;\n\n    const c = (1 - Math.abs(2 * l - 1)) * s;\n    const x = c * (1 - Math.abs((hNorm * 6) % 2 - 1));\n    const m = l - c / 2;\n\n    let r = 0, g = 0, b = 0;\n\n    if (0 <= hNorm && hNorm < 1/6) {\n      r = c; g = x; b = 0;\n    } else if (1/6 <= hNorm && hNorm < 1/3) {\n      r = x; g = c; b = 0;\n    } else if (1/3 <= hNorm && hNorm < 1/2) {\n      r = 0; g = c; b = x;\n    } else if (1/2 <= hNorm && hNorm < 2/3) {\n      r = 0; g = x; b = c;\n    } else if (2/3 <= hNorm && hNorm < 5/6) {\n      r = x; g = 0; b = c;\n    } else if (5/6 <= hNorm && hNorm < 1) {\n      r = c; g = 0; b = x;\n    }\n\n    return {\n      r: Math.round((r + m) * 255),\n      g: Math.round((g + m) * 255),\n      b: Math.round((b + m) * 255),\n    };\n  }\n\n  /**\n   * Convert HSL to hex color\n   */\n  private hslToHex(hsl: HSLColor): string {\n    const rgb = this.hslToRgb(hsl);\n    const toHex = (n: number) => {\n      const hex = Math.round(n).toString(16);\n      return hex.length === 1 ? '0' + hex : hex;\n    };\n    return `#${toHex(rgb.r)}${toHex(rgb.g)}${toHex(rgb.b)}`;\n  }\n\n  /**\n   * Clear cache\n   */\n  clearCache(): void {\n    this.cache.clear();\n  }\n\n  /**\n   * Set compliance level\n   */\n  setComplianceLevel(level: 'AA' | 'AAA'): void {\n    this.complianceLevel = level;\n    this.clearCache(); // Clear cache since requirements changed\n  }\n}\n\n/**\n * Utility functions\n */\n\n/**\n * Quick contrast check for two colors\n */\nexport function checkColorContrast(\n  foreground: string,\n  background: string,\n  level: 'AA' | 'AAA' = 'AA'\n): ContrastResult {\n  const validator = new ColorContrastValidator(level);\n  return validator.checkContrast(foreground, background);\n}\n\n/**\n * Get contrast ratio between two colors\n */\nexport function getContrastRatio(color1: string, color2: string): number {\n  const validator = new ColorContrastValidator();\n  return validator.calculateContrastRatio(color1, color2);\n}\n\n/**\n * Check if colors meet WCAG requirements\n */\nexport function meetsWCAG(\n  foreground: string,\n  background: string,\n  level: 'AA' | 'AAA' = 'AA',\n  textSize: 'normal' | 'large' = 'normal'\n): boolean {\n  const result = checkColorContrast(foreground, background, level);\n  const requirements = WCAG_CONTRAST_REQUIREMENTS[level];\n  const requiredRatio = textSize === 'large' ? requirements.large : requirements.normal;\n  \n  return result.ratio >= requiredRatio;\n}\n\n/**\n * Find accessible color variations\n */\nexport function findAccessibleColors(\n  baseColor: string,\n  backgroundColors: string[],\n  level: 'AA' | 'AAA' = 'AA'\n): { background: string; contrast: number; passes: boolean }[] {\n  const validator = new ColorContrastValidator(level);\n  \n  return backgroundColors.map(bg => {\n    const contrast = validator.calculateContrastRatio(baseColor, bg);\n    const result = validator.checkContrast(baseColor, bg);\n    \n    return {\n      background: bg,\n      contrast,\n      passes: result.level !== 'fail',\n    };\n  }).sort((a, b) => b.contrast - a.contrast);\n}","/**\n * Screen Reader Utilities\n * \n * Provides comprehensive screen reader support including live regions,\n * announcements, and optimized content for screen readers.\n */\n\n/**\n * Screen reader verbosity levels\n */\nexport type ScreenReaderVerbosity = 'minimal' | 'moderate' | 'verbose';\n\n/**\n * Live region politeness levels\n */\nexport type LiveRegionPoliteness = 'off' | 'polite' | 'assertive';\n\n/**\n * Announcement configuration\n */\nexport interface AnnouncementConfig {\n  message: string;\n  priority: LiveRegionPoliteness;\n  delay?: number;\n  clear?: boolean;\n}\n\n/**\n * Screen reader context information\n */\nexport interface ScreenReaderContext {\n  currentElement?: HTMLElement;\n  navigationHistory: HTMLElement[];\n  lastAnnouncement?: string;\n  announcementQueue: AnnouncementConfig[];\n}\n\n/**\n * Screen reader detection result\n */\nexport interface ScreenReaderInfo {\n  detected: boolean;\n  name?: string;\n  version?: string;\n  capabilities: {\n    liveRegions: boolean;\n    ariaDescriptions: boolean;\n    roleSupport: boolean;\n  };\n}\n\n/**\n * Content optimization options\n */\nexport interface ContentOptimization {\n  removeRedundancy: boolean;\n  addContextualInfo: boolean;\n  simplifyLanguage: boolean;\n  addLandmarkLabels: boolean;\n}\n\n/**\n * Screen Reader Utilities Class\n */\nexport class ScreenReaderUtilities {\n  private verbosity: ScreenReaderVerbosity;\n  private context: ScreenReaderContext;\n  private liveRegions: Map<string, HTMLElement> = new Map();\n  private announcementTimer: number | null = null;\n  private observer: MutationObserver | null = null;\n\n  constructor(verbosity: ScreenReaderVerbosity = 'moderate') {\n    this.verbosity = verbosity;\n    this.context = {\n      navigationHistory: [],\n      announcementQueue: [],\n    };\n  }\n\n  /**\n   * Initialize screen reader utilities\n   */\n  initialize(): void {\n    this.createLiveRegions();\n    this.setupDOMObserver();\n    this.detectScreenReader();\n    this.setupNavigationTracking();\n  }\n\n  /**\n   * Make an announcement to screen readers\n   */\n  announce(message: string, priority: LiveRegionPoliteness = 'polite', delay = 0): void {\n    const config: AnnouncementConfig = {\n      message: message.trim(),\n      priority,\n      delay,\n    };\n\n    // Skip empty or duplicate announcements\n    if (!config.message || config.message === this.context.lastAnnouncement) {\n      return;\n    }\n\n    this.context.announcementQueue.push(config);\n    this.processAnnouncementQueue();\n  }\n\n  /**\n   * Announce page changes\n   */\n  announcePageChange(pageTitle: string, routeInfo?: string): void {\n    const message = routeInfo \n      ? `Navigated to ${pageTitle}. ${routeInfo}`\n      : `Page changed to ${pageTitle}`;\n    \n    this.announce(message, 'assertive', 500);\n  }\n\n  /**\n   * Announce form errors\n   */\n  announceFormErrors(errors: string[] | Record<string, string>): void {\n    let message: string;\n\n    if (Array.isArray(errors)) {\n      message = `Form has ${errors.length} error${errors.length > 1 ? 's' : ''}: ${errors.join(', ')}`;\n    } else {\n      const errorList = Object.values(errors);\n      message = `Form has ${errorList.length} error${errorList.length > 1 ? 's' : ''}: ${errorList.join(', ')}`;\n    }\n\n    this.announce(message, 'assertive');\n  }\n\n  /**\n   * Announce loading states\n   */\n  announceLoading(message = 'Loading', isComplete = false): void {\n    if (isComplete) {\n      this.announce('Loading complete', 'polite');\n    } else {\n      this.announce(message, 'polite');\n    }\n  }\n\n  /**\n   * Announce focus changes with context\n   */\n  announceFocusChange(element: HTMLElement): void {\n    if (this.verbosity === 'minimal') return;\n\n    const announcement = this.generateFocusAnnouncement(element);\n    if (announcement) {\n      this.announce(announcement, 'polite', 100);\n    }\n\n    // Update context\n    this.context.currentElement = element;\n    this.context.navigationHistory.unshift(element);\n    \n    // Limit history size\n    if (this.context.navigationHistory.length > 10) {\n      this.context.navigationHistory.pop();\n    }\n  }\n\n  /**\n   * Announce data table information\n   */\n  announceTableNavigation(cell: HTMLElement, table: HTMLElement): void {\n    const row = cell.closest('tr');\n    const rowIndex = row ? Array.from(table.querySelectorAll('tr')).indexOf(row) : -1;\n    const cellIndex = Array.from(row?.children || []).indexOf(cell);\n    \n    const headers = this.getTableHeaders(cell, table);\n    const cellContent = cell.textContent?.trim() || 'Empty cell';\n    \n    let announcement = `Row ${rowIndex + 1}, Column ${cellIndex + 1}`;\n    \n    if (headers.length > 0) {\n      announcement += `, ${headers.join(', ')}`;\n    }\n    \n    announcement += `: ${cellContent}`;\n    \n    this.announce(announcement, 'polite');\n  }\n\n  /**\n   * Announce list navigation\n   */\n  announceListNavigation(item: HTMLElement, list: HTMLElement): void {\n    const items = list.querySelectorAll('li, [role=\"listitem\"]');\n    const itemIndex = Array.from(items).indexOf(item);\n    const totalItems = items.length;\n    \n    const itemText = item.textContent?.trim() || 'Empty item';\n    const announcement = `List item ${itemIndex + 1} of ${totalItems}: ${itemText}`;\n    \n    this.announce(announcement, 'polite');\n  }\n\n  /**\n   * Announce menu navigation\n   */\n  announceMenuNavigation(menuitem: HTMLElement): void {\n    const menu = menuitem.closest('[role=\"menu\"], [role=\"menubar\"]');\n    if (!menu) return;\n\n    const items = menu.querySelectorAll('[role=\"menuitem\"], [role=\"menuitemcheckbox\"], [role=\"menuitemradio\"]');\n    const itemIndex = Array.from(items).indexOf(menuitem);\n    const totalItems = items.length;\n    \n    const itemText = menuitem.textContent?.trim() || 'Menu item';\n    let announcement = `Menu item ${itemIndex + 1} of ${totalItems}: ${itemText}`;\n    \n    // Add state information\n    const expanded = menuitem.getAttribute('aria-expanded');\n    const checked = menuitem.getAttribute('aria-checked');\n    \n    if (expanded === 'true') {\n      announcement += ', expanded';\n    } else if (expanded === 'false') {\n      announcement += ', collapsed';\n    }\n    \n    if (checked === 'true') {\n      announcement += ', checked';\n    } else if (checked === 'false') {\n      announcement += ', unchecked';\n    }\n    \n    this.announce(announcement, 'polite');\n  }\n\n  /**\n   * Create optimized content for screen readers\n   */\n  optimizeContent(element: HTMLElement, options: Partial<ContentOptimization> = {}): void {\n    const config: ContentOptimization = {\n      removeRedundancy: true,\n      addContextualInfo: true,\n      simplifyLanguage: false,\n      addLandmarkLabels: true,\n      ...options,\n    };\n\n    if (config.removeRedundancy) {\n      this.removeRedundantContent(element);\n    }\n\n    if (config.addContextualInfo) {\n      this.addContextualInformation(element);\n    }\n\n    if (config.addLandmarkLabels) {\n      this.addLandmarkLabels(element);\n    }\n  }\n\n  /**\n   * Create screen reader only content\n   */\n  createSROnlyContent(text: string, insertBefore?: HTMLElement): HTMLElement {\n    const srElement = document.createElement('span');\n    srElement.textContent = text;\n    srElement.className = 'sr-only';\n    srElement.setAttribute('data-sr-only', 'true');\n\n    if (insertBefore && insertBefore.parentNode) {\n      insertBefore.parentNode.insertBefore(srElement, insertBefore);\n    }\n\n    return srElement;\n  }\n\n  /**\n   * Generate table summary\n   */\n  generateTableSummary(table: HTMLElement): string {\n    const rows = table.querySelectorAll('tr');\n    const headers = table.querySelectorAll('th');\n    const dataRows = table.querySelectorAll('tbody tr, tr:not(:first-child)');\n    \n    let summary = `Table with ${headers.length} columns and ${dataRows.length} data rows`;\n    \n    // Add caption if present\n    const caption = table.querySelector('caption');\n    if (caption) {\n      summary += `. Caption: ${caption.textContent?.trim()}`;\n    }\n    \n    // Add header information\n    if (headers.length > 0) {\n      const headerTexts = Array.from(headers).map(h => h.textContent?.trim()).filter(Boolean);\n      summary += `. Columns: ${headerTexts.join(', ')}`;\n    }\n    \n    return summary;\n  }\n\n  /**\n   * Generate form summary\n   */\n  generateFormSummary(form: HTMLElement): string {\n    const inputs = form.querySelectorAll('input:not([type=\"hidden\"]), select, textarea');\n    const required = form.querySelectorAll('[required], [aria-required=\"true\"]');\n    \n    let summary = `Form with ${inputs.length} field${inputs.length !== 1 ? 's' : ''}`;\n    \n    if (required.length > 0) {\n      summary += `, ${required.length} required`;\n    }\n    \n    return summary;\n  }\n\n  /**\n   * Detect screen reader\n   */\n  private detectScreenReader(): ScreenReaderInfo {\n    const info: ScreenReaderInfo = {\n      detected: false,\n      capabilities: {\n        liveRegions: true,\n        ariaDescriptions: true,\n        roleSupport: true,\n      },\n    };\n\n    // Check user agent for screen reader indicators\n    const userAgent = navigator.userAgent.toLowerCase();\n    \n    // Check for common screen reader indicators in user agent\n    if (userAgent.includes('nvda') || userAgent.includes('jaws') || userAgent.includes('dragon')) {\n      info.detected = true;\n    }\n\n    // Check for Windows High Contrast mode (often used with screen readers)\n    if (window.matchMedia('(-ms-high-contrast: active)').matches) {\n      info.detected = true;\n    }\n\n    // Check for reduced motion preference (common accessibility setting)\n    if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {\n      info.detected = true;\n    }\n\n    // Test for live region support\n    try {\n      const testElement = document.createElement('div');\n      testElement.setAttribute('aria-live', 'polite');\n      document.body.appendChild(testElement);\n      document.body.removeChild(testElement);\n    } catch {\n      info.capabilities.liveRegions = false;\n    }\n\n    return info;\n  }\n\n  /**\n   * Create live regions for announcements\n   */\n  private createLiveRegions(): void {\n    // Create polite live region\n    const politeRegion = document.createElement('div');\n    politeRegion.setAttribute('aria-live', 'polite');\n    politeRegion.setAttribute('aria-atomic', 'true');\n    politeRegion.className = 'sr-only';\n    politeRegion.id = 'polite-announcer';\n    document.body.appendChild(politeRegion);\n    this.liveRegions.set('polite', politeRegion);\n\n    // Create assertive live region\n    const assertiveRegion = document.createElement('div');\n    assertiveRegion.setAttribute('aria-live', 'assertive');\n    assertiveRegion.setAttribute('aria-atomic', 'true');\n    assertiveRegion.className = 'sr-only';\n    assertiveRegion.id = 'assertive-announcer';\n    document.body.appendChild(assertiveRegion);\n    this.liveRegions.set('assertive', assertiveRegion);\n\n    // Create status region\n    const statusRegion = document.createElement('div');\n    statusRegion.setAttribute('role', 'status');\n    statusRegion.setAttribute('aria-live', 'polite');\n    statusRegion.className = 'sr-only';\n    statusRegion.id = 'status-announcer';\n    document.body.appendChild(statusRegion);\n    this.liveRegions.set('status', statusRegion);\n  }\n\n  /**\n   * Process announcement queue\n   */\n  private processAnnouncementQueue(): void {\n    if (this.announcementTimer) return;\n\n    const processNext = () => {\n      const config = this.context.announcementQueue.shift();\n      if (!config) {\n        this.announcementTimer = null;\n        return;\n      }\n\n      const region = this.liveRegions.get(config.priority);\n      if (region) {\n        // Clear previous content\n        region.textContent = '';\n        \n        // Small delay to ensure screen reader notices the change\n        setTimeout(() => {\n          region.textContent = config.message;\n          this.context.lastAnnouncement = config.message;\n        }, 50);\n      }\n\n      // Schedule next announcement\n      this.announcementTimer = window.setTimeout(() => {\n        this.announcementTimer = null;\n        if (this.context.announcementQueue.length > 0) {\n          processNext();\n        }\n      }, config.delay || 1000);\n    };\n\n    processNext();\n  }\n\n  /**\n   * Generate focus announcement\n   */\n  private generateFocusAnnouncement(element: HTMLElement): string | null {\n    const role = element.getAttribute('role') || element.tagName.toLowerCase();\n    const label = this.getAccessibleName(element);\n    const description = element.getAttribute('aria-describedby') \n      ? this.getDescriptionText(element) \n      : null;\n\n    let announcement = '';\n\n    // Add element type\n    switch (role) {\n      case 'button':\n        announcement = 'Button';\n        break;\n      case 'link':\n      case 'a':\n        announcement = 'Link';\n        break;\n      case 'textbox':\n      case 'input':\n        announcement = this.getInputTypeAnnouncement(element as HTMLInputElement);\n        break;\n      case 'checkbox':\n        const checked = element.getAttribute('aria-checked') === 'true';\n        announcement = `Checkbox, ${checked ? 'checked' : 'not checked'}`;\n        break;\n      case 'radio':\n        const selected = element.getAttribute('aria-checked') === 'true';\n        announcement = `Radio button, ${selected ? 'selected' : 'not selected'}`;\n        break;\n      default:\n        announcement = role;\n    }\n\n    // Add label\n    if (label) {\n      announcement += `, ${label}`;\n    }\n\n    // Add state information\n    const expanded = element.getAttribute('aria-expanded');\n    if (expanded === 'true') {\n      announcement += ', expanded';\n    } else if (expanded === 'false') {\n      announcement += ', collapsed';\n    }\n\n    const disabled = element.getAttribute('aria-disabled') === 'true' || \n                    (element as HTMLInputElement).disabled;\n    if (disabled) {\n      announcement += ', disabled';\n    }\n\n    // Add description\n    if (description) {\n      announcement += `. ${description}`;\n    }\n\n    return announcement || null;\n  }\n\n  /**\n   * Get accessible name for element\n   */\n  private getAccessibleName(element: HTMLElement): string {\n    // Check aria-label\n    const ariaLabel = element.getAttribute('aria-label');\n    if (ariaLabel) return ariaLabel;\n\n    // Check aria-labelledby\n    const labelledBy = element.getAttribute('aria-labelledby');\n    if (labelledBy) {\n      const labelElements = labelledBy.split(' ')\n        .map(id => document.getElementById(id))\n        .filter(Boolean);\n      \n      if (labelElements.length > 0) {\n        return labelElements.map(el => el!.textContent?.trim()).join(' ');\n      }\n    }\n\n    // Check associated label\n    if (element.id) {\n      const label = document.querySelector(`label[for=\"${element.id}\"]`);\n      if (label) return label.textContent?.trim() || '';\n    }\n\n    // Use text content for buttons and links\n    if (['button', 'a'].includes(element.tagName.toLowerCase())) {\n      return element.textContent?.trim() || '';\n    }\n\n    // Use placeholder for inputs\n    if (element.tagName === 'INPUT') {\n      const placeholder = (element as HTMLInputElement).placeholder;\n      if (placeholder) return placeholder;\n    }\n\n    return '';\n  }\n\n  /**\n   * Get description text\n   */\n  private getDescriptionText(element: HTMLElement): string {\n    const describedBy = element.getAttribute('aria-describedby');\n    if (!describedBy) return '';\n\n    const descElements = describedBy.split(' ')\n      .map(id => document.getElementById(id))\n      .filter(Boolean);\n\n    return descElements.map(el => el!.textContent?.trim()).join(' ');\n  }\n\n  /**\n   * Get input type announcement\n   */\n  private getInputTypeAnnouncement(input: HTMLInputElement): string {\n    const type = input.type.toLowerCase();\n    \n    switch (type) {\n      case 'email':\n        return 'Email field';\n      case 'password':\n        return 'Password field';\n      case 'search':\n        return 'Search field';\n      case 'tel':\n        return 'Telephone field';\n      case 'url':\n        return 'URL field';\n      case 'number':\n        return 'Number field';\n      case 'date':\n        return 'Date field';\n      case 'time':\n        return 'Time field';\n      default:\n        return 'Text field';\n    }\n  }\n\n  /**\n   * Get table headers for cell\n   */\n  private getTableHeaders(cell: HTMLElement, table: HTMLElement): string[] {\n    const headers: string[] = [];\n    const row = cell.closest('tr');\n    if (!row) return headers;\n\n    const cellIndex = Array.from(row.children).indexOf(cell);\n    \n    // Get column header\n    const thead = table.querySelector('thead');\n    if (thead) {\n      const headerRow = thead.querySelector('tr');\n      if (headerRow) {\n        const headerCell = headerRow.children[cellIndex] as HTMLElement;\n        if (headerCell) {\n          headers.push(headerCell.textContent?.trim() || '');\n        }\n      }\n    }\n\n    // Get row header\n    const rowHeader = row.querySelector('th');\n    if (rowHeader && rowHeader !== cell) {\n      headers.push(rowHeader.textContent?.trim() || '');\n    }\n\n    return headers.filter(Boolean);\n  }\n\n  /**\n   * Setup DOM observer for dynamic content\n   */\n  private setupDOMObserver(): void {\n    this.observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (mutation.type === 'childList') {\n          mutation.addedNodes.forEach((node) => {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n              const element = node as HTMLElement;\n              this.processNewElement(element);\n            }\n          });\n        } else if (mutation.type === 'attributes') {\n          const element = mutation.target as HTMLElement;\n          this.processAttributeChange(element, mutation.attributeName);\n        }\n      });\n    });\n\n    this.observer.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      attributeFilter: ['aria-expanded', 'aria-selected', 'aria-checked'],\n    });\n  }\n\n  /**\n   * Process new element added to DOM\n   */\n  private processNewElement(element: HTMLElement): void {\n    // Announce new modal dialogs\n    if (element.getAttribute('role') === 'dialog' || element.matches('[role=\"dialog\"]')) {\n      const title = this.getAccessibleName(element) || 'Dialog opened';\n      this.announce(title, 'assertive', 100);\n    }\n\n    // Announce new alerts\n    if (element.getAttribute('role') === 'alert') {\n      const message = element.textContent?.trim() || 'Alert';\n      this.announce(message, 'assertive');\n    }\n  }\n\n  /**\n   * Process attribute changes\n   */\n  private processAttributeChange(element: HTMLElement, attributeName: string | null): void {\n    if (!attributeName) return;\n\n    switch (attributeName) {\n      case 'aria-expanded':\n        const expanded = element.getAttribute('aria-expanded') === 'true';\n        const label = this.getAccessibleName(element);\n        this.announce(`${label} ${expanded ? 'expanded' : 'collapsed'}`, 'polite');\n        break;\n\n      case 'aria-selected':\n        const selected = element.getAttribute('aria-selected') === 'true';\n        if (selected) {\n          const itemLabel = this.getAccessibleName(element);\n          this.announce(`${itemLabel} selected`, 'polite');\n        }\n        break;\n\n      case 'aria-checked':\n        const checked = element.getAttribute('aria-checked') === 'true';\n        const checkboxLabel = this.getAccessibleName(element);\n        this.announce(`${checkboxLabel} ${checked ? 'checked' : 'unchecked'}`, 'polite');\n        break;\n    }\n  }\n\n  /**\n   * Setup navigation tracking\n   */\n  private setupNavigationTracking(): void {\n    // Track page navigation\n    window.addEventListener('popstate', () => {\n      this.announcePageChange(document.title, 'Back button used');\n    });\n\n    // Track hash changes\n    window.addEventListener('hashchange', () => {\n      const hash = window.location.hash;\n      if (hash) {\n        const target = document.querySelector(hash);\n        if (target) {\n          const label = this.getAccessibleName(target as HTMLElement) || hash;\n          this.announce(`Navigated to ${label}`, 'polite');\n        }\n      }\n    });\n  }\n\n  /**\n   * Remove redundant content\n   */\n  private removeRedundantContent(element: HTMLElement): void {\n    // Remove duplicate alt text and labels\n    const images = element.querySelectorAll('img[alt]');\n    images.forEach(img => {\n      const altText = img.getAttribute('alt') || '';\n      const adjacentText = img.nextSibling?.textContent?.trim() || '';\n      \n      if (altText && adjacentText && altText.includes(adjacentText)) {\n        // Hide redundant text from screen readers\n        if (img.nextSibling?.nodeType === Node.TEXT_NODE) {\n          const span = document.createElement('span');\n          span.setAttribute('aria-hidden', 'true');\n          span.textContent = adjacentText;\n          img.parentNode?.replaceChild(span, img.nextSibling);\n        }\n      }\n    });\n  }\n\n  /**\n   * Add contextual information\n   */\n  private addContextualInformation(element: HTMLElement): void {\n    // Add table summaries\n    const tables = element.querySelectorAll('table:not([aria-label]):not([aria-labelledby])');\n    tables.forEach(table => {\n      const summary = this.generateTableSummary(table as HTMLElement);\n      table.setAttribute('aria-label', summary);\n    });\n\n    // Add form summaries\n    const forms = element.querySelectorAll('form:not([aria-label]):not([aria-labelledby])');\n    forms.forEach(form => {\n      const summary = this.generateFormSummary(form as HTMLElement);\n      form.setAttribute('aria-label', summary);\n    });\n  }\n\n  /**\n   * Add landmark labels\n   */\n  private addLandmarkLabels(element: HTMLElement): void {\n    // Add navigation labels\n    const navs = element.querySelectorAll('nav:not([aria-label]):not([aria-labelledby])');\n    navs.forEach((nav, index) => {\n      const label = `Navigation ${index > 0 ? index + 1 : ''}`.trim();\n      nav.setAttribute('aria-label', label);\n    });\n\n    // Add section labels\n    const sections = element.querySelectorAll('section:not([aria-label]):not([aria-labelledby])');\n    sections.forEach(section => {\n      const heading = section.querySelector('h1, h2, h3, h4, h5, h6');\n      if (heading) {\n        const headingId = heading.id || `heading-${Math.random().toString(36).substr(2, 9)}`;\n        if (!heading.id) heading.id = headingId;\n        section.setAttribute('aria-labelledby', headingId);\n      }\n    });\n  }\n\n  /**\n   * Clear all announcements\n   */\n  clearAnnouncements(): void {\n    this.context.announcementQueue = [];\n    this.liveRegions.forEach(region => {\n      region.textContent = '';\n    });\n  }\n\n  /**\n   * Set verbosity level\n   */\n  setVerbosity(level: ScreenReaderVerbosity): void {\n    this.verbosity = level;\n  }\n\n  /**\n   * Get current context\n   */\n  getContext(): ScreenReaderContext {\n    return { ...this.context };\n  }\n\n  /**\n   * Cleanup screen reader utilities\n   */\n  destroy(): void {\n    // Clear timers\n    if (this.announcementTimer) {\n      clearTimeout(this.announcementTimer);\n    }\n\n    // Stop DOM observer\n    if (this.observer) {\n      this.observer.disconnect();\n    }\n\n    // Remove live regions\n    this.liveRegions.forEach(region => {\n      if (region.parentNode) {\n        region.parentNode.removeChild(region);\n      }\n    });\n    this.liveRegions.clear();\n\n    // Clear context\n    this.context.announcementQueue = [];\n    this.context.navigationHistory = [];\n  }\n}","/**\n * Accessibility Hooks\n * \n * Custom React hooks for managing accessibility features and WCAG compliance\n */\n\n'use client';\n\nimport React from 'react';\nimport {\n  AccessibilityManager,\n  getAccessibilityManager,\n  initializeAccessibility,\n  AccessibilityConfig,\n} from '@/lib/accessibility';\nimport { FocusManager, KeyboardNavigationManager } from '@/lib/accessibility/keyboard';\nimport { ColorContrastValidator, ContrastIssue } from '@/lib/accessibility/contrast';\nimport { ScreenReaderUtilities } from '@/lib/accessibility/screen-reader';\n\n/**\n * Accessibility preferences interface\n */\nexport interface AccessibilityPreferences {\n  reduceMotion: boolean;\n  highContrast: boolean;\n  focusRings: boolean;\n  screenReaderLevel: 'minimal' | 'moderate' | 'verbose';\n  keyboardMode: 'standard' | 'enhanced';\n  contrastLevel: 'AA' | 'AAA';\n  fontSize: 'small' | 'medium' | 'large' | 'extra-large';\n  colorScheme: 'light' | 'dark' | 'auto';\n}\n\n/**\n * Media query preferences\n */\nexport interface MediaPreferences {\n  prefersReducedMotion: boolean;\n  prefersHighContrast: boolean;\n  prefersDarkMode: boolean;\n  prefersLargeText: boolean;\n}\n\n/**\n * Main accessibility hook\n */\nexport const useAccessibility = (config?: AccessibilityConfig) => {\n  const [manager, setManager] = React.useState<AccessibilityManager | null>(null);\n  const [isInitialized, setIsInitialized] = React.useState(false);\n\n  // Initialize accessibility manager\n  React.useEffect(() => {\n    const accessibilityManager = initializeAccessibility(config);\n    setManager(accessibilityManager);\n    setIsInitialized(true);\n\n    return () => {\n      accessibilityManager.destroy();\n    };\n  }, [config]);\n\n  // Get manager instances\n  const managers = React.useMemo(() => {\n    if (!manager) return null;\n    return manager.getManagers();\n  }, [manager]);\n\n  return {\n    manager,\n    managers,\n    isInitialized,\n    config: manager?.getConfig(),\n    updateConfig: (newConfig: Partial<AccessibilityConfig>) => {\n      manager?.updateConfig(newConfig);\n    },\n  };\n};\n\n/**\n * Hook for managing accessibility preferences\n */\nexport const useAccessibilityPreferences = () => {\n  const [preferences, setPreferences] = React.useState<AccessibilityPreferences>(() => {\n    if (typeof window === 'undefined') {\n      return {\n        reduceMotion: false,\n        highContrast: false,\n        focusRings: true,\n        screenReaderLevel: 'moderate',\n        keyboardMode: 'standard',\n        contrastLevel: 'AA',\n        fontSize: 'medium',\n        colorScheme: 'auto',\n      };\n    }\n\n    // Load from localStorage or use defaults\n    const stored = localStorage.getItem('accessibility-preferences');\n    if (stored) {\n      try {\n        return { ...JSON.parse(stored) };\n      } catch {\n        // Fall through to defaults\n      }\n    }\n\n    // Detect system preferences\n    return {\n      reduceMotion: window.matchMedia('(prefers-reduced-motion: reduce)').matches,\n      highContrast: window.matchMedia('(prefers-contrast: high)').matches,\n      focusRings: true,\n      screenReaderLevel: 'moderate',\n      keyboardMode: 'standard',\n      contrastLevel: 'AA',\n      fontSize: 'medium',\n      colorScheme: window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light',\n    };\n  });\n\n  // Update preference\n  const updatePreference = React.useCallback(<K extends keyof AccessibilityPreferences>(\n    key: K,\n    value: AccessibilityPreferences[K]\n  ) => {\n    setPreferences(prev => {\n      const updated = { ...prev, [key]: value };\n      \n      // Save to localStorage\n      if (typeof window !== 'undefined') {\n        localStorage.setItem('accessibility-preferences', JSON.stringify(updated));\n      }\n      \n      return updated;\n    });\n  }, []);\n\n  // Update multiple preferences\n  const updatePreferences = React.useCallback((updates: Partial<AccessibilityPreferences>) => {\n    setPreferences(prev => {\n      const updated = { ...prev, ...updates };\n      \n      // Save to localStorage\n      if (typeof window !== 'undefined') {\n        localStorage.setItem('accessibility-preferences', JSON.stringify(updated));\n      }\n      \n      return updated;\n    });\n  }, []);\n\n  // Reset to defaults\n  const resetPreferences = React.useCallback(() => {\n    const defaults: AccessibilityPreferences = {\n      reduceMotion: false,\n      highContrast: false,\n      focusRings: true,\n      screenReaderLevel: 'moderate',\n      keyboardMode: 'standard',\n      contrastLevel: 'AA',\n      fontSize: 'medium',\n      colorScheme: 'auto',\n    };\n    \n    setPreferences(defaults);\n    \n    if (typeof window !== 'undefined') {\n      localStorage.removeItem('accessibility-preferences');\n    }\n  }, []);\n\n  return {\n    preferences,\n    updatePreference,\n    updatePreferences,\n    resetPreferences,\n  };\n};\n\n/**\n * Hook for detecting media query preferences\n */\nexport const useMediaPreferences = () => {\n  const [preferences, setPreferences] = React.useState<MediaPreferences>(() => {\n    if (typeof window === 'undefined') {\n      return {\n        prefersReducedMotion: false,\n        prefersHighContrast: false,\n        prefersDarkMode: false,\n        prefersLargeText: false,\n      };\n    }\n\n    return {\n      prefersReducedMotion: window.matchMedia('(prefers-reduced-motion: reduce)').matches,\n      prefersHighContrast: window.matchMedia('(prefers-contrast: high)').matches,\n      prefersDarkMode: window.matchMedia('(prefers-color-scheme: dark)').matches,\n      prefersLargeText: window.matchMedia('(min-resolution: 120dpi)').matches, // Approximate\n    };\n  });\n\n  React.useEffect(() => {\n    if (typeof window === 'undefined') return;\n\n    const queries = {\n      prefersReducedMotion: window.matchMedia('(prefers-reduced-motion: reduce)'),\n      prefersHighContrast: window.matchMedia('(prefers-contrast: high)'),\n      prefersDarkMode: window.matchMedia('(prefers-color-scheme: dark)'),\n      prefersLargeText: window.matchMedia('(min-resolution: 120dpi)'),\n    };\n\n    const updatePreferences = () => {\n      setPreferences({\n        prefersReducedMotion: queries.prefersReducedMotion.matches,\n        prefersHighContrast: queries.prefersHighContrast.matches,\n        prefersDarkMode: queries.prefersDarkMode.matches,\n        prefersLargeText: queries.prefersLargeText.matches,\n      });\n    };\n\n    // Add listeners\n    Object.values(queries).forEach(query => {\n      query.addListener(updatePreferences);\n    });\n\n    return () => {\n      // Remove listeners\n      Object.values(queries).forEach(query => {\n        query.removeListener(updatePreferences);\n      });\n    };\n  }, []);\n\n  return preferences;\n};\n\n/**\n * Hook for focus management\n */\nexport const useFocusManagement = () => {\n  const [focusManager] = React.useState(() => new FocusManager());\n\n  return {\n    saveFocus: focusManager.saveFocus.bind(focusManager),\n    restoreFocus: focusManager.restoreFocus.bind(focusManager),\n    focusFirst: focusManager.focusFirst.bind(focusManager),\n    focusLast: focusManager.focusLast.bind(focusManager),\n    focusNext: focusManager.focusNext.bind(focusManager),\n    focusPrevious: focusManager.focusPrevious.bind(focusManager),\n    getFocusableElements: focusManager.getFocusableElements.bind(focusManager),\n    isElementFocusable: focusManager.isElementFocusable.bind(focusManager),\n    getHistory: focusManager.getHistory.bind(focusManager),\n    clearHistory: focusManager.clearHistory.bind(focusManager),\n  };\n};\n\n/**\n * Hook for focus trap functionality\n */\nexport const useFocusTrap = (containerRef: React.RefObject<HTMLElement>) => {\n  const [keyboardManager] = React.useState(() => new KeyboardNavigationManager());\n  const [isActive, setIsActive] = React.useState(false);\n  const cleanupRef = React.useRef<(() => void) | null>(null);\n\n  const activate = React.useCallback(() => {\n    if (!containerRef.current || isActive) return false;\n\n    try {\n      const cleanup = keyboardManager.trapFocus(containerRef.current);\n      cleanupRef.current = cleanup;\n      setIsActive(true);\n      return true;\n    } catch (error) {\n      console.error('Failed to activate focus trap:', error);\n      return false;\n    }\n  }, [containerRef, keyboardManager, isActive]);\n\n  const deactivate = React.useCallback(() => {\n    if (!isActive) return;\n\n    if (cleanupRef.current) {\n      cleanupRef.current();\n      cleanupRef.current = null;\n    }\n    setIsActive(false);\n  }, [isActive]);\n\n  // Cleanup on unmount\n  React.useEffect(() => {\n    return () => {\n      if (cleanupRef.current) {\n        cleanupRef.current();\n      }\n    };\n  }, []);\n\n  return {\n    activate,\n    deactivate,\n    isActive,\n  };\n};\n\n/**\n * Hook for color contrast validation\n */\nexport const useColorContrast = (level: 'AA' | 'AAA' = 'AA') => {\n  const [validator] = React.useState(() => new ColorContrastValidator(level));\n  const [issues, setIssues] = React.useState<ContrastIssue[]>([]);\n\n  const validateElement = React.useCallback(async (element: HTMLElement) => {\n    const result = await validator.validateElement(element);\n    return result;\n  }, [validator]);\n\n  const validateContainer = React.useCallback(async (container: HTMLElement = document.body) => {\n    const result = await validator.validateContainer(container);\n    setIssues(result);\n    return result;\n  }, [validator]);\n\n  const checkContrast = React.useCallback((foreground: string, background: string, textSize?: 'normal' | 'large') => {\n    return validator.checkContrast(foreground, background, textSize);\n  }, [validator]);\n\n  const calculateRatio = React.useCallback((color1: string, color2: string) => {\n    return validator.calculateContrastRatio(color1, color2);\n  }, [validator]);\n\n  const autoFix = React.useCallback(async (element: HTMLElement) => {\n    return validator.autoFixContrast(element);\n  }, [validator]);\n\n  return {\n    issues,\n    validateElement,\n    validateContainer,\n    checkContrast,\n    calculateRatio,\n    autoFix,\n    setLevel: validator.setComplianceLevel.bind(validator),\n  };\n};\n\n/**\n * Hook for screen reader utilities\n */\nexport const useScreenReader = (verbosity: 'minimal' | 'moderate' | 'verbose' = 'moderate') => {\n  const [screenReader] = React.useState(() => new ScreenReaderUtilities(verbosity));\n  const [isInitialized, setIsInitialized] = React.useState(false);\n\n  React.useEffect(() => {\n    screenReader.initialize();\n    setIsInitialized(true);\n\n    return () => {\n      screenReader.destroy();\n    };\n  }, [screenReader]);\n\n  return {\n    isInitialized,\n    announce: screenReader.announce.bind(screenReader),\n    announcePageChange: screenReader.announcePageChange.bind(screenReader),\n    announceFormErrors: screenReader.announceFormErrors.bind(screenReader),\n    announceLoading: screenReader.announceLoading.bind(screenReader),\n    announceFocusChange: screenReader.announceFocusChange.bind(screenReader),\n    announceTableNavigation: screenReader.announceTableNavigation.bind(screenReader),\n    announceListNavigation: screenReader.announceListNavigation.bind(screenReader),\n    announceMenuNavigation: screenReader.announceMenuNavigation.bind(screenReader),\n    optimizeContent: screenReader.optimizeContent.bind(screenReader),\n    createSROnlyContent: screenReader.createSROnlyContent.bind(screenReader),\n    generateTableSummary: screenReader.generateTableSummary.bind(screenReader),\n    generateFormSummary: screenReader.generateFormSummary.bind(screenReader),\n    setVerbosity: screenReader.setVerbosity.bind(screenReader),\n  };\n};\n\n/**\n * Hook for keyboard navigation\n */\nexport const useKeyboardNavigation = () => {\n  const [keyboardManager] = React.useState(() => new KeyboardNavigationManager());\n  const [isInitialized, setIsInitialized] = React.useState(false);\n\n  React.useEffect(() => {\n    keyboardManager.initialize();\n    setIsInitialized(true);\n\n    return () => {\n      keyboardManager.destroy();\n    };\n  }, [keyboardManager]);\n\n  return {\n    isInitialized,\n    trapFocus: keyboardManager.trapFocus.bind(keyboardManager),\n    createRovingTabindex: keyboardManager.createRovingTabindex.bind(keyboardManager),\n    saveFocus: keyboardManager.saveFocus.bind(keyboardManager),\n    restoreFocus: keyboardManager.restoreFocus.bind(keyboardManager),\n    getFocusManager: keyboardManager.getFocusManager.bind(keyboardManager),\n    validateElement: keyboardManager.validateElement.bind(keyboardManager),\n  };\n};\n\n/**\n * Hook for accessibility testing\n */\nexport const useAccessibilityTest = () => {\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [results, setResults] = React.useState<any>(null);\n\n  const runAudit = React.useCallback(async (container?: HTMLElement) => {\n    if (typeof window === 'undefined') return;\n\n    setIsLoading(true);\n    \n    try {\n      // Use axe-core if available\n      if (typeof (window as any).axe !== 'undefined') {\n        const axe = (window as any).axe;\n        const results = await axe.run(container || document);\n        setResults(results);\n        return results;\n      } else {\n        // Fallback to our own testing\n        const manager = getAccessibilityManager();\n        const element = container || document.body;\n        const result = await manager.auditElement(element);\n        setResults(result);\n        return result;\n      }\n    } catch (error) {\n      console.error('Accessibility audit failed:', error);\n      setResults({ error: error.message });\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  return {\n    runAudit,\n    isLoading,\n    results,\n    clearResults: () => setResults(null),\n  };\n};\n\n/**\n * Hook for managing ARIA attributes\n */\nexport const useAriaAttributes = (elementRef: React.RefObject<HTMLElement>) => {\n  const setAttribute = React.useCallback((attribute: string, value: string | boolean | number) => {\n    if (!elementRef.current) return false;\n    \n    const manager = getAccessibilityManager();\n    return manager.getManagers().aria.setAttribute(elementRef.current, attribute, value);\n  }, [elementRef]);\n\n  const removeAttribute = React.useCallback((attribute: string) => {\n    if (!elementRef.current) return;\n    \n    const manager = getAccessibilityManager();\n    manager.getManagers().aria.removeAttribute(elementRef.current, attribute);\n  }, [elementRef]);\n\n  const setRole = React.useCallback((role: string) => {\n    if (!elementRef.current) return false;\n    \n    const manager = getAccessibilityManager();\n    return manager.getManagers().aria.setRole(elementRef.current, role);\n  }, [elementRef]);\n\n  const ensureId = React.useCallback((prefix = 'aria') => {\n    if (!elementRef.current) return '';\n    \n    const manager = getAccessibilityManager();\n    return manager.getManagers().aria.ensureId(elementRef.current, prefix);\n  }, [elementRef]);\n\n  const createLabel = React.useCallback((labelText: string, labelId?: string) => {\n    if (!elementRef.current) return null;\n    \n    const manager = getAccessibilityManager();\n    return manager.getManagers().aria.createLabel(elementRef.current, labelText, labelId);\n  }, [elementRef]);\n\n  const createDescription = React.useCallback((descriptionText: string, descriptionId?: string) => {\n    if (!elementRef.current) return null;\n    \n    const manager = getAccessibilityManager();\n    return manager.getManagers().aria.createDescription(elementRef.current, descriptionText, descriptionId);\n  }, [elementRef]);\n\n  return {\n    setAttribute,\n    removeAttribute,\n    setRole,\n    ensureId,\n    createLabel,\n    createDescription,\n  };\n};\n\n/**\n * Hook for live regions and announcements\n */\nexport const useLiveRegion = (regionType: 'polite' | 'assertive' | 'status' = 'polite') => {\n  const [regionElement, setRegionElement] = React.useState<HTMLElement | null>(null);\n\n  React.useEffect(() => {\n    // Create live region\n    const element = document.createElement('div');\n    \n    if (regionType === 'status') {\n      element.setAttribute('role', 'status');\n      element.setAttribute('aria-live', 'polite');\n    } else {\n      element.setAttribute('aria-live', regionType);\n    }\n    \n    element.setAttribute('aria-atomic', 'true');\n    element.className = 'sr-only';\n    \n    document.body.appendChild(element);\n    setRegionElement(element);\n\n    return () => {\n      if (element.parentNode) {\n        element.parentNode.removeChild(element);\n      }\n    };\n  }, [regionType]);\n\n  const announce = React.useCallback((message: string, clearAfter = 3000) => {\n    if (!regionElement || !message.trim()) return;\n\n    // Clear previous message\n    regionElement.textContent = '';\n\n    // Set new message after a brief delay (for better screen reader support)\n    setTimeout(() => {\n      regionElement.textContent = message;\n    }, 50);\n\n    // Clear after specified time\n    if (clearAfter > 0) {\n      setTimeout(() => {\n        regionElement.textContent = '';\n      }, clearAfter);\n    }\n  }, [regionElement]);\n\n  return { announce, regionElement };\n};\n\n/**\n * Hook for managing reduced motion preference\n */\nexport const useReducedMotion = () => {\n  const [prefersReducedMotion, setPrefersReducedMotion] = React.useState(() => {\n    if (typeof window === 'undefined') return false;\n    return window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n  });\n\n  React.useEffect(() => {\n    if (typeof window === 'undefined') return;\n\n    const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n    \n    const handleChange = (event: MediaQueryListEvent) => {\n      setPrefersReducedMotion(event.matches);\n    };\n\n    mediaQuery.addListener(handleChange);\n    \n    return () => {\n      mediaQuery.removeListener(handleChange);\n    };\n  }, []);\n\n  return {\n    prefersReducedMotion,\n    shouldAnimate: !prefersReducedMotion,\n  };\n};\n\n/**\n * Hook for managing high contrast preference\n */\nexport const useHighContrast = () => {\n  const [prefersHighContrast, setPrefersHighContrast] = React.useState(() => {\n    if (typeof window === 'undefined') return false;\n    return window.matchMedia('(prefers-contrast: high)').matches;\n  });\n\n  React.useEffect(() => {\n    if (typeof window === 'undefined') return;\n\n    const mediaQuery = window.matchMedia('(prefers-contrast: high)');\n    \n    const handleChange = (event: MediaQueryListEvent) => {\n      setPrefersHighContrast(event.matches);\n    };\n\n    mediaQuery.addListener(handleChange);\n    \n    return () => {\n      mediaQuery.removeListener(handleChange);\n    };\n  }, []);\n\n  return {\n    prefersHighContrast,\n  };\n};\n\n/**\n * Hook for element visibility (for lazy loading accessibility features)\n */\nexport const useElementVisibility = (elementRef: React.RefObject<HTMLElement>) => {\n  const [isVisible, setIsVisible] = React.useState(false);\n\n  React.useEffect(() => {\n    const element = elementRef.current;\n    if (!element) return;\n\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        setIsVisible(entry.isIntersecting);\n      },\n      { threshold: 0.1 }\n    );\n\n    observer.observe(element);\n\n    return () => {\n      observer.unobserve(element);\n    };\n  }, [elementRef]);\n\n  return isVisible;\n};"],"names":[],"mappings":"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"}