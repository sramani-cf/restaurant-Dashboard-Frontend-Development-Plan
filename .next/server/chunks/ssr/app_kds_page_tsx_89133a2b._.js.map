{"version":3,"sources":["turbopack:///[project]/app/kds/page.tsx","turbopack:///[project]/lib/kds/utils.ts","turbopack:///[project]/app/kds/data:bff965 <text/javascript>","turbopack:///[project]/app/kds/data:ac4462 <text/javascript>","turbopack:///[project]/app/kds/data:4ef469 <text/javascript>","turbopack:///[project]/app/kds/data:30ae4d <text/javascript>","turbopack:///[project]/components/kds/ticket.tsx","turbopack:///[project]/components/kds/timer.tsx","turbopack:///[project]/components/kds/station-view.tsx","turbopack:///[project]/lib/kds/stations.ts","turbopack:///[project]/components/kds/header.tsx","turbopack:///[project]/components/kds/all-day-view.tsx","turbopack:///[project]/components/kds/index.ts","turbopack:///[project]/lib/kds/data.ts"],"sourcesContent":["/**\n * Kitchen Display System (KDS) Main Page\n * \n * The main interface for the Kitchen Display System featuring:\n * - Real-time order ticket display\n * - Station-based views and filtering\n * - Touch-optimized controls for kitchen environment\n * - Auto-refreshing data with WebSocket support\n * - Keyboard shortcuts for non-touch operation\n */\n\n'use client'\n\nimport { useState, useEffect, useCallback } from 'react'\nimport { useRouter, useSearchParams } from 'next/navigation'\nimport {\n  KdsTicket,\n  KdsMetrics,\n  AllDayView,\n  StationViewConfig,\n  StationId,\n  TicketPriority,\n  KitchenStation\n} from '../../lib/kds/types'\nimport {\n  KdsHeader,\n  StationView,\n  MultiStationView,\n  AllDayViewComponent,\n  AlertBanner\n} from '../../components/kds'\nimport { \n  DEFAULT_STATIONS,\n  DEFAULT_STATION_VIEWS,\n  stationUtils \n} from '../../lib/kds/stations'\nimport kdsApi, { useKdsRealTime } from '../../lib/kds/data'\nimport { keyboardUtils, soundUtils, performanceUtils } from '../../lib/kds/utils'\n\nexport default function KdsPage() {\n  // Core state\n  const [tickets, setTickets] = useState<KdsTicket[]>([])\n  const [metrics, setMetrics] = useState<KdsMetrics | null>(null)\n  const [allDayView, setAllDayView] = useState<AllDayView | null>(null)\n  const [isLoading, setIsLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  \n  // View state\n  const [currentView, setCurrentView] = useState<string>('all-stations')\n  const [currentStation, setCurrentStation] = useState<StationId | null>(null)\n  const [showAllDay, setShowAllDay] = useState(false)\n  const [stationViews] = useState<StationViewConfig[]>(DEFAULT_STATION_VIEWS)\n  const [stations] = useState<Record<StationId, KitchenStation>>(DEFAULT_STATIONS)\n  \n  // UI state\n  const [alerts, setAlerts] = useState<Array<{\n    id: string\n    type: 'info' | 'warning' | 'error'\n    message: string\n    dismissible: boolean\n  }>>([])\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false)\n  const [lastRefresh, setLastRefresh] = useState<Date>(new Date())\n\n  const router = useRouter()\n  const searchParams = useSearchParams()\n  \n  // Initialize real-time connection\n  const { subscribe } = useKdsRealTime()\n\n  // Get current view configuration\n  const currentViewConfig = stationViews.find(v => v.id === currentView) || stationViews[0]\n  const activeStations = stationUtils.getActiveStations(stations)\n\n  /**\n   * Data fetching functions\n   */\n  const fetchData = useCallback(async () => {\n    try {\n      setError(null)\n      \n      // Fetch tickets for current view\n      const stationIds = currentViewConfig.stations\n      const fetchedTickets = await kdsApi.fetchTickets(stationIds)\n      setTickets(fetchedTickets)\n      \n      // Fetch metrics\n      const fetchedMetrics = await kdsApi.fetchMetrics()\n      setMetrics(fetchedMetrics)\n      \n      // Generate all day view if needed\n      if (showAllDay) {\n        const allDay = await kdsApi.generateAllDayView(stationIds)\n        setAllDayView(allDay)\n      }\n      \n      setLastRefresh(new Date())\n      \n      // Clear any connection error alerts\n      setAlerts(prev => prev.filter(alert => alert.id !== 'connection-error'))\n      \n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch data'\n      setError(errorMessage)\n      \n      // Add connection error alert\n      setAlerts(prev => [\n        ...prev.filter(alert => alert.id !== 'connection-error'),\n        {\n          id: 'connection-error',\n          type: 'error',\n          message: `Connection error: ${errorMessage}`,\n          dismissible: true\n        }\n      ])\n    } finally {\n      setIsLoading(false)\n    }\n  }, [currentViewConfig.stations, showAllDay])\n\n  // Debounced refresh function\n  const debouncedRefresh = useCallback(\n    performanceUtils.debounce(fetchData, 500),\n    [fetchData]\n  )\n\n  /**\n   * Ticket action handlers\n   */\n  const handleBumpTicket = useCallback(async (ticketId: string) => {\n    try {\n      await kdsApi.bumpTicket(ticketId)\n      soundUtils.playSound('bump', 0.3)\n      debouncedRefresh()\n    } catch (error) {\n      console.error('Failed to bump ticket:', error)\n    }\n  }, [debouncedRefresh])\n\n  const handleRecallTicket = useCallback(async (ticketId: string) => {\n    try {\n      await kdsApi.recallTicket(ticketId)\n      soundUtils.playSound('urgent', 0.3)\n      debouncedRefresh()\n    } catch (error) {\n      console.error('Failed to recall ticket:', error)\n    }\n  }, [debouncedRefresh])\n\n  const handleFireTicket = useCallback(async (ticketId: string) => {\n    try {\n      await kdsApi.fireTicket(ticketId)\n      soundUtils.playSound('urgent', 0.5)\n      debouncedRefresh()\n    } catch (error) {\n      console.error('Failed to fire ticket:', error)\n    }\n  }, [debouncedRefresh])\n\n  const handlePriorityChange = useCallback(async (ticketId: string, priority: TicketPriority) => {\n    try {\n      await kdsApi.changePriority(ticketId, priority)\n      debouncedRefresh()\n    } catch (error) {\n      console.error('Failed to change priority:', error)\n    }\n  }, [debouncedRefresh])\n\n  /**\n   * View and navigation handlers\n   */\n  const handleStationChange = useCallback((stationId: StationId) => {\n    setCurrentStation(stationId)\n    \n    // Find or create a view for this station\n    let viewForStation = stationViews.find(v => \n      v.stations.length === 1 && v.stations[0] === stationId\n    )\n    \n    if (viewForStation) {\n      setCurrentView(viewForStation.id)\n    } else {\n      setCurrentView('all-stations')\n    }\n  }, [stationViews])\n\n  const handleViewChange = useCallback((viewId: string) => {\n    setCurrentView(viewId)\n    \n    const view = stationViews.find(v => v.id === viewId)\n    if (view && view.stations.length === 1) {\n      setCurrentStation(view.stations[0])\n    } else {\n      setCurrentStation(null)\n    }\n  }, [stationViews])\n\n  const handleAllDayToggle = useCallback(() => {\n    setShowAllDay(prev => !prev)\n  }, [])\n\n  const handleSettingsOpen = useCallback(() => {\n    setIsSettingsOpen(true)\n  }, [])\n\n  const handleAlertDismiss = useCallback((alertId: string) => {\n    setAlerts(prev => prev.filter(alert => alert.id !== alertId))\n  }, [])\n\n  /**\n   * Keyboard shortcuts\n   */\n  const handleKeyPress = useCallback((event: KeyboardEvent) => {\n    const handled = keyboardUtils.handleKeyPress(event, {\n      'fire-order': () => {\n        // Fire the first urgent ticket or first ticket\n        const urgentTicket = tickets.find(t => t.urgency === 'urgent')\n        const targetTicket = urgentTicket || tickets[0]\n        if (targetTicket) {\n          handleFireTicket(targetTicket.id)\n        }\n      },\n      'all-day-view': handleAllDayToggle,\n      'help': () => {\n        // Show keyboard shortcuts\n        const hintsElement = document.getElementById('keyboard-hints')\n        if (hintsElement) {\n          hintsElement.style.opacity = '1'\n          setTimeout(() => {\n            hintsElement.style.opacity = '0'\n          }, 5000)\n        }\n      },\n      'switch-station': () => {\n        // Cycle through stations\n        const currentIndex = activeStations.findIndex(s => s.id === currentStation)\n        const nextIndex = (currentIndex + 1) % activeStations.length\n        handleStationChange(activeStations[nextIndex].id)\n      }\n    })\n\n    if (handled) {\n      event.preventDefault()\n    }\n  }, [tickets, currentStation, activeStations, handleFireTicket, handleAllDayToggle, handleStationChange])\n\n  /**\n   * Effects\n   */\n  \n  // Initial data load and URL params\n  useEffect(() => {\n    const viewFromUrl = searchParams.get('view')\n    const stationFromUrl = searchParams.get('station') as StationId\n    const allDayFromUrl = searchParams.get('allday') === 'true'\n    \n    if (viewFromUrl && stationViews.find(v => v.id === viewFromUrl)) {\n      setCurrentView(viewFromUrl)\n    }\n    \n    if (stationFromUrl && stations[stationFromUrl]) {\n      setCurrentStation(stationFromUrl)\n    }\n    \n    if (allDayFromUrl) {\n      setShowAllDay(true)\n    }\n    \n    fetchData()\n  }, [])\n\n  // Auto-refresh data every 5 seconds\n  useEffect(() => {\n    const interval = setInterval(fetchData, 5000)\n    return () => clearInterval(interval)\n  }, [fetchData])\n\n  // Real-time updates\n  useEffect(() => {\n    const unsubscribeNewOrder = subscribe('new_order', (data) => {\n      soundUtils.playSound('newOrder', 0.4)\n      setAlerts(prev => [\n        ...prev,\n        {\n          id: `new-order-${Date.now()}`,\n          type: 'info',\n          message: `New order received: ${data.orderNumber}`,\n          dismissible: true\n        }\n      ])\n      debouncedRefresh()\n    })\n\n    const unsubscribeTicketUpdate = subscribe('ticket_update', () => {\n      debouncedRefresh()\n    })\n\n    const unsubscribeSystemAlert = subscribe('system_alert', (data) => {\n      setAlerts(prev => [\n        ...prev,\n        {\n          id: `system-alert-${Date.now()}`,\n          type: data.type || 'warning',\n          message: data.message,\n          dismissible: true\n        }\n      ])\n    })\n\n    return () => {\n      unsubscribeNewOrder()\n      unsubscribeTicketUpdate()\n      unsubscribeSystemAlert()\n    }\n  }, [subscribe, debouncedRefresh])\n\n  // Keyboard event listener\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyPress)\n    return () => document.removeEventListener('keydown', handleKeyPress)\n  }, [handleKeyPress])\n\n  // Update URL when view changes\n  useEffect(() => {\n    const params = new URLSearchParams()\n    if (currentView !== 'all-stations') params.set('view', currentView)\n    if (currentStation) params.set('station', currentStation)\n    if (showAllDay) params.set('allday', 'true')\n    \n    const newUrl = `/kds${params.toString() ? `?${params.toString()}` : ''}`\n    router.replace(newUrl, { scroll: false })\n  }, [currentView, currentStation, showAllDay, router])\n\n  /**\n   * Loading and error states\n   */\n  if (isLoading && !tickets.length) {\n    return <div>Loading KDS...</div> // This will use the loading.tsx\n  }\n\n  if (error && !tickets.length) {\n    throw new Error(error) // This will trigger error.tsx\n  }\n\n  if (!metrics) {\n    return <div>Loading metrics...</div>\n  }\n\n  /**\n   * Render\n   */\n  return (\n    <div className=\"h-full flex flex-col bg-black text-white\">\n      {/* Alert Banner */}\n      {alerts.length > 0 && (\n        <AlertBanner\n          alerts={alerts}\n          onDismiss={handleAlertDismiss}\n          className=\"p-4\"\n        />\n      )}\n\n      {/* Header */}\n      <KdsHeader\n        currentStation={currentStation || undefined}\n        currentView={currentView}\n        stationViews={stationViews}\n        metrics={metrics}\n        stations={stations}\n        onStationChange={handleStationChange}\n        onViewChange={handleViewChange}\n        onSettingsOpen={handleSettingsOpen}\n        onAllDayToggle={handleAllDayToggle}\n        onRefresh={fetchData}\n      />\n\n      {/* Main Content */}\n      <div className=\"flex-1 overflow-hidden\">\n        {showAllDay ? (\n          /* All Day View */\n          allDayView ? (\n            <AllDayViewComponent\n              allDayView={allDayView}\n              stations={stations}\n              onRefresh={fetchData}\n            />\n          ) : (\n            <div className=\"flex items-center justify-center h-full\">\n              <div className=\"text-center\">\n                <div className=\"text-4xl mb-4\">📊</div>\n                <div className=\"text-xl font-bold mb-2\">Generating All Day View...</div>\n                <div className=\"text-gray-400\">This may take a moment</div>\n              </div>\n            </div>\n          )\n        ) : currentStation ? (\n          /* Single Station View */\n          <StationView\n            station={stations[currentStation]}\n            tickets={tickets.filter(t => t.station === currentStation)}\n            config={currentViewConfig}\n            onBump={handleBumpTicket}\n            onRecall={handleRecallTicket}\n            onFire={handleFireTicket}\n            onPriorityChange={handlePriorityChange}\n          />\n        ) : (\n          /* Multi-Station View */\n          <MultiStationView\n            stations={activeStations.filter(s => \n              currentViewConfig.stations.includes(s.id)\n            )}\n            tickets={tickets}\n            config={currentViewConfig}\n            onBump={handleBumpTicket}\n            onRecall={handleRecallTicket}\n            onFire={handleFireTicket}\n            onPriorityChange={handlePriorityChange}\n          />\n        )}\n      </div>\n\n      {/* Settings Modal */}\n      {isSettingsOpen && (\n        <KdsSettingsModal\n          onClose={() => setIsSettingsOpen(false)}\n          stations={stations}\n          stationViews={stationViews}\n        />\n      )}\n\n      {/* Emergency Actions */}\n      <EmergencyActions />\n    </div>\n  )\n}\n\n/**\n * Settings Modal Component\n */\nfunction KdsSettingsModal({\n  onClose,\n  stations,\n  stationViews\n}: {\n  onClose: () => void\n  stations: Record<StationId, KitchenStation>\n  stationViews: StationViewConfig[]\n}) {\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50\">\n      <div className=\"bg-gray-900 border border-gray-700 rounded-lg p-6 max-w-2xl w-full m-4 max-h-[80vh] overflow-y-auto\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-2xl font-bold text-white\">KDS Settings</h2>\n          <button\n            onClick={onClose}\n            className=\"kds-button bg-gray-800 hover:bg-gray-700 text-white px-4 py-2 rounded\"\n          >\n            ✕ Close\n          </button>\n        </div>\n\n        <div className=\"space-y-6\">\n          {/* Display Settings */}\n          <div>\n            <h3 className=\"text-lg font-bold text-white mb-3\">Display Settings</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <label className=\"flex items-center gap-2 text-gray-300\">\n                <input type=\"checkbox\" defaultChecked />\n                Show timer on tickets\n              </label>\n              <label className=\"flex items-center gap-2 text-gray-300\">\n                <input type=\"checkbox\" defaultChecked />\n                Show customer names\n              </label>\n              <label className=\"flex items-center gap-2 text-gray-300\">\n                <input type=\"checkbox\" defaultChecked />\n                Show table numbers\n              </label>\n              <label className=\"flex items-center gap-2 text-gray-300\">\n                <input type=\"checkbox\" defaultChecked />\n                Show allergen warnings\n              </label>\n            </div>\n          </div>\n\n          {/* Sound Settings */}\n          <div>\n            <h3 className=\"text-lg font-bold text-white mb-3\">Sound Alerts</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <label className=\"flex items-center gap-2 text-gray-300\">\n                <input type=\"checkbox\" defaultChecked />\n                New order alerts\n              </label>\n              <label className=\"flex items-center gap-2 text-gray-300\">\n                <input type=\"checkbox\" defaultChecked />\n                Urgent order alerts\n              </label>\n            </div>\n            <div className=\"mt-3\">\n              <label className=\"block text-gray-300 mb-2\">Volume</label>\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"100\"\n                defaultValue=\"50\"\n                className=\"w-full\"\n              />\n            </div>\n          </div>\n\n          {/* Station Configuration */}\n          <div>\n            <h3 className=\"text-lg font-bold text-white mb-3\">Stations</h3>\n            <div className=\"space-y-2\">\n              {Object.values(stations).map(station => (\n                <div key={station.id} className=\"flex items-center justify-between p-3 bg-gray-800 rounded\">\n                  <div className=\"flex items-center gap-3\">\n                    <div\n                      className=\"w-4 h-4 rounded\"\n                      style={{ backgroundColor: station.color }}\n                    />\n                    <span className=\"text-white\">{station.displayName}</span>\n                  </div>\n                  <label className=\"flex items-center gap-2\">\n                    <input\n                      type=\"checkbox\"\n                      defaultChecked={station.isActive}\n                    />\n                    <span className=\"text-gray-300\">Active</span>\n                  </label>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n/**\n * Emergency Actions Component\n */\nfunction EmergencyActions() {\n  const [showEmergency, setShowEmergency] = useState(false)\n\n  if (!showEmergency) {\n    return (\n      <button\n        onClick={() => setShowEmergency(true)}\n        className=\"fixed bottom-4 right-4 bg-red-600 hover:bg-red-500 text-white px-3 py-2 rounded text-xs\"\n      >\n        Emergency\n      </button>\n    )\n  }\n\n  return (\n    <div className=\"fixed bottom-4 right-4 bg-red-900 border-2 border-red-500 rounded-lg p-4 space-y-2\">\n      <div className=\"text-xs text-red-200 font-bold\">Emergency Actions</div>\n      <div className=\"flex flex-col gap-2\">\n        <button\n          onClick={async () => {\n            if (confirm('Stop all orders? This action cannot be undone.')) {\n              // Handle emergency stop\n              console.log('EMERGENCY STOP ACTIVATED')\n            }\n          }}\n          className=\"kds-button bg-red-600 hover:bg-red-500 text-white px-3 py-1 rounded text-xs\"\n        >\n          🛑 STOP ALL\n        </button>\n        <button\n          onClick={() => window.location.reload()}\n          className=\"kds-button bg-yellow-600 hover:bg-yellow-500 text-white px-3 py-1 rounded text-xs\"\n        >\n          🔄 RESET\n        </button>\n        <button\n          onClick={() => setShowEmergency(false)}\n          className=\"kds-button bg-gray-700 hover:bg-gray-600 text-white px-3 py-1 rounded text-xs\"\n        >\n          Cancel\n        </button>\n      </div>\n    </div>\n  )\n}","/**\n * Kitchen Display System (KDS) Utility Functions\n * \n * This file contains utility functions for the KDS system including:\n * - Time calculations and formatting\n * - Order and ticket processing\n * - Color coding and urgency calculations\n * - Sound management\n * - Keyboard shortcuts\n */\n\nimport { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\nimport {\n  KdsOrder,\n  KdsTicket,\n  TicketUrgency,\n  TicketPriority,\n  OrderStatus,\n  StationId,\n  OrderItem,\n  AllDayItem,\n  KdsSettings\n} from './types'\n\n/**\n * Utility function for merging class names\n */\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\n/**\n * Time and Date Utilities\n */\nexport const timeUtils = {\n  /**\n   * Calculate elapsed time in seconds from a start date\n   */\n  getElapsedTime: (startTime: Date): number => {\n    return Math.floor((Date.now() - startTime.getTime()) / 1000)\n  },\n\n  /**\n   * Format elapsed time as MM:SS or HH:MM:SS\n   */\n  formatElapsedTime: (seconds: number, showHours: boolean = false): string => {\n    const hours = Math.floor(seconds / 3600)\n    const minutes = Math.floor((seconds % 3600) / 60)\n    const remainingSeconds = seconds % 60\n\n    if (showHours || hours > 0) {\n      return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`\n    }\n    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`\n  },\n\n  /**\n   * Get time remaining for an estimated ready time\n   */\n  getTimeRemaining: (estimatedTime: Date): number => {\n    return Math.max(0, Math.floor((estimatedTime.getTime() - Date.now()) / 1000))\n  },\n\n  /**\n   * Format time as HH:MM AM/PM or 24-hour format\n   */\n  formatTime: (date: Date, use24Hour: boolean = false): string => {\n    return date.toLocaleTimeString('en-US', {\n      hour12: !use24Hour,\n      hour: '2-digit',\n      minute: '2-digit',\n      ...(use24Hour ? {} : { second: '2-digit' })\n    })\n  },\n\n  /**\n   * Check if a time is within business hours\n   */\n  isWithinBusinessHours: (date: Date, businessHours: { start: string, end: string }): boolean => {\n    const time = date.toTimeString().slice(0, 5)\n    return time >= businessHours.start && time <= businessHours.end\n  }\n}\n\n/**\n * Urgency and Priority Calculations\n */\nexport const urgencyUtils = {\n  /**\n   * Calculate ticket urgency based on elapsed time and thresholds\n   */\n  calculateUrgency: (\n    elapsedSeconds: number,\n    warningThreshold: number = 10 * 60, // 10 minutes\n    urgentThreshold: number = 15 * 60   // 15 minutes\n  ): TicketUrgency => {\n    if (elapsedSeconds >= urgentThreshold) return 'urgent'\n    if (elapsedSeconds >= warningThreshold) return 'warning'\n    return 'normal'\n  },\n\n  /**\n   * Get urgency color class for styling\n   */\n  getUrgencyColor: (urgency: TicketUrgency): string => {\n    switch (urgency) {\n      case 'urgent':\n        return 'text-red-500 border-red-500 bg-red-500/20'\n      case 'warning':\n        return 'text-yellow-500 border-yellow-500 bg-yellow-500/20'\n      default:\n        return 'text-white border-gray-600 bg-gray-900/50'\n    }\n  },\n\n  /**\n   * Get priority color class for styling\n   */\n  getPriorityColor: (priority: TicketPriority): string => {\n    switch (priority) {\n      case 'fire':\n        return 'text-red-600 bg-red-600/30 border-red-600'\n      case 'rush':\n        return 'text-orange-500 bg-orange-500/30 border-orange-500'\n      case 'urgent':\n        return 'text-yellow-500 bg-yellow-500/30 border-yellow-500'\n      default:\n        return 'text-white bg-gray-800/30 border-gray-600'\n    }\n  },\n\n  /**\n   * Get status color class for styling\n   */\n  getStatusColor: (status: OrderStatus): string => {\n    switch (status) {\n      case 'ready':\n        return 'text-green-500 bg-green-500/20 border-green-500'\n      case 'preparing':\n        return 'text-blue-500 bg-blue-500/20 border-blue-500'\n      case 'completed':\n        return 'text-gray-400 bg-gray-400/20 border-gray-400'\n      case 'cancelled':\n        return 'text-red-400 bg-red-400/20 border-red-400'\n      default:\n        return 'text-white bg-gray-800/20 border-gray-600'\n    }\n  }\n}\n\n/**\n * Order and Ticket Processing\n */\nexport const orderUtils = {\n  /**\n   * Convert an order to station-specific tickets\n   */\n  createTicketsFromOrder: (order: KdsOrder): KdsTicket[] => {\n    const stationGroups = new Map<StationId, OrderItem[]>()\n    \n    // Group items by station\n    order.items.forEach(item => {\n      if (!stationGroups.has(item.station)) {\n        stationGroups.set(item.station, [])\n      }\n      stationGroups.get(item.station)!.push(item)\n    })\n\n    // Create tickets for each station\n    return Array.from(stationGroups.entries()).map(([station, items], index) => ({\n      id: `${order.id}-${station}`,\n      orderId: order.id,\n      order,\n      station,\n      status: order.status,\n      urgency: 'normal',\n      elapsedTime: timeUtils.getElapsedTime(order.createdAt),\n      cookTime: Math.max(...items.map(item => item.cookTime)),\n      startTime: order.createdAt,\n      position: index,\n      items,\n      isFired: order.priority === 'fire' || order.priority === 'rush'\n    }))\n  },\n\n  /**\n   * Calculate total cook time for an order\n   */\n  calculateTotalCookTime: (items: OrderItem[]): number => {\n    // Group by station and get max cook time per station\n    const stationTimes = new Map<StationId, number>()\n    \n    items.forEach(item => {\n      const currentMax = stationTimes.get(item.station) || 0\n      stationTimes.set(item.station, Math.max(currentMax, item.cookTime))\n    })\n\n    // Return the longest station cook time\n    return Math.max(...Array.from(stationTimes.values()))\n  },\n\n  /**\n   * Get all unique allergens from order items\n   */\n  getAllergens: (items: OrderItem[]): string[] => {\n    const allergens = new Set<string>()\n    items.forEach(item => {\n      item.allergens?.forEach(allergen => allergens.add(allergen))\n      item.modifiers.forEach(modifier => {\n        // Add logic to extract allergens from modifiers if needed\n      })\n    })\n    return Array.from(allergens)\n  },\n\n  /**\n   * Check if order contains high-priority allergens\n   */\n  hasHighPriorityAllergens: (items: OrderItem[]): boolean => {\n    const highPriorityAllergens = ['nuts', 'shellfish', 'eggs', 'dairy', 'gluten']\n    const orderAllergens = orderUtils.getAllergens(items)\n    return orderAllergens.some(allergen => \n      highPriorityAllergens.includes(allergen.toLowerCase())\n    )\n  },\n\n  /**\n   * Sort tickets by priority and time\n   */\n  sortTickets: (tickets: KdsTicket[], sortBy: 'time' | 'priority' | 'table' | 'server' = 'time'): KdsTicket[] => {\n    return [...tickets].sort((a, b) => {\n      // First sort by fire/rush orders\n      if (a.isFired && !b.isFired) return -1\n      if (!a.isFired && b.isFired) return 1\n\n      switch (sortBy) {\n        case 'priority':\n          const priorityOrder = { fire: 0, rush: 1, urgent: 2, normal: 3 }\n          const aPriority = priorityOrder[a.order.priority]\n          const bPriority = priorityOrder[b.order.priority]\n          if (aPriority !== bPriority) return aPriority - bPriority\n          break\n\n        case 'table':\n          if (a.order.tableNumber && b.order.tableNumber) {\n            const tableA = typeof a.order.tableNumber === 'string' ? parseInt(a.order.tableNumber) : a.order.tableNumber\n            const tableB = typeof b.order.tableNumber === 'string' ? parseInt(b.order.tableNumber) : b.order.tableNumber\n            if (tableA !== tableB) return tableA - tableB\n          }\n          break\n\n        case 'server':\n          if (a.order.serverName && b.order.serverName) {\n            const serverCompare = a.order.serverName.localeCompare(b.order.serverName)\n            if (serverCompare !== 0) return serverCompare\n          }\n          break\n      }\n\n      // Default to time sorting\n      return a.startTime.getTime() - b.startTime.getTime()\n    })\n  }\n}\n\n/**\n * All Day View Utilities\n */\nexport const allDayUtils = {\n  /**\n   * Generate all day view from current orders\n   */\n  generateAllDayView: (orders: KdsOrder[], stationIds: StationId[]): AllDayItem[] => {\n    const itemMap = new Map<string, AllDayItem>()\n\n    orders.forEach(order => {\n      order.items.forEach(item => {\n        if (!stationIds.includes(item.station)) return\n\n        const key = `${item.name}-${JSON.stringify(item.modifiers.sort())}`\n        \n        if (!itemMap.has(key)) {\n          itemMap.set(key, {\n            itemId: item.id,\n            name: item.name,\n            station: item.station,\n            totalQuantity: 0,\n            completedQuantity: 0,\n            pendingQuantity: 0,\n            averageCookTime: item.cookTime,\n            modifiers: {},\n            allergens: item.allergens || []\n          })\n        }\n\n        const allDayItem = itemMap.get(key)!\n        allDayItem.totalQuantity += item.quantity\n\n        if (order.status === 'completed') {\n          allDayItem.completedQuantity += item.quantity\n        } else {\n          allDayItem.pendingQuantity += item.quantity\n        }\n\n        // Aggregate modifiers\n        item.modifiers.forEach(modifier => {\n          allDayItem.modifiers[modifier.name] = (allDayItem.modifiers[modifier.name] || 0) + item.quantity\n        })\n      })\n    })\n\n    return Array.from(itemMap.values()).sort((a, b) => {\n      // Sort by station, then by pending quantity (highest first)\n      if (a.station !== b.station) {\n        return stationIds.indexOf(a.station) - stationIds.indexOf(b.station)\n      }\n      return b.pendingQuantity - a.pendingQuantity\n    })\n  },\n\n  /**\n   * Calculate completion percentage for all day item\n   */\n  getCompletionPercentage: (item: AllDayItem): number => {\n    if (item.totalQuantity === 0) return 0\n    return Math.round((item.completedQuantity / item.totalQuantity) * 100)\n  }\n}\n\n/**\n * Sound Management\n */\nexport const soundUtils = {\n  /**\n   * Play notification sound\n   */\n  playSound: (type: 'newOrder' | 'urgent' | 'ready' | 'bump', volume: number = 0.5): void => {\n    if (typeof window === 'undefined') return\n\n    try {\n      const audio = new Audio()\n      \n      switch (type) {\n        case 'newOrder':\n          audio.src = '/sounds/new-order.mp3'\n          break\n        case 'urgent':\n          audio.src = '/sounds/urgent.mp3'\n          break\n        case 'ready':\n          audio.src = '/sounds/ready.mp3'\n          break\n        case 'bump':\n          audio.src = '/sounds/bump.mp3'\n          break\n      }\n      \n      audio.volume = Math.max(0, Math.min(1, volume))\n      audio.play().catch(() => {\n        // Ignore audio play failures (often due to browser autoplay policies)\n      })\n    } catch (error) {\n      // Ignore audio errors\n    }\n  },\n\n  /**\n   * Check if audio is supported\n   */\n  isAudioSupported: (): boolean => {\n    return typeof window !== 'undefined' && 'Audio' in window\n  }\n}\n\n/**\n * Local Storage Utilities\n */\nexport const storageUtils = {\n  /**\n   * Get KDS settings from localStorage\n   */\n  getSettings: (): Partial<KdsSettings> => {\n    if (typeof window === 'undefined') return {}\n    \n    try {\n      const stored = localStorage.getItem('kds-settings')\n      return stored ? JSON.parse(stored) : {}\n    } catch {\n      return {}\n    }\n  },\n\n  /**\n   * Save KDS settings to localStorage\n   */\n  saveSettings: (settings: Partial<KdsSettings>): void => {\n    if (typeof window === 'undefined') return\n    \n    try {\n      localStorage.setItem('kds-settings', JSON.stringify(settings))\n    } catch {\n      // Ignore storage errors\n    }\n  },\n\n  /**\n   * Clear all KDS data from localStorage\n   */\n  clearStorage: (): void => {\n    if (typeof window === 'undefined') return\n    \n    try {\n      localStorage.removeItem('kds-settings')\n      localStorage.removeItem('kds-cache')\n    } catch {\n      // Ignore storage errors\n    }\n  }\n}\n\n/**\n * Keyboard Shortcuts\n */\nexport const keyboardUtils = {\n  /**\n   * KDS keyboard shortcuts map\n   */\n  shortcuts: {\n    'KeyF': 'fire-order',\n    'KeyB': 'bump-ticket',\n    'KeyR': 'recall-ticket',\n    'KeyS': 'switch-station',\n    'KeyA': 'all-day-view',\n    'KeyH': 'help',\n    'Escape': 'exit-modal',\n    'Space': 'toggle-play-pause',\n    'ArrowLeft': 'previous-ticket',\n    'ArrowRight': 'next-ticket',\n    'ArrowUp': 'previous-station',\n    'ArrowDown': 'next-station'\n  } as const,\n\n  /**\n   * Handle keyboard shortcuts\n   */\n  handleKeyPress: (\n    event: KeyboardEvent,\n    handlers: Partial<Record<keyof typeof keyboardUtils.shortcuts, () => void>>\n  ): boolean => {\n    const key = event.code || event.key\n    const shortcut = keyboardUtils.shortcuts[key as keyof typeof keyboardUtils.shortcuts]\n    \n    if (shortcut && handlers[shortcut]) {\n      event.preventDefault()\n      handlers[shortcut]!()\n      return true\n    }\n    \n    return false\n  }\n}\n\n/**\n * Formatting Utilities\n */\nexport const formatUtils = {\n  /**\n   * Format currency values\n   */\n  formatCurrency: (amount: number): string => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(amount)\n  },\n\n  /**\n   * Format order numbers for display\n   */\n  formatOrderNumber: (orderNumber: string, maxLength: number = 6): string => {\n    if (orderNumber.length <= maxLength) return orderNumber\n    return '#' + orderNumber.slice(-maxLength)\n  },\n\n  /**\n   * Truncate text with ellipsis\n   */\n  truncateText: (text: string, maxLength: number): string => {\n    if (text.length <= maxLength) return text\n    return text.substring(0, maxLength - 3) + '...'\n  },\n\n  /**\n   * Format modifier names for display\n   */\n  formatModifiers: (modifiers: { name: string; value?: string }[]): string => {\n    return modifiers\n      .map(mod => mod.value ? `${mod.name}: ${mod.value}` : mod.name)\n      .join(', ')\n  }\n}\n\n/**\n * Performance Utilities\n */\nexport const performanceUtils = {\n  /**\n   * Debounce function calls\n   */\n  debounce: <T extends (...args: any[]) => any>(\n    func: T,\n    wait: number\n  ): ((...args: Parameters<T>) => void) => {\n    let timeout: NodeJS.Timeout\n    return (...args: Parameters<T>) => {\n      clearTimeout(timeout)\n      timeout = setTimeout(() => func(...args), wait)\n    }\n  },\n\n  /**\n   * Throttle function calls\n   */\n  throttle: <T extends (...args: any[]) => any>(\n    func: T,\n    limit: number\n  ): ((...args: Parameters<T>) => void) => {\n    let inThrottle: boolean\n    return (...args: Parameters<T>) => {\n      if (!inThrottle) {\n        func(...args)\n        inThrottle = true\n        setTimeout(() => inThrottle = false, limit)\n      }\n    }\n  }\n}\n\n// Export default utilities object\nexport const kdsUtils = {\n  time: timeUtils,\n  urgency: urgencyUtils,\n  order: orderUtils,\n  allDay: allDayUtils,\n  sound: soundUtils,\n  storage: storageUtils,\n  keyboard: keyboardUtils,\n  format: formatUtils,\n  performance: performanceUtils\n}","/* __next_internal_action_entry_do_not_use__ [{\"40ec2fff4e95cd113e92ae237679821c84f117fa79\":\"bumpTicket\"},\"app/kds/actions.ts\",\"\"] */\"use turbopack no side effects\";import{createServerReference,callServer,findSourceMapURL}from\"private-next-rsc-action-client-wrapper\";export var bumpTicket=/*#__PURE__*/createServerReference(\"40ec2fff4e95cd113e92ae237679821c84f117fa79\",callServer,void 0,findSourceMapURL,\"bumpTicket\");","/* __next_internal_action_entry_do_not_use__ [{\"40d4ac634a2b4e85aa0700987c312269e94009d30f\":\"recallTicket\"},\"app/kds/actions.ts\",\"\"] */\"use turbopack no side effects\";import{createServerReference,callServer,findSourceMapURL}from\"private-next-rsc-action-client-wrapper\";export var recallTicket=/*#__PURE__*/createServerReference(\"40d4ac634a2b4e85aa0700987c312269e94009d30f\",callServer,void 0,findSourceMapURL,\"recallTicket\");","/* __next_internal_action_entry_do_not_use__ [{\"409f6b3900b971c76f4bf00ae1e3591795aab142ab\":\"fireTicket\"},\"app/kds/actions.ts\",\"\"] */\"use turbopack no side effects\";import{createServerReference,callServer,findSourceMapURL}from\"private-next-rsc-action-client-wrapper\";export var fireTicket=/*#__PURE__*/createServerReference(\"409f6b3900b971c76f4bf00ae1e3591795aab142ab\",callServer,void 0,findSourceMapURL,\"fireTicket\");","/* __next_internal_action_entry_do_not_use__ [{\"60377f8c5f870cb7effb0ad818dbe92c66db40386b\":\"changeTicketPriority\"},\"app/kds/actions.ts\",\"\"] */\"use turbopack no side effects\";import{createServerReference,callServer,findSourceMapURL}from\"private-next-rsc-action-client-wrapper\";export var changeTicketPriority=/*#__PURE__*/createServerReference(\"60377f8c5f870cb7effb0ad818dbe92c66db40386b\",callServer,void 0,findSourceMapURL,\"changeTicketPriority\");","/**\n * KDS Ticket Component\n * \n * Digital representation of an order ticket with:\n * - High-contrast display for kitchen visibility\n * - Touch-optimized buttons for kitchen staff\n * - Real-time timer and urgency indicators\n * - Comprehensive order information display\n */\n\n'use client'\n\nimport { useState, useEffect, useCallback } from 'react'\nimport { \n  KdsTicket, \n  StationViewConfig,\n  TicketPriority \n} from '../../lib/kds/types'\nimport { \n  timeUtils, \n  urgencyUtils, \n  formatUtils,\n  cn \n} from '../../lib/kds/utils'\nimport { \n  bumpTicket, \n  recallTicket, \n  fireTicket, \n  changeTicketPriority \n} from '../../app/kds/actions'\n\ninterface TicketProps {\n  ticket: KdsTicket\n  config: StationViewConfig\n  onBump: (ticketId: string) => void\n  onRecall: (ticketId: string) => void\n  onFire: (ticketId: string) => void\n  onPriorityChange: (ticketId: string, priority: TicketPriority) => void\n  className?: string\n}\n\nexport function Ticket({ \n  ticket, \n  config, \n  onBump, \n  onRecall, \n  onFire, \n  onPriorityChange,\n  className \n}: TicketProps) {\n  const [elapsedTime, setElapsedTime] = useState(ticket.elapsedTime)\n  const [isProcessing, setIsProcessing] = useState(false)\n  const [lastAction, setLastAction] = useState<string | null>(null)\n\n  // Update elapsed time every second\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setElapsedTime(timeUtils.getElapsedTime(ticket.startTime))\n    }, 1000)\n    \n    return () => clearInterval(interval)\n  }, [ticket.startTime])\n\n  // Calculate urgency based on current elapsed time\n  const urgency = urgencyUtils.calculateUrgency(elapsedTime)\n  const urgencyColor = urgencyUtils.getUrgencyColor(urgency)\n  const priorityColor = urgencyUtils.getPriorityColor(ticket.order.priority)\n  const statusColor = urgencyUtils.getStatusColor(ticket.status)\n\n  // Handle ticket actions with loading states\n  const handleBump = useCallback(async () => {\n    setIsProcessing(true)\n    setLastAction('bump')\n    try {\n      await bumpTicket(ticket.id)\n      onBump(ticket.id)\n    } catch (error) {\n      console.error('Failed to bump ticket:', error)\n    } finally {\n      setIsProcessing(false)\n      setLastAction(null)\n    }\n  }, [ticket.id, onBump])\n\n  const handleRecall = useCallback(async () => {\n    setIsProcessing(true)\n    setLastAction('recall')\n    try {\n      await recallTicket(ticket.id)\n      onRecall(ticket.id)\n    } catch (error) {\n      console.error('Failed to recall ticket:', error)\n    } finally {\n      setIsProcessing(false)\n      setLastAction(null)\n    }\n  }, [ticket.id, onRecall])\n\n  const handleFire = useCallback(async () => {\n    setIsProcessing(true)\n    setLastAction('fire')\n    try {\n      await fireTicket(ticket.id)\n      onFire(ticket.id)\n    } catch (error) {\n      console.error('Failed to fire ticket:', error)\n    } finally {\n      setIsProcessing(false)\n      setLastAction(null)\n    }\n  }, [ticket.id, onFire])\n\n  const handlePriorityChange = useCallback(async (priority: TicketPriority) => {\n    setIsProcessing(true)\n    setLastAction('priority')\n    try {\n      await changeTicketPriority(ticket.id, priority)\n      onPriorityChange(ticket.id, priority)\n    } catch (error) {\n      console.error('Failed to change priority:', error)\n    } finally {\n      setIsProcessing(false)\n      setLastAction(null)\n    }\n  }, [ticket.id, onPriorityChange])\n\n  // Format elapsed time for display\n  const formattedElapsedTime = timeUtils.formatElapsedTime(elapsedTime, elapsedTime >= 3600)\n\n  return (\n    <div\n      className={cn(\n        'kds-ticket relative',\n        'bg-gray-900 border-2 rounded-lg p-4',\n        'transition-all duration-300',\n        urgency === 'urgent' && 'kds-urgent',\n        urgency === 'warning' && 'kds-warning',\n        urgency === 'normal' && 'kds-ticket-normal',\n        ticket.isFired && 'ring-2 ring-red-500',\n        ticket.isRecalled && 'ring-2 ring-yellow-500',\n        ticket.status === 'completed' && 'opacity-75',\n        isProcessing && 'pointer-events-none',\n        className\n      )}\n      data-ticket-id={ticket.id}\n      data-urgency={urgency}\n      tabIndex={0}\n      role=\"button\"\n      aria-label={`Order ${ticket.order.displayNumber} for ${config.showTable && ticket.order.tableNumber ? `table ${ticket.order.tableNumber}` : ticket.order.customer.name || 'customer'}`}\n    >\n      {/* Processing Overlay */}\n      {isProcessing && (\n        <div className=\"absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center z-10 rounded-lg\">\n          <div className=\"flex items-center gap-2 text-white\">\n            <LoadingSpinner />\n            <span className=\"text-sm font-medium\">\n              {lastAction === 'bump' && 'Completing...'}\n              {lastAction === 'recall' && 'Recalling...'}\n              {lastAction === 'fire' && 'Firing...'}\n              {lastAction === 'priority' && 'Updating...'}\n            </span>\n          </div>\n        </div>\n      )}\n\n      {/* Ticket Header */}\n      <div className=\"flex items-center justify-between mb-3\">\n        <div className=\"flex items-center gap-2\">\n          {/* Order Number */}\n          <div className=\"text-2xl font-bold text-white kds-text-high-contrast\">\n            {ticket.order.displayNumber}\n          </div>\n          \n          {/* Priority Badge */}\n          {ticket.order.priority !== 'normal' && (\n            <div className={cn(\n              'px-2 py-1 text-xs font-bold rounded uppercase tracking-wide',\n              priorityColor\n            )}>\n              {ticket.order.priority}\n            </div>\n          )}\n          \n          {/* Fire Indicator */}\n          {ticket.isFired && (\n            <div className=\"text-red-500 animate-pulse\" title=\"FIRED ORDER\">\n              🔥\n            </div>\n          )}\n        </div>\n        \n        {/* Timer */}\n        <div className=\"text-right\">\n          <div className={cn(\n            'text-lg font-mono font-bold',\n            urgency === 'urgent' ? 'text-red-400' :\n            urgency === 'warning' ? 'text-yellow-400' :\n            'text-white'\n          )}>\n            {formattedElapsedTime}\n          </div>\n          {config.showTimer && (\n            <div className=\"text-xs text-gray-400\">\n              Target: {ticket.cookTime}min\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Order Information */}\n      <div className=\"mb-3 space-y-1\">\n        {/* Customer & Table */}\n        <div className=\"flex justify-between text-sm\">\n          {config.showCustomer && ticket.order.customer.name && (\n            <div className=\"text-gray-300 truncate\">\n              Customer: <span className=\"text-white\">{ticket.order.customer.name}</span>\n            </div>\n          )}\n          {config.showTable && ticket.order.tableNumber && (\n            <div className=\"text-gray-300 flex-shrink-0\">\n              Table: <span className=\"text-white font-semibold\">{ticket.order.tableNumber}</span>\n            </div>\n          )}\n        </div>\n        \n        {/* Server */}\n        {config.showServer && ticket.order.serverName && (\n          <div className=\"text-sm text-gray-300\">\n            Server: <span className=\"text-white\">{ticket.order.serverName}</span>\n          </div>\n        )}\n        \n        {/* Source */}\n        {config.showSource && (\n          <div className=\"text-sm text-gray-300\">\n            Source: <span className=\"text-white capitalize\">{ticket.order.source}</span>\n          </div>\n        )}\n      </div>\n\n      {/* Items */}\n      <div className=\"space-y-2 mb-4\">\n        {ticket.items.map((item, index) => (\n          <div \n            key={`${item.id}-${index}`}\n            className=\"border-t border-gray-700 pt-2 first:border-t-0 first:pt-0\"\n          >\n            <div className=\"flex justify-between items-start\">\n              <div className=\"flex-1\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"font-semibold text-white kds-text-kitchen\">\n                    {item.quantity}x {item.name}\n                  </span>\n                  {item.isRush && (\n                    <span className=\"text-xs bg-red-600 text-white px-1 py-0.5 rounded font-bold\">\n                      RUSH\n                    </span>\n                  )}\n                </div>\n                \n                {/* Modifiers */}\n                {item.modifiers.length > 0 && (\n                  <div className=\"text-sm text-yellow-200 mt-1 pl-4\">\n                    {formatUtils.formatModifiers(item.modifiers)}\n                  </div>\n                )}\n                \n                {/* Special Instructions */}\n                {item.specialInstructions && (\n                  <div className=\"text-sm text-cyan-200 mt-1 pl-4 font-medium\">\n                    Note: {item.specialInstructions}\n                  </div>\n                )}\n                \n                {/* Allergens */}\n                {config.showAllergies && item.allergens && item.allergens.length > 0 && (\n                  <div className=\"text-sm text-red-300 mt-1 pl-4 font-bold\">\n                    ⚠️ Allergens: {item.allergens.join(', ')}\n                  </div>\n                )}\n              </div>\n              \n              {/* Cook Time */}\n              <div className=\"text-xs text-gray-400 ml-2 flex-shrink-0\">\n                {item.cookTime}min\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Special Instructions for Order */}\n      {ticket.order.specialInstructions && (\n        <div className=\"bg-blue-900 bg-opacity-30 border border-blue-500 rounded p-2 mb-4\">\n          <div className=\"text-xs text-blue-300 font-semibold mb-1\">SPECIAL INSTRUCTIONS:</div>\n          <div className=\"text-sm text-white\">{ticket.order.specialInstructions}</div>\n        </div>\n      )}\n\n      {/* Allergen Warnings */}\n      {config.showAllergies && ticket.order.allergenWarnings.length > 0 && (\n        <div className=\"bg-red-900 bg-opacity-30 border border-red-500 rounded p-2 mb-4\">\n          <div className=\"text-xs text-red-300 font-bold mb-1\">⚠️ ALLERGEN WARNINGS:</div>\n          <div className=\"text-sm text-red-200 font-semibold\">\n            {ticket.order.allergenWarnings.join(', ').toUpperCase()}\n          </div>\n        </div>\n      )}\n\n      {/* Action Buttons */}\n      <div className=\"flex gap-2\">\n        {/* Bump Button */}\n        {ticket.status !== 'completed' && (\n          <button\n            onClick={handleBump}\n            disabled={isProcessing}\n            className={cn(\n              'kds-button flex-1 bg-green-600 hover:bg-green-500',\n              'text-white font-bold py-3 px-4 rounded',\n              'disabled:opacity-50 disabled:cursor-not-allowed',\n              'focus:outline-none focus:ring-2 focus:ring-green-400',\n              'active:transform active:scale-95'\n            )}\n            aria-label=\"Complete this order\"\n          >\n            ✓ BUMP\n          </button>\n        )}\n\n        {/* Recall Button */}\n        {ticket.status === 'completed' && (\n          <button\n            onClick={handleRecall}\n            disabled={isProcessing}\n            className={cn(\n              'kds-button flex-1 bg-yellow-600 hover:bg-yellow-500',\n              'text-white font-bold py-3 px-4 rounded',\n              'disabled:opacity-50 disabled:cursor-not-allowed',\n              'focus:outline-none focus:ring-2 focus:ring-yellow-400',\n              'active:transform active:scale-95'\n            )}\n            aria-label=\"Recall this completed order\"\n          >\n            ↺ RECALL\n          </button>\n        )}\n\n        {/* Fire Button */}\n        {!ticket.isFired && ticket.status !== 'completed' && (\n          <button\n            onClick={handleFire}\n            disabled={isProcessing}\n            className={cn(\n              'kds-button bg-red-600 hover:bg-red-500',\n              'text-white font-bold py-3 px-3 rounded',\n              'disabled:opacity-50 disabled:cursor-not-allowed',\n              'focus:outline-none focus:ring-2 focus:ring-red-400',\n              'active:transform active:scale-95'\n            )}\n            aria-label=\"Mark as urgent (fire)\"\n            title=\"Fire Order (Mark as Urgent)\"\n          >\n            🔥\n          </button>\n        )}\n\n        {/* Priority Menu */}\n        <PriorityDropdown\n          currentPriority={ticket.order.priority}\n          onPriorityChange={handlePriorityChange}\n          disabled={isProcessing}\n        />\n      </div>\n\n      {/* Footer Info */}\n      <div className=\"flex justify-between items-center mt-3 pt-2 border-t border-gray-700 text-xs text-gray-400\">\n        <div>\n          Started: {timeUtils.formatTime(ticket.startTime)}\n        </div>\n        <div className=\"flex items-center gap-2\">\n          {ticket.completedTime && (\n            <div>Completed: {timeUtils.formatTime(ticket.completedTime)}</div>\n          )}\n          <div className={cn(\n            'w-2 h-2 rounded-full',\n            ticket.status === 'completed' ? 'bg-green-500' :\n            ticket.status === 'preparing' ? 'bg-blue-500' :\n            'bg-gray-500'\n          )} />\n        </div>\n      </div>\n    </div>\n  )\n}\n\n/**\n * Priority Dropdown Component\n */\nfunction PriorityDropdown({ \n  currentPriority, \n  onPriorityChange, \n  disabled \n}: {\n  currentPriority: TicketPriority\n  onPriorityChange: (priority: TicketPriority) => void\n  disabled: boolean\n}) {\n  const [isOpen, setIsOpen] = useState(false)\n\n  const priorities: { value: TicketPriority; label: string; color: string }[] = [\n    { value: 'normal', label: 'Normal', color: 'bg-gray-600' },\n    { value: 'urgent', label: 'Urgent', color: 'bg-yellow-600' },\n    { value: 'rush', label: 'Rush', color: 'bg-orange-600' },\n    { value: 'fire', label: 'Fire', color: 'bg-red-600' }\n  ]\n\n  const currentPriorityData = priorities.find(p => p.value === currentPriority)\n\n  return (\n    <div className=\"relative\">\n      <button\n        onClick={() => setIsOpen(!isOpen)}\n        disabled={disabled}\n        className={cn(\n          'kds-button px-3 py-3 rounded text-white font-medium text-sm',\n          currentPriorityData?.color || 'bg-gray-600',\n          'hover:opacity-80 disabled:opacity-50',\n          'focus:outline-none focus:ring-2 focus:ring-blue-400'\n        )}\n        aria-label={`Change priority from ${currentPriority}`}\n        title=\"Change Priority\"\n      >\n        ⚡\n      </button>\n\n      {isOpen && (\n        <div className=\"absolute bottom-full right-0 mb-2 bg-gray-800 border border-gray-600 rounded shadow-lg z-20\">\n          {priorities.map((priority) => (\n            <button\n              key={priority.value}\n              onClick={() => {\n                onPriorityChange(priority.value)\n                setIsOpen(false)\n              }}\n              className={cn(\n                'w-full px-4 py-2 text-left text-sm text-white hover:bg-gray-700',\n                'flex items-center gap-2',\n                priority.value === currentPriority && 'bg-gray-700'\n              )}\n            >\n              <div className={cn('w-2 h-2 rounded-full', priority.color)} />\n              {priority.label}\n              {priority.value === currentPriority && ' ✓'}\n            </button>\n          ))}\n        </div>\n      )}\n    </div>\n  )\n}\n\n/**\n * Loading Spinner Component\n */\nfunction LoadingSpinner() {\n  return (\n    <div className=\"w-4 h-4 border-2 border-gray-300 border-t-white rounded-full animate-spin\" />\n  )\n}\n\nexport default Ticket","/**\n * KDS Timer Component\n * \n * Displays real-time elapsed time for tickets with:\n * - Color-coded urgency indicators\n * - Smooth time updates every second\n * - Large, kitchen-visible display\n * - Audio alerts for urgent times\n */\n\n'use client'\n\nimport { useState, useEffect, useRef } from 'react'\nimport { timeUtils, urgencyUtils, soundUtils, cn } from '../../lib/kds/utils'\n\ninterface TimerProps {\n  startTime: Date\n  cookTime?: number // Expected cook time in minutes\n  isCompleted?: boolean\n  showSeconds?: boolean\n  showTarget?: boolean\n  warningThreshold?: number // Minutes before warning\n  urgentThreshold?: number // Minutes before urgent\n  onWarning?: () => void\n  onUrgent?: () => void\n  onExpired?: () => void\n  className?: string\n  size?: 'small' | 'medium' | 'large' | 'extra-large'\n  format?: 'digital' | 'analog' | 'minimal'\n}\n\nexport function Timer({\n  startTime,\n  cookTime,\n  isCompleted = false,\n  showSeconds = true,\n  showTarget = true,\n  warningThreshold = 10,\n  urgentThreshold = 15,\n  onWarning,\n  onUrgent,\n  onExpired,\n  className,\n  size = 'medium',\n  format = 'digital'\n}: TimerProps) {\n  const [elapsedSeconds, setElapsedSeconds] = useState(0)\n  const [hasWarned, setHasWarned] = useState(false)\n  const [hasUrgent, setHasUrgent] = useState(false)\n  const [hasExpired, setHasExpired] = useState(false)\n  const intervalRef = useRef<NodeJS.Timeout | null>(null)\n  const warningPlayedRef = useRef(false)\n  const urgentPlayedRef = useRef(false)\n\n  // Update elapsed time every second\n  useEffect(() => {\n    const updateElapsedTime = () => {\n      if (isCompleted) return\n      \n      const elapsed = timeUtils.getElapsedTime(startTime)\n      setElapsedSeconds(elapsed)\n      \n      const elapsedMinutes = Math.floor(elapsed / 60)\n      \n      // Check for warning threshold\n      if (elapsedMinutes >= warningThreshold && !hasWarned) {\n        setHasWarned(true)\n        onWarning?.()\n        if (!warningPlayedRef.current) {\n          soundUtils.playSound('urgent', 0.3)\n          warningPlayedRef.current = true\n        }\n      }\n      \n      // Check for urgent threshold\n      if (elapsedMinutes >= urgentThreshold && !hasUrgent) {\n        setHasUrgent(true)\n        onUrgent?.()\n        if (!urgentPlayedRef.current) {\n          soundUtils.playSound('urgent', 0.5)\n          urgentPlayedRef.current = true\n        }\n      }\n      \n      // Check for expired (if cook time is provided)\n      if (cookTime && elapsedMinutes >= cookTime && !hasExpired) {\n        setHasExpired(true)\n        onExpired?.()\n      }\n    }\n\n    // Initial update\n    updateElapsedTime()\n    \n    // Set up interval\n    if (!isCompleted) {\n      intervalRef.current = setInterval(updateElapsedTime, 1000)\n    }\n    \n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current)\n      }\n    }\n  }, [\n    startTime, \n    isCompleted, \n    warningThreshold, \n    urgentThreshold, \n    cookTime,\n    hasWarned, \n    hasUrgent, \n    hasExpired,\n    onWarning, \n    onUrgent, \n    onExpired\n  ])\n\n  // Calculate urgency level\n  const urgency = urgencyUtils.calculateUrgency(\n    elapsedSeconds,\n    warningThreshold * 60,\n    urgentThreshold * 60\n  )\n  \n  // Format elapsed time\n  const formattedTime = timeUtils.formatElapsedTime(elapsedSeconds, showSeconds)\n  \n  // Calculate progress if cook time is provided\n  const progress = cookTime ? Math.min(100, (elapsedSeconds / (cookTime * 60)) * 100) : 0\n  \n  // Get size classes\n  const sizeClasses = {\n    'small': 'text-sm',\n    'medium': 'text-lg',\n    'large': 'text-2xl',\n    'extra-large': 'text-4xl'\n  }\n\n  if (format === 'analog') {\n    return <AnalogTimer {...{ elapsedSeconds, cookTime, urgency, size, className }} />\n  }\n  \n  if (format === 'minimal') {\n    return <MinimalTimer {...{ formattedTime, urgency, size, className }} />\n  }\n\n  return (\n    <div\n      className={cn(\n        'kds-timer flex flex-col items-center',\n        isCompleted && 'opacity-60',\n        className\n      )}\n      data-urgency={urgency}\n      role=\"timer\"\n      aria-label={`Elapsed time: ${formattedTime}`}\n    >\n      {/* Main Timer Display */}\n      <div\n        className={cn(\n          'font-mono font-bold kds-text-high-contrast transition-colors duration-300',\n          sizeClasses[size],\n          urgency === 'urgent' ? 'text-red-400' :\n          urgency === 'warning' ? 'text-yellow-400' :\n          isCompleted ? 'text-green-400' :\n          'text-white',\n          urgency === 'urgent' && 'animate-pulse'\n        )}\n      >\n        {formattedTime}\n      </div>\n\n      {/* Target Time */}\n      {showTarget && cookTime && (\n        <div className=\"text-xs text-gray-400 mt-1\">\n          Target: {cookTime}min\n          {progress > 0 && (\n            <span className={cn(\n              'ml-2',\n              progress > 100 ? 'text-red-400' :\n              progress > 90 ? 'text-yellow-400' :\n              'text-gray-400'\n            )}>\n              ({Math.round(progress)}%)\n            </span>\n          )}\n        </div>\n      )}\n\n      {/* Progress Bar */}\n      {cookTime && progress > 0 && (\n        <div className=\"w-full max-w-24 bg-gray-700 rounded-full h-1.5 mt-2\">\n          <div\n            className={cn(\n              'h-full rounded-full transition-all duration-1000',\n              progress <= 75 ? 'bg-green-500' :\n              progress <= 90 ? 'bg-yellow-500' :\n              progress <= 100 ? 'bg-orange-500' :\n              'bg-red-500'\n            )}\n            style={{ width: `${Math.min(100, progress)}%` }}\n          />\n        </div>\n      )}\n\n      {/* Status Indicator */}\n      <div\n        className={cn(\n          'w-2 h-2 rounded-full mt-2 transition-colors duration-300',\n          urgency === 'urgent' ? 'bg-red-500 animate-ping' :\n          urgency === 'warning' ? 'bg-yellow-500 animate-pulse' :\n          isCompleted ? 'bg-green-500' :\n          'bg-blue-500'\n        )}\n        aria-hidden=\"true\"\n      />\n    </div>\n  )\n}\n\n/**\n * Analog Timer Component\n * Visual clock-like representation\n */\nfunction AnalogTimer({ \n  elapsedSeconds, \n  cookTime, \n  urgency, \n  size, \n  className \n}: {\n  elapsedSeconds: number\n  cookTime?: number\n  urgency: string\n  size: string\n  className?: string\n}) {\n  const minutes = Math.floor(elapsedSeconds / 60)\n  const seconds = elapsedSeconds % 60\n  \n  // Calculate angles for clock hands\n  const minuteAngle = (minutes % 60) * 6 // 360 degrees / 60 minutes\n  const secondAngle = seconds * 6 // 360 degrees / 60 seconds\n  \n  const sizeMap = {\n    'small': 40,\n    'medium': 60,\n    'large': 80,\n    'extra-large': 100\n  }\n  \n  const clockSize = sizeMap[size as keyof typeof sizeMap]\n  const radius = clockSize / 2 - 4\n\n  return (\n    <div className={cn('kds-analog-timer flex flex-col items-center', className)}>\n      <div className=\"relative\" style={{ width: clockSize, height: clockSize }}>\n        {/* Clock Face */}\n        <svg\n          width={clockSize}\n          height={clockSize}\n          className={cn(\n            'transform -rotate-90 transition-colors duration-300',\n            urgency === 'urgent' ? 'text-red-500' :\n            urgency === 'warning' ? 'text-yellow-500' :\n            'text-white'\n          )}\n        >\n          {/* Outer Circle */}\n          <circle\n            cx={clockSize / 2}\n            cy={clockSize / 2}\n            r={radius}\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n          />\n          \n          {/* Progress Arc (if cook time provided) */}\n          {cookTime && (\n            <circle\n              cx={clockSize / 2}\n              cy={clockSize / 2}\n              r={radius - 6}\n              fill=\"none\"\n              stroke={urgency === 'urgent' ? '#ef4444' : '#3b82f6'}\n              strokeWidth=\"3\"\n              strokeDasharray={`${2 * Math.PI * (radius - 6)}`}\n              strokeDashoffset={`${2 * Math.PI * (radius - 6) * (1 - Math.min(1, elapsedSeconds / (cookTime * 60)))}`}\n              className=\"transition-all duration-1000\"\n            />\n          )}\n          \n          {/* Hour Marks */}\n          {[...Array(12)].map((_, i) => {\n            const angle = (i * 30) * (Math.PI / 180)\n            const x1 = clockSize / 2 + (radius - 8) * Math.cos(angle)\n            const y1 = clockSize / 2 + (radius - 8) * Math.sin(angle)\n            const x2 = clockSize / 2 + (radius - 4) * Math.cos(angle)\n            const y2 = clockSize / 2 + (radius - 4) * Math.sin(angle)\n            \n            return (\n              <line\n                key={i}\n                x1={x1}\n                y1={y1}\n                x2={x2}\n                y2={y2}\n                stroke=\"currentColor\"\n                strokeWidth=\"1\"\n              />\n            )\n          })}\n          \n          {/* Minute Hand */}\n          <line\n            x1={clockSize / 2}\n            y1={clockSize / 2}\n            x2={clockSize / 2 + (radius - 12) * Math.cos(minuteAngle * (Math.PI / 180))}\n            y2={clockSize / 2 + (radius - 12) * Math.sin(minuteAngle * (Math.PI / 180))}\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            className=\"transition-all duration-1000\"\n          />\n          \n          {/* Second Hand */}\n          <line\n            x1={clockSize / 2}\n            y1={clockSize / 2}\n            x2={clockSize / 2 + (radius - 8) * Math.cos(secondAngle * (Math.PI / 180))}\n            y2={clockSize / 2 + (radius - 8) * Math.sin(secondAngle * (Math.PI / 180))}\n            stroke=\"#ef4444\"\n            strokeWidth=\"1\"\n            className=\"transition-all duration-75\"\n          />\n          \n          {/* Center Dot */}\n          <circle\n            cx={clockSize / 2}\n            cy={clockSize / 2}\n            r=\"2\"\n            fill=\"currentColor\"\n          />\n        </svg>\n        \n        {/* Digital Time Overlay */}\n        <div className={cn(\n          'absolute inset-0 flex items-center justify-center',\n          'text-xs font-mono font-bold text-center leading-none',\n          urgency === 'urgent' ? 'text-red-400' :\n          urgency === 'warning' ? 'text-yellow-400' :\n          'text-white'\n        )}>\n          <div>\n            <div>{Math.floor(minutes / 10)}{minutes % 10}</div>\n            <div className=\"text-[0.6em] text-gray-400\">MIN</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n/**\n * Minimal Timer Component\n * Clean, space-efficient display\n */\nfunction MinimalTimer({ \n  formattedTime, \n  urgency, \n  size, \n  className \n}: {\n  formattedTime: string\n  urgency: string\n  size: string\n  className?: string\n}) {\n  const sizeClasses = {\n    'small': 'text-xs',\n    'medium': 'text-sm',\n    'large': 'text-base',\n    'extra-large': 'text-lg'\n  }\n\n  return (\n    <div\n      className={cn(\n        'kds-minimal-timer inline-flex items-center gap-1',\n        className\n      )}\n    >\n      <div\n        className={cn(\n          'w-1.5 h-1.5 rounded-full',\n          urgency === 'urgent' ? 'bg-red-500 animate-ping' :\n          urgency === 'warning' ? 'bg-yellow-500 animate-pulse' :\n          'bg-green-500'\n        )}\n      />\n      <span\n        className={cn(\n          'font-mono font-medium',\n          sizeClasses[size],\n          urgency === 'urgent' ? 'text-red-400' :\n          urgency === 'warning' ? 'text-yellow-400' :\n          'text-white'\n        )}\n      >\n        {formattedTime}\n      </span>\n    </div>\n  )\n}\n\n/**\n * Multi-Timer Display\n * Shows multiple timers in a compact grid\n */\ninterface MultiTimerProps {\n  timers: Array<{\n    id: string\n    label: string\n    startTime: Date\n    cookTime?: number\n    isCompleted?: boolean\n  }>\n  columns?: number\n  showLabels?: boolean\n  onTimerClick?: (id: string) => void\n  className?: string\n}\n\nexport function MultiTimer({ \n  timers, \n  columns = 2, \n  showLabels = true,\n  onTimerClick,\n  className \n}: MultiTimerProps) {\n  return (\n    <div\n      className={cn(\n        'kds-multi-timer grid gap-2',\n        `grid-cols-${columns}`,\n        className\n      )}\n    >\n      {timers.map((timer) => (\n        <div\n          key={timer.id}\n          className={cn(\n            'bg-gray-900 border border-gray-700 rounded p-2 text-center',\n            onTimerClick && 'cursor-pointer hover:bg-gray-800',\n            'transition-colors duration-150'\n          )}\n          onClick={() => onTimerClick?.(timer.id)}\n        >\n          {showLabels && (\n            <div className=\"text-xs text-gray-400 mb-1 truncate\">\n              {timer.label}\n            </div>\n          )}\n          <Timer\n            startTime={timer.startTime}\n            cookTime={timer.cookTime}\n            isCompleted={timer.isCompleted}\n            size=\"small\"\n            format=\"minimal\"\n            showTarget={false}\n          />\n        </div>\n      ))}\n    </div>\n  )\n}\n\n/**\n * Timer with Custom Alerts\n */\ninterface AlertTimerProps extends TimerProps {\n  alerts?: Array<{\n    threshold: number // minutes\n    message: string\n    sound?: boolean\n    color?: string\n  }>\n}\n\nexport function AlertTimer({ alerts = [], ...props }: AlertTimerProps) {\n  const [triggeredAlerts, setTriggeredAlerts] = useState<Set<number>>(new Set())\n  \n  const handleTimeUpdate = (elapsedSeconds: number) => {\n    const elapsedMinutes = Math.floor(elapsedSeconds / 60)\n    \n    alerts.forEach((alert) => {\n      if (elapsedMinutes >= alert.threshold && !triggeredAlerts.has(alert.threshold)) {\n        setTriggeredAlerts(prev => new Set(prev).add(alert.threshold))\n        \n        if (alert.sound) {\n          soundUtils.playSound('urgent', 0.4)\n        }\n        \n        // Could show toast notification or other alert UI\n        console.log(`Timer Alert: ${alert.message}`)\n      }\n    })\n  }\n\n  return (\n    <Timer \n      {...props}\n      onWarning={() => {\n        props.onWarning?.()\n        handleTimeUpdate(props.warningThreshold ? props.warningThreshold * 60 : 600)\n      }}\n      onUrgent={() => {\n        props.onUrgent?.()\n        handleTimeUpdate(props.urgentThreshold ? props.urgentThreshold * 60 : 900)\n      }}\n    />\n  )\n}\n\nexport default Timer","/**\n * KDS Station View Component\n * \n * Displays tickets for one or more kitchen stations with:\n * - Configurable column layout\n * - Station-specific filtering and sorting\n * - Real-time ticket updates\n * - Touch-optimized interface\n * - Auto-scrolling for new tickets\n */\n\n'use client'\n\nimport { useState, useEffect, useRef, useCallback } from 'react'\nimport {\n  KitchenStation,\n  KdsTicket,\n  StationViewConfig,\n  TicketPriority,\n  StationId\n} from '../../lib/kds/types'\nimport { orderUtils, cn } from '../../lib/kds/utils'\nimport { Ticket } from './ticket'\nimport { Timer, MultiTimer } from './timer'\n\ninterface StationViewProps {\n  station: KitchenStation\n  tickets: KdsTicket[]\n  config: StationViewConfig\n  onBump: (ticketId: string) => void\n  onRecall: (ticketId: string) => void\n  onFire: (ticketId: string) => void\n  onPriorityChange: (ticketId: string, priority: TicketPriority) => void\n  className?: string\n  showHeader?: boolean\n  autoScroll?: boolean\n}\n\nexport function StationView({\n  station,\n  tickets,\n  config,\n  onBump,\n  onRecall,\n  onFire,\n  onPriorityChange,\n  className,\n  showHeader = true,\n  autoScroll = true\n}: StationViewProps) {\n  const [sortBy, setSortBy] = useState(config.sortBy)\n  const [selectedTicket, setSelectedTicket] = useState<string | null>(null)\n  const containerRef = useRef<HTMLDivElement>(null)\n  const lastTicketCountRef = useRef(tickets.length)\n\n  // Filter and sort tickets for this station\n  const filteredTickets = tickets\n    .filter(ticket => config.stations.includes(ticket.station))\n    .filter(ticket => config.showCompleted || ticket.status !== 'completed')\n\n  const sortedTickets = orderUtils.sortTickets(filteredTickets, sortBy)\n\n  // Auto-scroll to new tickets\n  useEffect(() => {\n    if (autoScroll && config.autoScroll && sortedTickets.length > lastTicketCountRef.current) {\n      const container = containerRef.current\n      if (container) {\n        // Scroll to top for new tickets\n        container.scrollTo({ top: 0, behavior: 'smooth' })\n      }\n    }\n    lastTicketCountRef.current = sortedTickets.length\n  }, [sortedTickets.length, autoScroll, config.autoScroll])\n\n  // Handle keyboard navigation\n  const handleKeyDown = useCallback((event: KeyboardEvent) => {\n    if (!selectedTicket) return\n\n    const currentIndex = sortedTickets.findIndex(t => t.id === selectedTicket)\n    let newIndex = currentIndex\n\n    switch (event.key) {\n      case 'ArrowUp':\n        event.preventDefault()\n        newIndex = Math.max(0, currentIndex - 1)\n        break\n      case 'ArrowDown':\n        event.preventDefault()\n        newIndex = Math.min(sortedTickets.length - 1, currentIndex + 1)\n        break\n      case 'ArrowLeft':\n        event.preventDefault()\n        newIndex = Math.max(0, currentIndex - config.maxTicketsPerColumn)\n        break\n      case 'ArrowRight':\n        event.preventDefault()\n        newIndex = Math.min(sortedTickets.length - 1, currentIndex + config.maxTicketsPerColumn)\n        break\n      case 'Enter':\n      case ' ':\n        event.preventDefault()\n        onBump(selectedTicket)\n        break\n      case 'f':\n      case 'F':\n        event.preventDefault()\n        onFire(selectedTicket)\n        break\n      case 'r':\n      case 'R':\n        event.preventDefault()\n        onRecall(selectedTicket)\n        break\n      case 'Escape':\n        event.preventDefault()\n        setSelectedTicket(null)\n        break\n    }\n\n    if (newIndex !== currentIndex && sortedTickets[newIndex]) {\n      setSelectedTicket(sortedTickets[newIndex].id)\n    }\n  }, [selectedTicket, sortedTickets, config.maxTicketsPerColumn, onBump, onFire, onRecall])\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyDown)\n    return () => document.removeEventListener('keydown', handleKeyDown)\n  }, [handleKeyDown])\n\n  // Calculate station metrics\n  const metrics = {\n    total: sortedTickets.length,\n    pending: sortedTickets.filter(t => t.status === 'pending').length,\n    preparing: sortedTickets.filter(t => t.status === 'preparing').length,\n    ready: sortedTickets.filter(t => t.status === 'ready').length,\n    completed: sortedTickets.filter(t => t.status === 'completed').length,\n    urgent: sortedTickets.filter(t => t.urgency === 'urgent').length,\n    overCapacity: sortedTickets.length > station.maxCapacity\n  }\n\n  // Split tickets into columns\n  const columns = []\n  const ticketsPerColumn = Math.ceil(sortedTickets.length / config.columns)\n  \n  for (let i = 0; i < config.columns; i++) {\n    const startIndex = i * ticketsPerColumn\n    const endIndex = Math.min(startIndex + ticketsPerColumn, sortedTickets.length)\n    const columnTickets = sortedTickets.slice(startIndex, endIndex)\n    \n    if (columnTickets.length > 0 || i === 0) {\n      columns.push(columnTickets)\n    }\n  }\n\n  return (\n    <div\n      className={cn(\n        'kds-station-view h-full flex flex-col',\n        metrics.overCapacity && 'ring-2 ring-red-500',\n        className\n      )}\n      data-station={station.id}\n      data-ticket-count={sortedTickets.length}\n    >\n      {/* Station Header */}\n      {showHeader && (\n        <StationHeader\n          station={station}\n          metrics={metrics}\n          config={config}\n          sortBy={sortBy}\n          onSortChange={setSortBy}\n        />\n      )}\n\n      {/* Tickets Grid */}\n      <div\n        ref={containerRef}\n        className={cn(\n          'flex-1 kds-ticket-grid overflow-y-auto',\n          config.autoScroll && 'kds-auto-scroll',\n          `kds-ticket-grid-${config.columns}`\n        )}\n        style={{\n          gridTemplateColumns: `repeat(${config.columns}, 1fr)`\n        }}\n      >\n        {columns.map((columnTickets, columnIndex) => (\n          <div\n            key={columnIndex}\n            className=\"space-y-4\"\n            data-column={columnIndex}\n          >\n            {/* Column Header */}\n            <div className=\"text-center\">\n              <div className=\"text-sm text-gray-400 font-medium\">\n                Column {columnIndex + 1}\n              </div>\n              <div className=\"text-xs text-gray-500\">\n                {columnTickets.length} tickets\n              </div>\n            </div>\n\n            {/* Column Tickets */}\n            {columnTickets.map((ticket) => (\n              <Ticket\n                key={ticket.id}\n                ticket={ticket}\n                config={config}\n                onBump={onBump}\n                onRecall={onRecall}\n                onFire={onFire}\n                onPriorityChange={onPriorityChange}\n                className={cn(\n                  selectedTicket === ticket.id && 'ring-2 ring-blue-500',\n                  'cursor-pointer'\n                )}\n                onClick={() => setSelectedTicket(ticket.id)}\n              />\n            ))}\n\n            {/* Empty State for Column */}\n            {columnTickets.length === 0 && columnIndex === 0 && (\n              <EmptyStationState station={station} />\n            )}\n\n            {/* Fill remaining space to maintain column height */}\n            {columnTickets.length < config.maxTicketsPerColumn && (\n              <div className=\"flex-1\" />\n            )}\n          </div>\n        ))}\n      </div>\n\n      {/* Station Footer */}\n      <StationFooter\n        station={station}\n        metrics={metrics}\n        config={config}\n        ticketCount={sortedTickets.length}\n      />\n    </div>\n  )\n}\n\n/**\n * Station Header Component\n */\nfunction StationHeader({\n  station,\n  metrics,\n  config,\n  sortBy,\n  onSortChange\n}: {\n  station: KitchenStation\n  metrics: any\n  config: StationViewConfig\n  sortBy: string\n  onSortChange: (sortBy: 'time' | 'priority' | 'table' | 'server') => void\n}) {\n  const loadPercentage = Math.round((metrics.total / station.maxCapacity) * 100)\n\n  return (\n    <div className=\"kds-no-print bg-gray-900 border-b border-gray-700 p-4 flex items-center justify-between\">\n      {/* Station Info */}\n      <div className=\"flex items-center gap-4\">\n        <div className=\"flex items-center gap-2\">\n          <div\n            className=\"w-4 h-4 rounded\"\n            style={{ backgroundColor: station.color }}\n          />\n          <div>\n            <h2 className=\"text-xl font-bold text-white kds-text-high-contrast\">\n              {station.displayName}\n            </h2>\n            <div className=\"text-sm text-gray-400\">\n              {metrics.total}/{station.maxCapacity} orders\n              {loadPercentage > 100 && (\n                <span className=\"ml-2 text-red-400 font-bold\">\n                  OVER CAPACITY\n                </span>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Status Indicators */}\n        <div className=\"flex items-center gap-3\">\n          {metrics.urgent > 0 && (\n            <div className=\"flex items-center gap-1 text-red-400 font-bold\">\n              <div className=\"w-2 h-2 bg-red-500 rounded-full animate-pulse\" />\n              <span>{metrics.urgent} urgent</span>\n            </div>\n          )}\n          <div className=\"text-sm text-gray-400\">\n            <span className=\"text-blue-400\">{metrics.preparing}</span> preparing •{' '}\n            <span className=\"text-green-400\">{metrics.ready}</span> ready\n          </div>\n        </div>\n      </div>\n\n      {/* Controls */}\n      <div className=\"flex items-center gap-3\">\n        {/* Sort Options */}\n        <div className=\"flex items-center gap-2\">\n          <span className=\"text-sm text-gray-400\">Sort by:</span>\n          <select\n            value={sortBy}\n            onChange={(e) => onSortChange(e.target.value as any)}\n            className=\"bg-gray-800 border border-gray-600 rounded px-2 py-1 text-sm text-white\"\n          >\n            <option value=\"time\">Time</option>\n            <option value=\"priority\">Priority</option>\n            <option value=\"table\">Table</option>\n            <option value=\"server\">Server</option>\n          </select>\n        </div>\n\n        {/* Capacity Indicator */}\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-16 bg-gray-700 rounded-full h-2\">\n            <div\n              className={cn(\n                'h-full rounded-full transition-all duration-500',\n                loadPercentage > 100 ? 'bg-red-500' :\n                loadPercentage > 80 ? 'bg-yellow-500' :\n                'bg-green-500'\n              )}\n              style={{ width: `${Math.min(100, loadPercentage)}%` }}\n            />\n          </div>\n          <span className=\"text-xs text-gray-400 min-w-[3rem]\">\n            {loadPercentage}%\n          </span>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n/**\n * Station Footer Component\n */\nfunction StationFooter({\n  station,\n  metrics,\n  config,\n  ticketCount\n}: {\n  station: KitchenStation\n  metrics: any\n  config: StationViewConfig\n  ticketCount: number\n}) {\n  return (\n    <div className=\"kds-no-print bg-gray-900 border-t border-gray-700 p-2 flex items-center justify-between text-sm text-gray-400\">\n      <div className=\"flex items-center gap-4\">\n        <div>Average time: {station.averageCookTime}min</div>\n        <div>Capacity: {ticketCount}/{station.maxCapacity}</div>\n      </div>\n      \n      <div className=\"flex items-center gap-4\">\n        <div>Last updated: {new Date().toLocaleTimeString()}</div>\n        <div className=\"flex items-center gap-1\">\n          <div className={cn(\n            'w-2 h-2 rounded-full',\n            metrics.total > 0 ? 'bg-green-500' : 'bg-gray-500'\n          )} />\n          <span>Station {station.isActive ? 'Active' : 'Inactive'}</span>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n/**\n * Empty Station State Component\n */\nfunction EmptyStationState({ station }: { station: KitchenStation }) {\n  return (\n    <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n      <div className=\"text-6xl mb-4\" role=\"img\" aria-label=\"Empty state\">\n        {station.icon}\n      </div>\n      <div className=\"text-xl font-bold text-gray-300 mb-2\">\n        No orders for {station.displayName}\n      </div>\n      <div className=\"text-gray-500 max-w-md\">\n        New orders will appear here automatically. The station is ready and waiting for incoming tickets.\n      </div>\n      <div className=\"mt-4 text-sm text-gray-400\">\n        Capacity: 0/{station.maxCapacity} • Average time: {station.averageCookTime} minutes\n      </div>\n    </div>\n  )\n}\n\n/**\n * Multi-Station View Component\n * Shows multiple stations in a single view\n */\ninterface MultiStationViewProps {\n  stations: KitchenStation[]\n  tickets: KdsTicket[]\n  config: StationViewConfig\n  onBump: (ticketId: string) => void\n  onRecall: (ticketId: string) => void\n  onFire: (ticketId: string) => void\n  onPriorityChange: (ticketId: string, priority: TicketPriority) => void\n  className?: string\n}\n\nexport function MultiStationView({\n  stations,\n  tickets,\n  config,\n  onBump,\n  onRecall,\n  onFire,\n  onPriorityChange,\n  className\n}: MultiStationViewProps) {\n  return (\n    <div className={cn('kds-multi-station-view grid gap-4', className)}>\n      {stations.map((station) => {\n        const stationTickets = tickets.filter(ticket => \n          ticket.station === station.id\n        )\n\n        return (\n          <StationView\n            key={station.id}\n            station={station}\n            tickets={stationTickets}\n            config={{\n              ...config,\n              stations: [station.id],\n              columns: Math.max(1, Math.floor(config.columns / stations.length))\n            }}\n            onBump={onBump}\n            onRecall={onRecall}\n            onFire={onFire}\n            onPriorityChange={onPriorityChange}\n            showHeader={stations.length > 1}\n          />\n        )\n      })}\n    </div>\n  )\n}\n\n/**\n * Station Performance Component\n * Shows real-time performance metrics\n */\ninterface StationPerformanceProps {\n  station: KitchenStation\n  tickets: KdsTicket[]\n  className?: string\n}\n\nexport function StationPerformance({\n  station,\n  tickets,\n  className\n}: StationPerformanceProps) {\n  const metrics = {\n    total: tickets.length,\n    avgTime: tickets.reduce((acc, t) => acc + t.elapsedTime, 0) / tickets.length || 0,\n    efficiency: Math.round((tickets.filter(t => t.elapsedTime <= station.averageCookTime * 60).length / tickets.length || 0) * 100),\n    overdue: tickets.filter(t => t.elapsedTime > station.averageCookTime * 60).length\n  }\n\n  return (\n    <div className={cn('bg-gray-900 border border-gray-700 rounded p-4', className)}>\n      <div className=\"flex items-center gap-2 mb-3\">\n        <div\n          className=\"w-3 h-3 rounded\"\n          style={{ backgroundColor: station.color }}\n        />\n        <h3 className=\"font-bold text-white\">{station.displayName}</h3>\n      </div>\n      \n      <div className=\"grid grid-cols-2 gap-4 text-sm\">\n        <div>\n          <div className=\"text-gray-400\">Active Orders</div>\n          <div className=\"text-lg font-bold text-white\">{metrics.total}</div>\n        </div>\n        \n        <div>\n          <div className=\"text-gray-400\">Avg Time</div>\n          <div className=\"text-lg font-bold text-white\">\n            {Math.round(metrics.avgTime / 60)}min\n          </div>\n        </div>\n        \n        <div>\n          <div className=\"text-gray-400\">Efficiency</div>\n          <div className={cn(\n            'text-lg font-bold',\n            metrics.efficiency >= 90 ? 'text-green-400' :\n            metrics.efficiency >= 70 ? 'text-yellow-400' :\n            'text-red-400'\n          )}>\n            {metrics.efficiency}%\n          </div>\n        </div>\n        \n        <div>\n          <div className=\"text-gray-400\">Overdue</div>\n          <div className={cn(\n            'text-lg font-bold',\n            metrics.overdue === 0 ? 'text-green-400' : 'text-red-400'\n          )}>\n            {metrics.overdue}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default StationView","/**\n * Kitchen Display System (KDS) Station Configuration\n * \n * This file defines the kitchen stations, their capabilities, and routing logic.\n * It includes station definitions, item routing, and station management functions.\n */\n\nimport {\n  KitchenStation,\n  StationId,\n  StationViewConfig,\n  OrderItem,\n  KdsSettings\n} from './types'\n\n/**\n * Default Kitchen Station Definitions\n */\nexport const DEFAULT_STATIONS: Record<StationId, KitchenStation> = {\n  grill: {\n    id: 'grill',\n    name: 'grill',\n    displayName: 'Grill',\n    color: '#dc2626', // red-600\n    icon: '🔥',\n    position: 1,\n    isActive: true,\n    maxCapacity: 12,\n    averageCookTime: 8,\n    specialInstructions: [\n      'Check internal temperature',\n      'Let meat rest before plating',\n      'Clean grill between orders'\n    ]\n  },\n  fryer: {\n    id: 'fryer',\n    name: 'fryer',\n    displayName: 'Fryer',\n    color: '#d97706', // amber-600\n    icon: '🍟',\n    position: 2,\n    isActive: true,\n    maxCapacity: 10,\n    averageCookTime: 5,\n    specialInstructions: [\n      'Preheat oil to correct temperature',\n      'Do not overcrowd basket',\n      'Drain properly before plating'\n    ]\n  },\n  salad: {\n    id: 'salad',\n    name: 'salad',\n    displayName: 'Salad',\n    color: '#059669', // green-600\n    icon: '🥗',\n    position: 3,\n    isActive: true,\n    maxCapacity: 15,\n    averageCookTime: 3,\n    specialInstructions: [\n      'Check produce freshness',\n      'Use separate cutting boards',\n      'Keep ingredients cold'\n    ]\n  },\n  expo: {\n    id: 'expo',\n    name: 'expo',\n    displayName: 'Expo',\n    color: '#7c3aed', // violet-600\n    icon: '🍽️',\n    position: 4,\n    isActive: true,\n    maxCapacity: 20,\n    averageCookTime: 2,\n    specialInstructions: [\n      'Check order completeness',\n      'Verify special requests',\n      'Ensure proper presentation'\n    ]\n  },\n  pantry: {\n    id: 'pantry',\n    name: 'pantry',\n    displayName: 'Pantry',\n    color: '#0369a1', // blue-700\n    icon: '🥪',\n    position: 5,\n    isActive: true,\n    maxCapacity: 8,\n    averageCookTime: 4,\n    specialInstructions: [\n      'Check sandwich construction',\n      'Toast bread evenly',\n      'Use proper portion sizes'\n    ]\n  },\n  dessert: {\n    id: 'dessert',\n    name: 'dessert',\n    displayName: 'Dessert',\n    color: '#be185d', // pink-700\n    icon: '🍰',\n    position: 6,\n    isActive: true,\n    maxCapacity: 6,\n    averageCookTime: 6,\n    specialInstructions: [\n      'Check dessert temperature',\n      'Garnish according to recipe',\n      'Handle with care'\n    ]\n  },\n  beverage: {\n    id: 'beverage',\n    name: 'beverage',\n    displayName: 'Beverage',\n    color: '#0891b2', // cyan-600\n    icon: '🥤',\n    position: 7,\n    isActive: true,\n    maxCapacity: 25,\n    averageCookTime: 1,\n    specialInstructions: [\n      'Use correct glass size',\n      'Check ice levels',\n      'Garnish appropriately'\n    ]\n  }\n}\n\n/**\n * Menu Item to Station Routing Rules\n * This defines which menu items should be routed to which kitchen stations\n */\nexport const ITEM_STATION_ROUTING: Record<string, StationId> = {\n  // Grill items\n  'burger': 'grill',\n  'cheeseburger': 'grill',\n  'steak': 'grill',\n  'chicken breast': 'grill',\n  'grilled chicken': 'grill',\n  'fish': 'grill',\n  'salmon': 'grill',\n  'hot dog': 'grill',\n  'sausage': 'grill',\n  'grilled vegetables': 'grill',\n\n  // Fryer items\n  'french fries': 'fryer',\n  'fries': 'fryer',\n  'onion rings': 'fryer',\n  'fried chicken': 'fryer',\n  'chicken wings': 'fryer',\n  'fish and chips': 'fryer',\n  'mozzarella sticks': 'fryer',\n  'nachos': 'fryer',\n  'tempura': 'fryer',\n\n  // Salad items\n  'caesar salad': 'salad',\n  'house salad': 'salad',\n  'greek salad': 'salad',\n  'cobb salad': 'salad',\n  'garden salad': 'salad',\n  'mixed greens': 'salad',\n  'fruit salad': 'salad',\n\n  // Pantry items\n  'sandwich': 'pantry',\n  'club sandwich': 'pantry',\n  'wrap': 'pantry',\n  'panini': 'pantry',\n  'sub': 'pantry',\n  'bagel': 'pantry',\n  'toast': 'pantry',\n  'cold appetizer': 'pantry',\n\n  // Dessert items\n  'cake': 'dessert',\n  'pie': 'dessert',\n  'ice cream': 'dessert',\n  'cheesecake': 'dessert',\n  'brownie': 'dessert',\n  'cookies': 'dessert',\n  'pudding': 'dessert',\n\n  // Beverage items\n  'soda': 'beverage',\n  'coffee': 'beverage',\n  'tea': 'beverage',\n  'juice': 'beverage',\n  'smoothie': 'beverage',\n  'milkshake': 'beverage',\n  'cocktail': 'beverage',\n  'beer': 'beverage',\n  'wine': 'beverage',\n  'water': 'beverage'\n}\n\n/**\n * Category to Station Mapping\n * Fallback routing based on menu category\n */\nexport const CATEGORY_STATION_ROUTING: Record<string, StationId> = {\n  'appetizers': 'fryer',\n  'salads': 'salad',\n  'soups': 'pantry',\n  'entrees': 'grill',\n  'mains': 'grill',\n  'burgers': 'grill',\n  'sandwiches': 'pantry',\n  'sides': 'fryer',\n  'desserts': 'dessert',\n  'beverages': 'beverage',\n  'drinks': 'beverage',\n  'hot drinks': 'beverage',\n  'cold drinks': 'beverage'\n}\n\n/**\n * Default Station View Configurations\n */\nexport const DEFAULT_STATION_VIEWS: StationViewConfig[] = [\n  {\n    id: 'all-stations',\n    name: 'All Stations',\n    stations: ['grill', 'fryer', 'salad', 'expo', 'pantry', 'dessert', 'beverage'],\n    columns: 4,\n    showTimer: true,\n    showCustomer: true,\n    showServer: true,\n    showTable: true,\n    showSource: true,\n    showAllergies: true,\n    sortBy: 'time',\n    maxTicketsPerColumn: 10,\n    autoScroll: true,\n    soundAlerts: true,\n    colorCoding: true\n  },\n  {\n    id: 'hot-stations',\n    name: 'Hot Stations',\n    stations: ['grill', 'fryer'],\n    columns: 2,\n    showTimer: true,\n    showCustomer: false,\n    showServer: false,\n    showTable: true,\n    showSource: false,\n    showAllergies: true,\n    sortBy: 'priority',\n    maxTicketsPerColumn: 12,\n    autoScroll: true,\n    soundAlerts: true,\n    colorCoding: true\n  },\n  {\n    id: 'cold-stations',\n    name: 'Cold Stations',\n    stations: ['salad', 'pantry', 'dessert'],\n    columns: 3,\n    showTimer: true,\n    showCustomer: false,\n    showServer: false,\n    showTable: true,\n    showSource: false,\n    showAllergies: true,\n    sortBy: 'time',\n    maxTicketsPerColumn: 8,\n    autoScroll: true,\n    soundAlerts: false,\n    colorCoding: true\n  },\n  {\n    id: 'expo-view',\n    name: 'Expo',\n    stations: ['expo'],\n    columns: 1,\n    showTimer: true,\n    showCustomer: true,\n    showServer: true,\n    showTable: true,\n    showSource: true,\n    showAllergies: true,\n    sortBy: 'table',\n    maxTicketsPerColumn: 20,\n    autoScroll: true,\n    soundAlerts: true,\n    colorCoding: true\n  },\n  {\n    id: 'grill-only',\n    name: 'Grill Station',\n    stations: ['grill'],\n    columns: 1,\n    showTimer: true,\n    showCustomer: false,\n    showServer: false,\n    showTable: true,\n    showSource: false,\n    showAllergies: true,\n    sortBy: 'priority',\n    maxTicketsPerColumn: 15,\n    autoScroll: true,\n    soundAlerts: true,\n    colorCoding: true\n  }\n]\n\n/**\n * Station Management Functions\n */\nexport const stationUtils = {\n  /**\n   * Route a menu item to the appropriate station\n   */\n  routeItemToStation: (item: OrderItem): StationId => {\n    // Check exact item name match first\n    const itemKey = item.name.toLowerCase().trim()\n    if (ITEM_STATION_ROUTING[itemKey]) {\n      return ITEM_STATION_ROUTING[itemKey]\n    }\n\n    // Check partial matches\n    for (const [key, station] of Object.entries(ITEM_STATION_ROUTING)) {\n      if (itemKey.includes(key)) {\n        return station\n      }\n    }\n\n    // Check category routing\n    const categoryKey = item.category.toLowerCase().trim()\n    if (CATEGORY_STATION_ROUTING[categoryKey]) {\n      return CATEGORY_STATION_ROUTING[categoryKey]\n    }\n\n    // Check partial category matches\n    for (const [key, station] of Object.entries(CATEGORY_STATION_ROUTING)) {\n      if (categoryKey.includes(key)) {\n        return station\n      }\n    }\n\n    // Default fallback to expo\n    return 'expo'\n  },\n\n  /**\n   * Get all active stations\n   */\n  getActiveStations: (stations: Record<StationId, KitchenStation> = DEFAULT_STATIONS): KitchenStation[] => {\n    return Object.values(stations)\n      .filter(station => station.isActive)\n      .sort((a, b) => a.position - b.position)\n  },\n\n  /**\n   * Get station by ID with fallback\n   */\n  getStation: (\n    id: StationId, \n    stations: Record<StationId, KitchenStation> = DEFAULT_STATIONS\n  ): KitchenStation => {\n    return stations[id] || DEFAULT_STATIONS.expo\n  },\n\n  /**\n   * Check if station can accept more orders\n   */\n  canAcceptOrder: (\n    stationId: StationId,\n    currentTicketCount: number,\n    stations: Record<StationId, KitchenStation> = DEFAULT_STATIONS\n  ): boolean => {\n    const station = stations[stationId]\n    if (!station || !station.isActive) return false\n    return currentTicketCount < station.maxCapacity\n  },\n\n  /**\n   * Get stations that are over capacity\n   */\n  getOverCapacityStations: (\n    ticketCounts: Record<StationId, number>,\n    stations: Record<StationId, KitchenStation> = DEFAULT_STATIONS\n  ): StationId[] => {\n    return Object.entries(ticketCounts)\n      .filter(([stationId, count]) => {\n        const station = stations[stationId as StationId]\n        return station && count > station.maxCapacity\n      })\n      .map(([stationId]) => stationId as StationId)\n  },\n\n  /**\n   * Calculate station load percentage\n   */\n  getStationLoad: (\n    stationId: StationId,\n    currentTicketCount: number,\n    stations: Record<StationId, KitchenStation> = DEFAULT_STATIONS\n  ): number => {\n    const station = stations[stationId]\n    if (!station) return 0\n    return Math.min(100, Math.round((currentTicketCount / station.maxCapacity) * 100))\n  },\n\n  /**\n   * Get recommended station view based on current load\n   */\n  getRecommendedView: (\n    ticketCounts: Record<StationId, number>,\n    stations: Record<StationId, KitchenStation> = DEFAULT_STATIONS\n  ): string => {\n    const overCapacityStations = stationUtils.getOverCapacityStations(ticketCounts, stations)\n    \n    if (overCapacityStations.length === 0) {\n      return 'all-stations'\n    }\n\n    // If only hot stations are over capacity, show hot-stations view\n    if (overCapacityStations.every(id => ['grill', 'fryer'].includes(id))) {\n      return 'hot-stations'\n    }\n\n    // If only cold stations are over capacity, show cold-stations view\n    if (overCapacityStations.every(id => ['salad', 'pantry', 'dessert'].includes(id))) {\n      return 'cold-stations'\n    }\n\n    // Otherwise show all stations\n    return 'all-stations'\n  },\n\n  /**\n   * Validate station configuration\n   */\n  validateStation: (station: Partial<KitchenStation>): string[] => {\n    const errors: string[] = []\n\n    if (!station.id) errors.push('Station ID is required')\n    if (!station.name) errors.push('Station name is required')\n    if (!station.displayName) errors.push('Display name is required')\n    if (!station.color) errors.push('Color is required')\n    if (typeof station.position !== 'number') errors.push('Position must be a number')\n    if (typeof station.maxCapacity !== 'number' || station.maxCapacity < 1) {\n      errors.push('Max capacity must be a positive number')\n    }\n    if (typeof station.averageCookTime !== 'number' || station.averageCookTime < 0) {\n      errors.push('Average cook time must be a non-negative number')\n    }\n\n    return errors\n  },\n\n  /**\n   * Create custom station configuration\n   */\n  createCustomStation: (\n    id: StationId,\n    config: Partial<KitchenStation>\n  ): KitchenStation => {\n    const baseStation = DEFAULT_STATIONS[id] || DEFAULT_STATIONS.expo\n    return {\n      ...baseStation,\n      ...config,\n      id\n    }\n  },\n\n  /**\n   * Filter stations by criteria\n   */\n  filterStations: (\n    stations: Record<StationId, KitchenStation>,\n    filters: {\n      active?: boolean\n      maxCapacity?: number\n      averageCookTime?: number\n    }\n  ): KitchenStation[] => {\n    return Object.values(stations).filter(station => {\n      if (filters.active !== undefined && station.isActive !== filters.active) {\n        return false\n      }\n      if (filters.maxCapacity !== undefined && station.maxCapacity < filters.maxCapacity) {\n        return false\n      }\n      if (filters.averageCookTime !== undefined && station.averageCookTime > filters.averageCookTime) {\n        return false\n      }\n      return true\n    })\n  }\n}\n\n/**\n * Station View Management Functions\n */\nexport const stationViewUtils = {\n  /**\n   * Get station view by ID\n   */\n  getStationView: (id: string, views: StationViewConfig[] = DEFAULT_STATION_VIEWS): StationViewConfig | undefined => {\n    return views.find(view => view.id === id)\n  },\n\n  /**\n   * Create custom station view\n   */\n  createStationView: (config: Partial<StationViewConfig>): StationViewConfig => {\n    return {\n      id: config.id || `custom-${Date.now()}`,\n      name: config.name || 'Custom View',\n      stations: config.stations || ['expo'],\n      columns: config.columns || 1,\n      showTimer: config.showTimer ?? true,\n      showCustomer: config.showCustomer ?? false,\n      showServer: config.showServer ?? false,\n      showTable: config.showTable ?? true,\n      showSource: config.showSource ?? false,\n      showAllergies: config.showAllergies ?? true,\n      sortBy: config.sortBy || 'time',\n      maxTicketsPerColumn: config.maxTicketsPerColumn || 10,\n      autoScroll: config.autoScroll ?? true,\n      soundAlerts: config.soundAlerts ?? true,\n      colorCoding: config.colorCoding ?? true\n    }\n  },\n\n  /**\n   * Validate station view configuration\n   */\n  validateStationView: (view: Partial<StationViewConfig>): string[] => {\n    const errors: string[] = []\n\n    if (!view.id) errors.push('View ID is required')\n    if (!view.name) errors.push('View name is required')\n    if (!view.stations || view.stations.length === 0) {\n      errors.push('At least one station must be selected')\n    }\n    if (typeof view.columns !== 'number' || view.columns < 1 || view.columns > 8) {\n      errors.push('Columns must be between 1 and 8')\n    }\n    if (typeof view.maxTicketsPerColumn !== 'number' || view.maxTicketsPerColumn < 1) {\n      errors.push('Max tickets per column must be a positive number')\n    }\n\n    return errors\n  }\n}\n\n/**\n * Export station configurations and utilities\n */\nexport const stationConfig = {\n  stations: DEFAULT_STATIONS,\n  views: DEFAULT_STATION_VIEWS,\n  routing: {\n    items: ITEM_STATION_ROUTING,\n    categories: CATEGORY_STATION_ROUTING\n  },\n  utils: stationUtils,\n  viewUtils: stationViewUtils\n}","/**\n * KDS Header Component\n * \n * Main navigation and control header for the Kitchen Display System:\n * - Station navigation tabs\n * - Real-time metrics display\n * - System status indicators\n * - Quick action controls\n * - Settings and view options\n */\n\n'use client'\n\nimport { useState, useEffect } from 'react'\nimport {\n  KdsMetrics,\n  StationViewConfig,\n  StationId,\n  KitchenStation\n} from '../../lib/kds/types'\nimport { timeUtils, cn } from '../../lib/kds/utils'\nimport { DEFAULT_STATIONS } from '../../lib/kds/stations'\n\ninterface KdsHeaderProps {\n  currentStation?: StationId\n  currentView?: string\n  stationViews: StationViewConfig[]\n  metrics: KdsMetrics\n  stations?: Record<StationId, KitchenStation>\n  onStationChange: (stationId: StationId) => void\n  onViewChange: (viewId: string) => void\n  onSettingsOpen: () => void\n  onAllDayToggle?: () => void\n  onRefresh?: () => void\n  className?: string\n  showMetrics?: boolean\n  showClock?: boolean\n  compactMode?: boolean\n}\n\nexport function KdsHeader({\n  currentStation,\n  currentView,\n  stationViews,\n  metrics,\n  stations = DEFAULT_STATIONS,\n  onStationChange,\n  onViewChange,\n  onSettingsOpen,\n  onAllDayToggle,\n  onRefresh,\n  className,\n  showMetrics = true,\n  showClock = true,\n  compactMode = false\n}: KdsHeaderProps) {\n  const [currentTime, setCurrentTime] = useState(new Date())\n  const [connectionStatus, setConnectionStatus] = useState<'connected' | 'disconnected' | 'reconnecting'>('connected')\n\n  // Update clock every second\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentTime(new Date())\n    }, 1000)\n    return () => clearInterval(interval)\n  }, [])\n\n  // Simulate connection status changes (in real app, this would come from WebSocket)\n  useEffect(() => {\n    const interval = setInterval(() => {\n      // Randomly simulate connection issues for demo\n      const shouldDisconnect = Math.random() < 0.05 // 5% chance\n      if (shouldDisconnect && connectionStatus === 'connected') {\n        setConnectionStatus('disconnected')\n        setTimeout(() => setConnectionStatus('reconnecting'), 2000)\n        setTimeout(() => setConnectionStatus('connected'), 5000)\n      }\n    }, 30000) // Check every 30 seconds\n\n    return () => clearInterval(interval)\n  }, [connectionStatus])\n\n  const activeStations = Object.values(stations).filter(s => s.isActive)\n  const currentStationData = currentStation ? stations[currentStation] : null\n\n  return (\n    <header\n      className={cn(\n        'kds-header bg-gray-900 border-b-2 border-gray-700',\n        'flex items-center justify-between px-6 py-4',\n        compactMode ? 'h-16' : 'h-20',\n        className\n      )}\n      role=\"banner\"\n    >\n      {/* Left Section - Logo & Title */}\n      <div className=\"flex items-center gap-6\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"text-2xl\" role=\"img\" aria-label=\"Kitchen Display System\">\n            🍽️\n          </div>\n          <div>\n            <h1 className=\"text-xl font-bold text-white kds-text-high-contrast\">\n              Kitchen Display\n            </h1>\n            {!compactMode && (\n              <p className=\"text-sm text-gray-400\">\n                {currentStationData ? currentStationData.displayName : 'All Stations'}\n              </p>\n            )}\n          </div>\n        </div>\n\n        {/* Quick Metrics */}\n        {showMetrics && !compactMode && (\n          <div className=\"flex items-center gap-4 pl-6 border-l border-gray-700\">\n            <MetricCard\n              label=\"Active\"\n              value={metrics.totalActiveTickets}\n              color=\"text-blue-400\"\n            />\n            <MetricCard\n              label=\"Avg Time\"\n              value={`${Math.round(metrics.averageTicketTime)}m`}\n              color=\"text-green-400\"\n            />\n            <MetricCard\n              label=\"Longest\"\n              value={`${Math.round(metrics.longestWaitTime)}m`}\n              color={metrics.longestWaitTime > 20 ? 'text-red-400' : 'text-yellow-400'}\n            />\n          </div>\n        )}\n      </div>\n\n      {/* Center Section - Station/View Navigation */}\n      <div className=\"flex items-center gap-2\">\n        {/* Station Tabs */}\n        <div className=\"flex items-center gap-1\" role=\"tablist\" aria-label=\"Kitchen stations\">\n          {activeStations.map((station) => (\n            <StationTab\n              key={station.id}\n              station={station}\n              isActive={currentStation === station.id}\n              ticketCount={metrics.stationMetrics.find(m => m.stationId === station.id)?.pendingOrders || 0}\n              onClick={() => onStationChange(station.id)}\n              compact={compactMode}\n            />\n          ))}\n          \n          {/* All Stations View */}\n          <button\n            onClick={() => onViewChange('all-stations')}\n            className={cn(\n              'kds-button px-4 py-2 rounded-lg font-medium transition-all',\n              currentView === 'all-stations'\n                ? 'bg-blue-600 text-white'\n                : 'bg-gray-800 text-gray-300 hover:bg-gray-700'\n            )}\n            role=\"tab\"\n            aria-selected={currentView === 'all-stations'}\n            aria-label=\"All stations view\"\n          >\n            All\n          </button>\n        </div>\n\n        {/* View Selector */}\n        {stationViews.length > 1 && (\n          <div className=\"ml-4\">\n            <select\n              value={currentView || ''}\n              onChange={(e) => onViewChange(e.target.value)}\n              className=\"bg-gray-800 border border-gray-600 rounded px-3 py-2 text-sm text-white focus:ring-2 focus:ring-blue-500\"\n              aria-label=\"Select view configuration\"\n            >\n              {stationViews.map((view) => (\n                <option key={view.id} value={view.id}>\n                  {view.name}\n                </option>\n              ))}\n            </select>\n          </div>\n        )}\n      </div>\n\n      {/* Right Section - Status & Controls */}\n      <div className=\"flex items-center gap-4\">\n        {/* Connection Status */}\n        <ConnectionIndicator status={connectionStatus} compact={compactMode} />\n\n        {/* System Time */}\n        {showClock && (\n          <div className=\"text-right\">\n            <div className=\"text-lg font-mono font-bold text-white\">\n              {timeUtils.formatTime(currentTime, false)}\n            </div>\n            {!compactMode && (\n              <div className=\"text-xs text-gray-400\">\n                {currentTime.toLocaleDateString()}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"flex items-center gap-2 pl-4 border-l border-gray-700\">\n          {/* All Day View Toggle */}\n          {onAllDayToggle && (\n            <ActionButton\n              icon=\"📊\"\n              label=\"All Day\"\n              onClick={onAllDayToggle}\n              compact={compactMode}\n            />\n          )}\n\n          {/* Refresh */}\n          {onRefresh && (\n            <ActionButton\n              icon=\"🔄\"\n              label=\"Refresh\"\n              onClick={onRefresh}\n              compact={compactMode}\n            />\n          )}\n\n          {/* Settings */}\n          <ActionButton\n            icon=\"⚙️\"\n            label=\"Settings\"\n            onClick={onSettingsOpen}\n            compact={compactMode}\n          />\n        </div>\n      </div>\n    </header>\n  )\n}\n\n/**\n * Station Tab Component\n */\nfunction StationTab({\n  station,\n  isActive,\n  ticketCount,\n  onClick,\n  compact = false\n}: {\n  station: KitchenStation\n  isActive: boolean\n  ticketCount: number\n  onClick: () => void\n  compact?: boolean\n}) {\n  const isOverCapacity = ticketCount > station.maxCapacity\n  const loadPercentage = Math.round((ticketCount / station.maxCapacity) * 100)\n\n  return (\n    <button\n      onClick={onClick}\n      className={cn(\n        'kds-button relative flex flex-col items-center gap-1 px-4 py-2 rounded-lg transition-all',\n        'focus:outline-none focus:ring-2 focus:ring-blue-500',\n        isActive\n          ? 'bg-blue-600 text-white'\n          : 'bg-gray-800 text-gray-300 hover:bg-gray-700',\n        isOverCapacity && 'ring-2 ring-red-500',\n        compact ? 'px-3 py-1' : 'px-4 py-2'\n      )}\n      role=\"tab\"\n      aria-selected={isActive}\n      aria-label={`${station.displayName} station - ${ticketCount} orders`}\n      style={{\n        borderBottom: isActive ? `3px solid ${station.color}` : 'none'\n      }}\n    >\n      {/* Station Icon/Name */}\n      <div className=\"flex items-center gap-2\">\n        <span className={compact ? 'text-sm' : 'text-base'}>\n          {station.icon}\n        </span>\n        <span className={cn(\n          'font-medium',\n          compact ? 'text-sm' : 'text-base'\n        )}>\n          {compact ? station.name.substring(0, 4) : station.displayName}\n        </span>\n      </div>\n\n      {/* Ticket Count Badge */}\n      {ticketCount > 0 && (\n        <div\n          className={cn(\n            'absolute -top-2 -right-2 min-w-[1.5rem] h-6 rounded-full flex items-center justify-center text-xs font-bold',\n            isOverCapacity\n              ? 'bg-red-500 text-white animate-pulse'\n              : ticketCount > station.maxCapacity * 0.8\n              ? 'bg-yellow-500 text-black'\n              : 'bg-green-500 text-white'\n          )}\n        >\n          {ticketCount > 99 ? '99+' : ticketCount}\n        </div>\n      )}\n\n      {/* Capacity Indicator */}\n      {!compact && (\n        <div className=\"w-full h-1 bg-gray-700 rounded-full overflow-hidden\">\n          <div\n            className={cn(\n              'h-full transition-all duration-500',\n              loadPercentage > 100 ? 'bg-red-500' :\n              loadPercentage > 80 ? 'bg-yellow-500' :\n              'bg-green-500'\n            )}\n            style={{ width: `${Math.min(100, loadPercentage)}%` }}\n          />\n        </div>\n      )}\n    </button>\n  )\n}\n\n/**\n * Connection Status Indicator\n */\nfunction ConnectionIndicator({\n  status,\n  compact = false\n}: {\n  status: 'connected' | 'disconnected' | 'reconnecting'\n  compact?: boolean\n}) {\n  const statusConfig = {\n    connected: {\n      color: 'bg-green-500',\n      text: 'Connected',\n      icon: '🟢'\n    },\n    disconnected: {\n      color: 'bg-red-500 animate-pulse',\n      text: 'Disconnected',\n      icon: '🔴'\n    },\n    reconnecting: {\n      color: 'bg-yellow-500 animate-pulse',\n      text: 'Reconnecting...',\n      icon: '🟡'\n    }\n  }\n\n  const config = statusConfig[status]\n\n  return (\n    <div className=\"flex items-center gap-2\">\n      <div className={cn('w-2 h-2 rounded-full', config.color)} />\n      {!compact && (\n        <span className={cn(\n          'text-xs',\n          status === 'connected' ? 'text-green-400' :\n          status === 'disconnected' ? 'text-red-400' :\n          'text-yellow-400'\n        )}>\n          {config.text}\n        </span>\n      )}\n    </div>\n  )\n}\n\n/**\n * Metric Card Component\n */\nfunction MetricCard({\n  label,\n  value,\n  color = 'text-white'\n}: {\n  label: string\n  value: string | number\n  color?: string\n}) {\n  return (\n    <div className=\"text-center\">\n      <div className={cn('text-lg font-bold', color)}>\n        {value}\n      </div>\n      <div className=\"text-xs text-gray-400 uppercase tracking-wide\">\n        {label}\n      </div>\n    </div>\n  )\n}\n\n/**\n * Action Button Component\n */\nfunction ActionButton({\n  icon,\n  label,\n  onClick,\n  compact = false,\n  disabled = false\n}: {\n  icon: string\n  label: string\n  onClick: () => void\n  compact?: boolean\n  disabled?: boolean\n}) {\n  return (\n    <button\n      onClick={onClick}\n      disabled={disabled}\n      className={cn(\n        'kds-button flex flex-col items-center gap-1 px-3 py-2 rounded-lg',\n        'bg-gray-800 text-gray-300 hover:bg-gray-700',\n        'focus:outline-none focus:ring-2 focus:ring-blue-500',\n        'disabled:opacity-50 disabled:cursor-not-allowed',\n        'transition-all duration-150',\n        compact && 'px-2 py-1'\n      )}\n      title={label}\n      aria-label={label}\n    >\n      <span className={compact ? 'text-sm' : 'text-base'}>\n        {icon}\n      </span>\n      {!compact && (\n        <span className=\"text-xs font-medium\">\n          {label}\n        </span>\n      )}\n    </button>\n  )\n}\n\n/**\n * Alert Banner Component\n * Shows system alerts and notifications\n */\ninterface AlertBannerProps {\n  alerts: Array<{\n    id: string\n    type: 'info' | 'warning' | 'error'\n    message: string\n    dismissible?: boolean\n  }>\n  onDismiss?: (id: string) => void\n  className?: string\n}\n\nexport function AlertBanner({ alerts, onDismiss, className }: AlertBannerProps) {\n  if (alerts.length === 0) return null\n\n  return (\n    <div className={cn('kds-alert-banner space-y-2', className)}>\n      {alerts.map((alert) => (\n        <div\n          key={alert.id}\n          className={cn(\n            'flex items-center justify-between px-4 py-2 rounded-lg',\n            alert.type === 'error' && 'bg-red-900 border border-red-500 text-red-100',\n            alert.type === 'warning' && 'bg-yellow-900 border border-yellow-500 text-yellow-100',\n            alert.type === 'info' && 'bg-blue-900 border border-blue-500 text-blue-100'\n          )}\n          role=\"alert\"\n        >\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-sm\">\n              {alert.type === 'error' && '❌'}\n              {alert.type === 'warning' && '⚠️'}\n              {alert.type === 'info' && 'ℹ️'}\n            </span>\n            <span className=\"text-sm font-medium\">\n              {alert.message}\n            </span>\n          </div>\n          \n          {alert.dismissible && onDismiss && (\n            <button\n              onClick={() => onDismiss(alert.id)}\n              className=\"text-xs hover:opacity-75 ml-4\"\n              aria-label=\"Dismiss alert\"\n            >\n              ✕\n            </button>\n          )}\n        </div>\n      ))}\n    </div>\n  )\n}\n\n/**\n * Compact Header Variant\n * Minimal header for smaller screens\n */\ninterface CompactHeaderProps {\n  currentView: string\n  stationViews: StationViewConfig[]\n  metrics: KdsMetrics\n  onViewChange: (viewId: string) => void\n  onMenuToggle: () => void\n  className?: string\n}\n\nexport function CompactHeader({\n  currentView,\n  stationViews,\n  metrics,\n  onViewChange,\n  onMenuToggle,\n  className\n}: CompactHeaderProps) {\n  return (\n    <header\n      className={cn(\n        'kds-compact-header bg-gray-900 border-b border-gray-700',\n        'flex items-center justify-between px-4 py-3 h-14',\n        className\n      )}\n    >\n      {/* Menu Toggle */}\n      <button\n        onClick={onMenuToggle}\n        className=\"kds-button p-2 rounded-lg bg-gray-800 hover:bg-gray-700\"\n        aria-label=\"Toggle menu\"\n      >\n        ☰\n      </button>\n\n      {/* Current View */}\n      <div className=\"flex items-center gap-2\">\n        <select\n          value={currentView}\n          onChange={(e) => onViewChange(e.target.value)}\n          className=\"bg-gray-800 border border-gray-600 rounded px-2 py-1 text-sm text-white\"\n        >\n          {stationViews.map((view) => (\n            <option key={view.id} value={view.id}>\n              {view.name}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"flex items-center gap-3 text-xs\">\n        <span className=\"text-blue-400\">{metrics.totalActiveTickets}</span>\n        <span className=\"text-gray-400\">•</span>\n        <span className=\"text-green-400\">{Math.round(metrics.averageTicketTime)}m</span>\n      </div>\n    </header>\n  )\n}\n\nexport default KdsHeader","/**\n * KDS All Day View Component\n * \n * Displays aggregated view of all items needed throughout the day:\n * - Total quantities needed per item\n * - Running totals and completion status\n * - Station-specific breakdowns\n * - Prep planning and scheduling\n */\n\n'use client'\n\nimport { useState, useEffect } from 'react'\nimport {\n  AllDayView,\n  AllDayItem,\n  StationId,\n  KitchenStation\n} from '../../lib/kds/types'\nimport { allDayUtils, formatUtils, cn } from '../../lib/kds/utils'\nimport { DEFAULT_STATIONS } from '../../lib/kds/stations'\n\ninterface AllDayViewProps {\n  allDayView: AllDayView\n  stations?: Record<StationId, KitchenStation>\n  onRefresh: () => void\n  onItemClick?: (item: AllDayItem) => void\n  className?: string\n  groupByStation?: boolean\n  showCompleted?: boolean\n  showModifiers?: boolean\n  sortBy?: 'name' | 'quantity' | 'station' | 'completion'\n}\n\nexport function AllDayViewComponent({\n  allDayView,\n  stations = DEFAULT_STATIONS,\n  onRefresh,\n  onItemClick,\n  className,\n  groupByStation = true,\n  showCompleted = true,\n  showModifiers = true,\n  sortBy = 'quantity'\n}: AllDayViewProps) {\n  const [searchTerm, setSearchTerm] = useState('')\n  const [selectedStation, setSelectedStation] = useState<StationId | 'all'>('all')\n  const [viewMode, setViewMode] = useState<'grid' | 'table'>('grid')\n\n  // Filter items based on search and station selection\n  const filteredItems = allDayView.items.filter(item => {\n    if (!showCompleted && item.pendingQuantity === 0) return false\n    if (selectedStation !== 'all' && item.station !== selectedStation) return false\n    if (searchTerm && !item.name.toLowerCase().includes(searchTerm.toLowerCase())) return false\n    return true\n  })\n\n  // Sort items\n  const sortedItems = [...filteredItems].sort((a, b) => {\n    switch (sortBy) {\n      case 'name':\n        return a.name.localeCompare(b.name)\n      case 'quantity':\n        return b.totalQuantity - a.totalQuantity\n      case 'station':\n        return a.station.localeCompare(b.station)\n      case 'completion':\n        const aCompletion = allDayUtils.getCompletionPercentage(a)\n        const bCompletion = allDayUtils.getCompletionPercentage(b)\n        return aCompletion - bCompletion\n      default:\n        return 0\n    }\n  })\n\n  // Group items by station if requested\n  const groupedItems = groupByStation\n    ? sortedItems.reduce((groups, item) => {\n        if (!groups[item.station]) {\n          groups[item.station] = []\n        }\n        groups[item.station].push(item)\n        return groups\n      }, {} as Record<StationId, AllDayItem[]>)\n    : { all: sortedItems }\n\n  // Calculate totals\n  const totals = {\n    totalItems: allDayView.items.length,\n    totalQuantity: allDayView.items.reduce((sum, item) => sum + item.totalQuantity, 0),\n    completedQuantity: allDayView.items.reduce((sum, item) => sum + item.completedQuantity, 0),\n    pendingQuantity: allDayView.items.reduce((sum, item) => sum + item.pendingQuantity, 0)\n  }\n\n  const overallCompletion = totals.totalQuantity > 0 \n    ? Math.round((totals.completedQuantity / totals.totalQuantity) * 100)\n    : 0\n\n  return (\n    <div className={cn('kds-all-day-view h-full flex flex-col', className)}>\n      {/* Header */}\n      <div className=\"bg-gray-900 border-b border-gray-700 p-4\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-white kds-text-high-contrast\">\n              All Day View\n            </h2>\n            <p className=\"text-gray-400\">\n              Total orders: {allDayView.totalOrders} • Completed: {allDayView.completedOrders}\n            </p>\n          </div>\n          \n          <div className=\"flex items-center gap-3\">\n            <div className=\"text-right\">\n              <div className=\"text-lg font-bold text-white\">\n                {overallCompletion}% Complete\n              </div>\n              <div className=\"text-sm text-gray-400\">\n                {totals.completedQuantity} of {totals.totalQuantity} items\n              </div>\n            </div>\n            <button\n              onClick={onRefresh}\n              className=\"kds-button bg-blue-600 hover:bg-blue-500 text-white px-4 py-2 rounded-lg\"\n            >\n              🔄 Refresh\n            </button>\n          </div>\n        </div>\n\n        {/* Controls */}\n        <div className=\"flex items-center gap-4 flex-wrap\">\n          {/* Search */}\n          <div className=\"flex-1 min-w-[200px]\">\n            <input\n              type=\"text\"\n              placeholder=\"Search items...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-full bg-gray-800 border border-gray-600 rounded px-3 py-2 text-white placeholder-gray-400\"\n            />\n          </div>\n\n          {/* Station Filter */}\n          <select\n            value={selectedStation}\n            onChange={(e) => setSelectedStation(e.target.value as StationId | 'all')}\n            className=\"bg-gray-800 border border-gray-600 rounded px-3 py-2 text-white\"\n          >\n            <option value=\"all\">All Stations</option>\n            {Object.values(stations).map((station) => (\n              <option key={station.id} value={station.id}>\n                {station.displayName}\n              </option>\n            ))}\n          </select>\n\n          {/* Sort Options */}\n          <select\n            value={sortBy}\n            onChange={(e) => setSortBy(e.target.value as any)}\n            className=\"bg-gray-800 border border-gray-600 rounded px-3 py-2 text-white\"\n          >\n            <option value=\"quantity\">By Quantity</option>\n            <option value=\"name\">By Name</option>\n            <option value=\"station\">By Station</option>\n            <option value=\"completion\">By Completion</option>\n          </select>\n\n          {/* View Mode Toggle */}\n          <div className=\"flex items-center border border-gray-600 rounded overflow-hidden\">\n            <button\n              onClick={() => setViewMode('grid')}\n              className={cn(\n                'px-3 py-2 text-sm font-medium',\n                viewMode === 'grid' \n                  ? 'bg-blue-600 text-white' \n                  : 'bg-gray-800 text-gray-300 hover:bg-gray-700'\n              )}\n            >\n              Grid\n            </button>\n            <button\n              onClick={() => setViewMode('table')}\n              className={cn(\n                'px-3 py-2 text-sm font-medium',\n                viewMode === 'table' \n                  ? 'bg-blue-600 text-white' \n                  : 'bg-gray-800 text-gray-300 hover:bg-gray-700'\n              )}\n            >\n              Table\n            </button>\n          </div>\n\n          {/* Options */}\n          <label className=\"flex items-center gap-2 text-sm text-gray-300\">\n            <input\n              type=\"checkbox\"\n              checked={showCompleted}\n              onChange={(e) => setShowCompleted(e.target.checked)}\n              className=\"rounded\"\n            />\n            Show Completed\n          </label>\n        </div>\n      </div>\n\n      {/* Progress Bar */}\n      <div className=\"bg-gray-800 p-3 border-b border-gray-700\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"flex-1 bg-gray-700 rounded-full h-3\">\n            <div\n              className=\"bg-gradient-to-r from-blue-500 to-green-500 h-full rounded-full transition-all duration-500\"\n              style={{ width: `${overallCompletion}%` }}\n            />\n          </div>\n          <div className=\"text-sm text-gray-300 min-w-[120px] text-right\">\n            {totals.completedQuantity} / {totals.totalQuantity} items\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-y-auto\">\n        {viewMode === 'grid' ? (\n          <GridView\n            groupedItems={groupedItems}\n            stations={stations}\n            showModifiers={showModifiers}\n            onItemClick={onItemClick}\n          />\n        ) : (\n          <TableView\n            items={sortedItems}\n            stations={stations}\n            showModifiers={showModifiers}\n            onItemClick={onItemClick}\n          />\n        )}\n      </div>\n\n      {/* Footer */}\n      <div className=\"bg-gray-900 border-t border-gray-700 p-3 flex items-center justify-between text-sm text-gray-400\">\n        <div>\n          Showing {sortedItems.length} of {allDayView.items.length} items\n        </div>\n        <div>\n          Last updated: {allDayView.lastUpdated.toLocaleTimeString()}\n        </div>\n      </div>\n    </div>\n  )\n}\n\n/**\n * Grid View Component\n */\nfunction GridView({\n  groupedItems,\n  stations,\n  showModifiers,\n  onItemClick\n}: {\n  groupedItems: Record<string, AllDayItem[]>\n  stations: Record<StationId, KitchenStation>\n  showModifiers: boolean\n  onItemClick?: (item: AllDayItem) => void\n}) {\n  return (\n    <div className=\"p-4 space-y-6\">\n      {Object.entries(groupedItems).map(([stationId, items]) => {\n        const station = stations[stationId as StationId]\n        \n        return (\n          <div key={stationId} className=\"space-y-3\">\n            {/* Station Header */}\n            {station && stationId !== 'all' && (\n              <div className=\"flex items-center gap-2 pb-2 border-b border-gray-700\">\n                <div\n                  className=\"w-4 h-4 rounded\"\n                  style={{ backgroundColor: station.color }}\n                />\n                <h3 className=\"text-lg font-bold text-white\">\n                  {station.displayName}\n                </h3>\n                <div className=\"text-sm text-gray-400\">\n                  ({items.length} items)\n                </div>\n              </div>\n            )}\n\n            {/* Items Grid */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n              {items.map((item) => (\n                <AllDayItemCard\n                  key={`${item.itemId}-${item.station}`}\n                  item={item}\n                  station={stations[item.station]}\n                  showModifiers={showModifiers}\n                  onClick={() => onItemClick?.(item)}\n                />\n              ))}\n            </div>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\n/**\n * Table View Component\n */\nfunction TableView({\n  items,\n  stations,\n  showModifiers,\n  onItemClick\n}: {\n  items: AllDayItem[]\n  stations: Record<StationId, KitchenStation>\n  showModifiers: boolean\n  onItemClick?: (item: AllDayItem) => void\n}) {\n  return (\n    <div className=\"overflow-x-auto\">\n      <table className=\"w-full text-sm text-white\">\n        <thead className=\"bg-gray-800 border-b border-gray-700\">\n          <tr>\n            <th className=\"text-left p-3 font-medium\">Item</th>\n            <th className=\"text-left p-3 font-medium\">Station</th>\n            <th className=\"text-center p-3 font-medium\">Total</th>\n            <th className=\"text-center p-3 font-medium\">Completed</th>\n            <th className=\"text-center p-3 font-medium\">Pending</th>\n            <th className=\"text-center p-3 font-medium\">Progress</th>\n            {showModifiers && (\n              <th className=\"text-left p-3 font-medium\">Modifiers</th>\n            )}\n            <th className=\"text-left p-3 font-medium\">Allergens</th>\n          </tr>\n        </thead>\n        <tbody className=\"divide-y divide-gray-700\">\n          {items.map((item) => {\n            const station = stations[item.station]\n            const completion = allDayUtils.getCompletionPercentage(item)\n            \n            return (\n              <tr\n                key={`${item.itemId}-${item.station}`}\n                className={cn(\n                  'hover:bg-gray-800 transition-colors',\n                  onItemClick && 'cursor-pointer'\n                )}\n                onClick={() => onItemClick?.(item)}\n              >\n                <td className=\"p-3\">\n                  <div className=\"font-medium\">{item.name}</div>\n                  <div className=\"text-xs text-gray-400\">\n                    Avg time: {item.averageCookTime}min\n                  </div>\n                </td>\n                <td className=\"p-3\">\n                  <div className=\"flex items-center gap-2\">\n                    <div\n                      className=\"w-3 h-3 rounded\"\n                      style={{ backgroundColor: station?.color || '#6b7280' }}\n                    />\n                    <span>{station?.displayName || item.station}</span>\n                  </div>\n                </td>\n                <td className=\"p-3 text-center font-bold\">\n                  {item.totalQuantity}\n                </td>\n                <td className=\"p-3 text-center text-green-400\">\n                  {item.completedQuantity}\n                </td>\n                <td className=\"p-3 text-center text-blue-400\">\n                  {item.pendingQuantity}\n                </td>\n                <td className=\"p-3\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"flex-1 bg-gray-700 rounded-full h-2\">\n                      <div\n                        className={cn(\n                          'h-full rounded-full transition-all duration-300',\n                          completion === 100 ? 'bg-green-500' :\n                          completion >= 50 ? 'bg-blue-500' :\n                          'bg-gray-400'\n                        )}\n                        style={{ width: `${completion}%` }}\n                      />\n                    </div>\n                    <span className=\"text-xs text-gray-400 min-w-[3rem] text-right\">\n                      {completion}%\n                    </span>\n                  </div>\n                </td>\n                {showModifiers && (\n                  <td className=\"p-3 text-xs text-gray-400\">\n                    {Object.entries(item.modifiers).length > 0 ? (\n                      <div className=\"max-w-[200px] truncate\">\n                        {Object.entries(item.modifiers)\n                          .map(([name, qty]) => `${name} (${qty})`)\n                          .join(', ')}\n                      </div>\n                    ) : (\n                      <span className=\"text-gray-500\">None</span>\n                    )}\n                  </td>\n                )}\n                <td className=\"p-3 text-xs\">\n                  {item.allergens.length > 0 ? (\n                    <div className=\"flex flex-wrap gap-1\">\n                      {item.allergens.map((allergen) => (\n                        <span\n                          key={allergen}\n                          className=\"bg-red-900 text-red-200 px-1 py-0.5 rounded text-xs font-medium\"\n                        >\n                          {allergen}\n                        </span>\n                      ))}\n                    </div>\n                  ) : (\n                    <span className=\"text-gray-500\">None</span>\n                  )}\n                </td>\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\n/**\n * All Day Item Card Component\n */\nfunction AllDayItemCard({\n  item,\n  station,\n  showModifiers,\n  onClick\n}: {\n  item: AllDayItem\n  station?: KitchenStation\n  showModifiers: boolean\n  onClick?: () => void\n}) {\n  const completion = allDayUtils.getCompletionPercentage(item)\n  const isCompleted = completion === 100\n\n  return (\n    <div\n      className={cn(\n        'bg-gray-900 border-2 border-gray-700 rounded-lg p-4 space-y-3',\n        'transition-all duration-200',\n        onClick && 'cursor-pointer hover:border-gray-600',\n        isCompleted && 'opacity-75 border-green-700'\n      )}\n      onClick={onClick}\n    >\n      {/* Header */}\n      <div className=\"flex items-start justify-between\">\n        <div className=\"flex-1\">\n          <h4 className=\"font-bold text-white text-lg kds-text-kitchen\">\n            {item.name}\n          </h4>\n          <div className=\"flex items-center gap-2 mt-1\">\n            {station && (\n              <>\n                <div\n                  className=\"w-3 h-3 rounded\"\n                  style={{ backgroundColor: station.color }}\n                />\n                <span className=\"text-sm text-gray-400\">\n                  {station.displayName}\n                </span>\n              </>\n            )}\n          </div>\n        </div>\n        \n        {isCompleted && (\n          <div className=\"text-green-400 text-xl\">✓</div>\n        )}\n      </div>\n\n      {/* Quantities */}\n      <div className=\"grid grid-cols-3 gap-2 text-center\">\n        <div>\n          <div className=\"text-2xl font-bold text-white\">\n            {item.totalQuantity}\n          </div>\n          <div className=\"text-xs text-gray-400 uppercase\">Total</div>\n        </div>\n        <div>\n          <div className=\"text-2xl font-bold text-green-400\">\n            {item.completedQuantity}\n          </div>\n          <div className=\"text-xs text-gray-400 uppercase\">Done</div>\n        </div>\n        <div>\n          <div className=\"text-2xl font-bold text-blue-400\">\n            {item.pendingQuantity}\n          </div>\n          <div className=\"text-xs text-gray-400 uppercase\">Pending</div>\n        </div>\n      </div>\n\n      {/* Progress Bar */}\n      <div className=\"space-y-2\">\n        <div className=\"flex items-center justify-between text-sm\">\n          <span className=\"text-gray-400\">Progress</span>\n          <span className=\"text-white font-medium\">{completion}%</span>\n        </div>\n        <div className=\"bg-gray-700 rounded-full h-2\">\n          <div\n            className={cn(\n              'h-full rounded-full transition-all duration-500',\n              completion === 100 ? 'bg-green-500' :\n              completion >= 50 ? 'bg-blue-500' :\n              'bg-gray-400'\n            )}\n            style={{ width: `${completion}%` }}\n          />\n        </div>\n      </div>\n\n      {/* Modifiers */}\n      {showModifiers && Object.keys(item.modifiers).length > 0 && (\n        <div className=\"pt-2 border-t border-gray-700\">\n          <div className=\"text-xs text-gray-400 mb-1 uppercase\">Modifiers:</div>\n          <div className=\"flex flex-wrap gap-1\">\n            {Object.entries(item.modifiers).map(([name, qty]) => (\n              <span\n                key={name}\n                className=\"bg-gray-800 text-gray-300 px-2 py-1 rounded text-xs\"\n              >\n                {name} ({qty})\n              </span>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Allergens */}\n      {item.allergens.length > 0 && (\n        <div className=\"pt-2 border-t border-gray-700\">\n          <div className=\"text-xs text-red-300 mb-1 uppercase font-bold\">⚠️ Allergens:</div>\n          <div className=\"flex flex-wrap gap-1\">\n            {item.allergens.map((allergen) => (\n              <span\n                key={allergen}\n                className=\"bg-red-900 text-red-200 px-2 py-1 rounded text-xs font-medium\"\n              >\n                {allergen}\n              </span>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Footer */}\n      <div className=\"pt-2 border-t border-gray-700 text-xs text-gray-400 flex justify-between\">\n        <span>Cook time: {item.averageCookTime}min</span>\n        <span>\n          {item.pendingQuantity > 0 ? \n            `${item.pendingQuantity} to go` : \n            'All complete'\n          }\n        </span>\n      </div>\n    </div>\n  )\n}\n\n/**\n * All Day Summary Component\n * Quick overview of all day totals\n */\ninterface AllDaySummaryProps {\n  allDayView: AllDayView\n  stations: Record<StationId, KitchenStation>\n  className?: string\n}\n\nexport function AllDaySummary({ allDayView, stations, className }: AllDaySummaryProps) {\n  const totals = {\n    totalItems: allDayView.items.length,\n    totalQuantity: allDayView.items.reduce((sum, item) => sum + item.totalQuantity, 0),\n    completedQuantity: allDayView.items.reduce((sum, item) => sum + item.completedQuantity, 0),\n    pendingQuantity: allDayView.items.reduce((sum, item) => sum + item.pendingQuantity, 0)\n  }\n\n  const completion = totals.totalQuantity > 0 \n    ? Math.round((totals.completedQuantity / totals.totalQuantity) * 100)\n    : 0\n\n  const stationBreakdown = Object.values(stations).map(station => ({\n    station,\n    items: allDayView.items.filter(item => item.station === station.id),\n    totalQty: allDayView.items\n      .filter(item => item.station === station.id)\n      .reduce((sum, item) => sum + item.totalQuantity, 0),\n    pendingQty: allDayView.items\n      .filter(item => item.station === station.id)\n      .reduce((sum, item) => sum + item.pendingQuantity, 0)\n  })).filter(s => s.items.length > 0)\n\n  return (\n    <div className={cn('bg-gray-900 border border-gray-700 rounded-lg p-6', className)}>\n      <h3 className=\"text-xl font-bold text-white mb-4\">All Day Summary</h3>\n      \n      {/* Overall Stats */}\n      <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n        <div className=\"text-center\">\n          <div className=\"text-2xl font-bold text-blue-400\">{totals.totalItems}</div>\n          <div className=\"text-sm text-gray-400\">Unique Items</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"text-2xl font-bold text-white\">{totals.totalQuantity}</div>\n          <div className=\"text-sm text-gray-400\">Total Quantity</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"text-2xl font-bold text-green-400\">{totals.completedQuantity}</div>\n          <div className=\"text-sm text-gray-400\">Completed</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"text-2xl font-bold text-orange-400\">{totals.pendingQuantity}</div>\n          <div className=\"text-sm text-gray-400\">Remaining</div>\n        </div>\n      </div>\n\n      {/* Progress */}\n      <div className=\"mb-6\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <span className=\"text-sm text-gray-400\">Overall Progress</span>\n          <span className=\"text-sm font-medium text-white\">{completion}%</span>\n        </div>\n        <div className=\"bg-gray-700 rounded-full h-3\">\n          <div\n            className=\"bg-gradient-to-r from-blue-500 to-green-500 h-full rounded-full transition-all duration-500\"\n            style={{ width: `${completion}%` }}\n          />\n        </div>\n      </div>\n\n      {/* Station Breakdown */}\n      <div className=\"space-y-3\">\n        <h4 className=\"text-sm font-medium text-gray-400 uppercase\">By Station</h4>\n        {stationBreakdown.map(({ station, totalQty, pendingQty }) => (\n          <div key={station.id} className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <div\n                className=\"w-3 h-3 rounded\"\n                style={{ backgroundColor: station.color }}\n              />\n              <span className=\"text-sm text-white\">{station.displayName}</span>\n            </div>\n            <div className=\"text-sm text-gray-400\">\n              {totalQty - pendingQty}/{totalQty} ({pendingQty} pending)\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default AllDayViewComponent","/**\n * KDS Components Index\n * \n * Central export point for all Kitchen Display System components.\n * This provides a clean API for importing KDS components throughout the application.\n */\n\n// Core KDS Components\nexport { default as Ticket } from './ticket'\nexport { default as Timer, MultiTimer, AlertTimer } from './timer'\nexport { default as StationView, MultiStationView, StationPerformance } from './station-view'\nexport { default as KdsHeader, AlertBanner, CompactHeader } from './header'\nexport { default as AllDayViewComponent, AllDaySummary } from './all-day-view'\n\n// Re-export specific named exports for convenience\nexport {\n  Ticket as KdsTicket,\n  Timer as KdsTimer,\n  StationView as KdsStationView,\n  AllDayViewComponent as KdsAllDayView\n}\n\n// Export component prop types for external use\nexport type {\n  // From ticket.tsx\n  TicketProps,\n  \n  // From timer.tsx\n  TimerProps,\n  MultiTimerProps,\n  AlertTimerProps,\n  \n  // From station-view.tsx\n  StationViewProps,\n  MultiStationViewProps,\n  StationPerformanceProps,\n  \n  // From header.tsx\n  KdsHeaderProps,\n  AlertBannerProps,\n  CompactHeaderProps,\n  \n  // From all-day-view.tsx\n  AllDayViewProps,\n  AllDaySummaryProps\n} from '../types'\n\n// Component collections for easier batch imports\nexport const KdsTicketComponents = {\n  Ticket,\n  Timer,\n  MultiTimer,\n  AlertTimer\n}\n\nexport const KdsStationComponents = {\n  StationView,\n  MultiStationView,\n  StationPerformance\n}\n\nexport const KdsLayoutComponents = {\n  KdsHeader,\n  AlertBanner,\n  CompactHeader\n}\n\nexport const KdsViewComponents = {\n  AllDayViewComponent,\n  AllDaySummary\n}\n\n// All components in one collection\nexport const AllKdsComponents = {\n  ...KdsTicketComponents,\n  ...KdsStationComponents,\n  ...KdsLayoutComponents,\n  ...KdsViewComponents\n}\n\n/**\n * KDS Component Categories\n * Useful for documentation and component organization\n */\nexport const KDS_COMPONENT_CATEGORIES = {\n  TICKETS: [\n    'Ticket',\n    'Timer', \n    'MultiTimer',\n    'AlertTimer'\n  ],\n  STATIONS: [\n    'StationView',\n    'MultiStationView', \n    'StationPerformance'\n  ],\n  LAYOUT: [\n    'KdsHeader',\n    'AlertBanner',\n    'CompactHeader'\n  ],\n  VIEWS: [\n    'AllDayViewComponent',\n    'AllDaySummary'\n  ]\n} as const\n\n/**\n * Component Display Names\n * For debugging and development tools\n */\nexport const KDS_COMPONENT_NAMES = {\n  Ticket: 'KDS Ticket',\n  Timer: 'KDS Timer',\n  MultiTimer: 'KDS Multi Timer',\n  AlertTimer: 'KDS Alert Timer',\n  StationView: 'KDS Station View',\n  MultiStationView: 'KDS Multi Station View',\n  StationPerformance: 'KDS Station Performance',\n  KdsHeader: 'KDS Header',\n  AlertBanner: 'KDS Alert Banner',\n  CompactHeader: 'KDS Compact Header',\n  AllDayViewComponent: 'KDS All Day View',\n  AllDaySummary: 'KDS All Day Summary'\n} as const\n\n/**\n * Default Props for Components\n * Provides sensible defaults for KDS components\n */\nexport const KDS_DEFAULT_PROPS = {\n  Timer: {\n    showSeconds: true,\n    showTarget: true,\n    warningThreshold: 10,\n    urgentThreshold: 15,\n    size: 'medium' as const,\n    format: 'digital' as const\n  },\n  StationView: {\n    showHeader: true,\n    autoScroll: true\n  },\n  KdsHeader: {\n    showMetrics: true,\n    showClock: true,\n    compactMode: false\n  },\n  AllDayView: {\n    groupByStation: true,\n    showCompleted: true,\n    showModifiers: true,\n    sortBy: 'quantity' as const\n  }\n} as const\n\n/**\n * Component Version Information\n * Useful for debugging and compatibility checks\n */\nexport const KDS_COMPONENT_VERSION = '1.0.0'\n\nexport const KDS_COMPONENT_INFO = {\n  version: KDS_COMPONENT_VERSION,\n  buildDate: new Date().toISOString(),\n  components: Object.keys(AllKdsComponents).length,\n  categories: Object.keys(KDS_COMPONENT_CATEGORIES).length\n} as const\n\n/**\n * Utility function to check if a component is a KDS component\n */\nexport function isKdsComponent(componentName: string): boolean {\n  return componentName in AllKdsComponents\n}\n\n/**\n * Utility function to get component category\n */\nexport function getKdsComponentCategory(componentName: string): keyof typeof KDS_COMPONENT_CATEGORIES | null {\n  for (const [category, components] of Object.entries(KDS_COMPONENT_CATEGORIES)) {\n    if (components.includes(componentName as any)) {\n      return category as keyof typeof KDS_COMPONENT_CATEGORIES\n    }\n  }\n  return null\n}\n\n/**\n * Utility function to get all components in a category\n */\nexport function getKdsComponentsByCategory(category: keyof typeof KDS_COMPONENT_CATEGORIES) {\n  return KDS_COMPONENT_CATEGORIES[category]\n}\n\n/**\n * Development helper to log component information\n */\nexport function logKdsComponentInfo(): void {\n  if (process.env.NODE_ENV === 'development') {\n    console.group('KDS Components Information')\n    console.log('Version:', KDS_COMPONENT_INFO.version)\n    console.log('Build Date:', KDS_COMPONENT_INFO.buildDate)\n    console.log('Total Components:', KDS_COMPONENT_INFO.components)\n    console.log('Categories:', Object.keys(KDS_COMPONENT_CATEGORIES))\n    console.log('Available Components:', Object.keys(AllKdsComponents))\n    console.groupEnd()\n  }\n}\n\n// Initialize component info logging in development\nif (typeof window !== 'undefined' && process.env.NODE_ENV === 'development') {\n  // Only log once per session\n  const hasLogged = sessionStorage.getItem('kds-components-logged')\n  if (!hasLogged) {\n    logKdsComponentInfo()\n    sessionStorage.setItem('kds-components-logged', 'true')\n  }\n}","/**\n * Kitchen Display System (KDS) Data Layer\n * \n * This file handles data fetching, caching, and real-time updates for the KDS system.\n * It provides functions for orders, tickets, metrics, and WebSocket connections.\n */\n\nimport {\n  KdsOrder,\n  KdsTicket,\n  KdsMetrics,\n  AllDayView,\n  StationId,\n  TicketPriority,\n  OrderStatus,\n  KdsApiResponse,\n  TicketsResponse,\n  OrdersResponse,\n  KdsWebSocketMessage,\n  StationFilter,\n  KdsSettings\n} from './types'\nimport { stationUtils, DEFAULT_STATIONS } from './stations'\nimport { orderUtils, timeUtils } from './utils'\n\n/**\n * Mock data for development and testing\n */\nconst MOCK_ORDERS: KdsOrder[] = [\n  {\n    id: 'order-001',\n    orderNumber: '001',\n    displayNumber: '#001',\n    status: 'preparing',\n    priority: 'normal',\n    source: 'dine-in',\n    customer: { name: 'John Doe', phone: '555-0123' },\n    items: [\n      {\n        id: 'item-001',\n        name: 'Cheeseburger',\n        quantity: 1,\n        price: 12.99,\n        category: 'burgers',\n        station: 'grill',\n        cookTime: 8,\n        modifiers: [\n          { id: 'mod-1', name: 'No Pickles', price: 0 },\n          { id: 'mod-2', name: 'Extra Cheese', price: 1.50 }\n        ],\n        allergens: ['dairy', 'gluten']\n      },\n      {\n        id: 'item-002',\n        name: 'French Fries',\n        quantity: 1,\n        price: 4.99,\n        category: 'sides',\n        station: 'fryer',\n        cookTime: 5,\n        modifiers: [],\n        allergens: []\n      }\n    ],\n    totalAmount: 17.98,\n    tax: 1.44,\n    createdAt: new Date(Date.now() - 8 * 60000), // 8 minutes ago\n    allergenWarnings: ['dairy', 'gluten'],\n    tableNumber: '12',\n    serverName: 'Alice'\n  },\n  {\n    id: 'order-002',\n    orderNumber: '002',\n    displayNumber: '#002',\n    status: 'preparing',\n    priority: 'urgent',\n    source: 'takeout',\n    customer: { name: 'Jane Smith', phone: '555-0456' },\n    items: [\n      {\n        id: 'item-003',\n        name: 'Caesar Salad',\n        quantity: 1,\n        price: 9.99,\n        category: 'salads',\n        station: 'salad',\n        cookTime: 3,\n        modifiers: [\n          { id: 'mod-3', name: 'Add Chicken', price: 4.00 }\n        ],\n        allergens: ['dairy'],\n        specialInstructions: 'Light dressing'\n      }\n    ],\n    totalAmount: 13.99,\n    tax: 1.12,\n    createdAt: new Date(Date.now() - 12 * 60000), // 12 minutes ago\n    allergenWarnings: ['dairy'],\n    specialInstructions: 'Customer is waiting'\n  },\n  {\n    id: 'order-003',\n    orderNumber: '003',\n    displayNumber: '#003',\n    status: 'preparing',\n    priority: 'fire',\n    source: 'delivery',\n    customer: { name: 'Bob Johnson', phone: '555-0789' },\n    items: [\n      {\n        id: 'item-004',\n        name: 'Grilled Salmon',\n        quantity: 1,\n        price: 18.99,\n        category: 'entrees',\n        station: 'grill',\n        cookTime: 10,\n        modifiers: [],\n        allergens: ['fish'],\n        isRush: true\n      },\n      {\n        id: 'item-005',\n        name: 'Steamed Vegetables',\n        quantity: 1,\n        price: 5.99,\n        category: 'sides',\n        station: 'grill',\n        cookTime: 6,\n        modifiers: [],\n        allergens: []\n      }\n    ],\n    totalAmount: 24.98,\n    tax: 2.00,\n    createdAt: new Date(Date.now() - 16 * 60000), // 16 minutes ago\n    allergenWarnings: ['fish'],\n    specialInstructions: 'VIP customer - priority order'\n  }\n]\n\n/**\n * API Configuration\n */\nconst API_CONFIG = {\n  baseUrl: process.env.NEXT_PUBLIC_API_URL || '/api',\n  timeout: 10000,\n  retryAttempts: 3,\n  retryDelay: 1000\n}\n\n/**\n * WebSocket Configuration\n */\nconst WS_CONFIG = {\n  url: process.env.NEXT_PUBLIC_WS_URL || 'ws://localhost:3001/kds',\n  reconnectInterval: 5000,\n  maxReconnectAttempts: 10,\n  heartbeatInterval: 30000\n}\n\n/**\n * Data Cache\n */\nclass KdsDataCache {\n  private orders: Map<string, KdsOrder> = new Map()\n  private tickets: Map<string, KdsTicket> = new Map()\n  private metrics: KdsMetrics | null = null\n  private lastUpdate: Date = new Date()\n  private readonly maxAge = 5 * 60 * 1000 // 5 minutes\n\n  get(key: string): any {\n    return this.orders.get(key) || this.tickets.get(key)\n  }\n\n  set(key: string, value: any, type: 'order' | 'ticket' | 'metrics'): void {\n    switch (type) {\n      case 'order':\n        this.orders.set(key, value)\n        break\n      case 'ticket':\n        this.tickets.set(key, value)\n        break\n      case 'metrics':\n        this.metrics = value\n        break\n    }\n    this.lastUpdate = new Date()\n  }\n\n  getAll(type: 'orders' | 'tickets'): any[] {\n    const map = type === 'orders' ? this.orders : this.tickets\n    return Array.from(map.values())\n  }\n\n  clear(): void {\n    this.orders.clear()\n    this.tickets.clear()\n    this.metrics = null\n    this.lastUpdate = new Date()\n  }\n\n  isStale(): boolean {\n    return Date.now() - this.lastUpdate.getTime() > this.maxAge\n  }\n}\n\nconst cache = new KdsDataCache()\n\n/**\n * HTTP Client with retry logic\n */\nclass HttpClient {\n  private async fetchWithRetry<T>(\n    url: string,\n    options: RequestInit = {},\n    attempt: number = 1\n  ): Promise<T> {\n    try {\n      const controller = new AbortController()\n      const timeoutId = setTimeout(() => controller.abort(), API_CONFIG.timeout)\n\n      const response = await fetch(url, {\n        ...options,\n        signal: controller.signal\n      })\n\n      clearTimeout(timeoutId)\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`)\n      }\n\n      return await response.json()\n    } catch (error) {\n      if (attempt < API_CONFIG.retryAttempts) {\n        await new Promise(resolve => setTimeout(resolve, API_CONFIG.retryDelay * attempt))\n        return this.fetchWithRetry<T>(url, options, attempt + 1)\n      }\n      throw error\n    }\n  }\n\n  async get<T>(endpoint: string): Promise<T> {\n    const url = `${API_CONFIG.baseUrl}${endpoint}`\n    return this.fetchWithRetry<T>(url)\n  }\n\n  async post<T>(endpoint: string, data: any): Promise<T> {\n    const url = `${API_CONFIG.baseUrl}${endpoint}`\n    return this.fetchWithRetry<T>(url, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data)\n    })\n  }\n\n  async put<T>(endpoint: string, data: any): Promise<T> {\n    const url = `${API_CONFIG.baseUrl}${endpoint}`\n    return this.fetchWithRetry<T>(url, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data)\n    })\n  }\n\n  async delete<T>(endpoint: string): Promise<T> {\n    const url = `${API_CONFIG.baseUrl}${endpoint}`\n    return this.fetchWithRetry<T>(url, { method: 'DELETE' })\n  }\n}\n\nconst httpClient = new HttpClient()\n\n/**\n * WebSocket Manager\n */\nclass KdsWebSocketManager {\n  private ws: WebSocket | null = null\n  private reconnectAttempts = 0\n  private heartbeatInterval: NodeJS.Timeout | null = null\n  private listeners: Map<string, ((data: any) => void)[]> = new Map()\n\n  connect(): void {\n    if (typeof window === 'undefined') return\n\n    try {\n      this.ws = new WebSocket(WS_CONFIG.url)\n      \n      this.ws.onopen = () => {\n        console.log('KDS WebSocket connected')\n        this.reconnectAttempts = 0\n        this.startHeartbeat()\n      }\n\n      this.ws.onmessage = (event) => {\n        try {\n          const message: KdsWebSocketMessage = JSON.parse(event.data)\n          this.handleMessage(message)\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error)\n        }\n      }\n\n      this.ws.onclose = () => {\n        console.log('KDS WebSocket disconnected')\n        this.stopHeartbeat()\n        this.reconnect()\n      }\n\n      this.ws.onerror = (error) => {\n        console.error('KDS WebSocket error:', error)\n      }\n    } catch (error) {\n      console.error('Error connecting to WebSocket:', error)\n      this.reconnect()\n    }\n  }\n\n  disconnect(): void {\n    if (this.ws) {\n      this.ws.close()\n      this.ws = null\n    }\n    this.stopHeartbeat()\n  }\n\n  private reconnect(): void {\n    if (this.reconnectAttempts >= WS_CONFIG.maxReconnectAttempts) {\n      console.error('Max WebSocket reconnection attempts reached')\n      return\n    }\n\n    this.reconnectAttempts++\n    setTimeout(() => {\n      console.log(`Attempting to reconnect WebSocket (${this.reconnectAttempts}/${WS_CONFIG.maxReconnectAttempts})`)\n      this.connect()\n    }, WS_CONFIG.reconnectInterval)\n  }\n\n  private startHeartbeat(): void {\n    this.heartbeatInterval = setInterval(() => {\n      if (this.ws?.readyState === WebSocket.OPEN) {\n        this.ws.send(JSON.stringify({ type: 'ping' }))\n      }\n    }, WS_CONFIG.heartbeatInterval)\n  }\n\n  private stopHeartbeat(): void {\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval)\n      this.heartbeatInterval = null\n    }\n  }\n\n  private handleMessage(message: KdsWebSocketMessage): void {\n    const listeners = this.listeners.get(message.type) || []\n    listeners.forEach(listener => listener(message.data))\n  }\n\n  subscribe(eventType: string, callback: (data: any) => void): () => void {\n    if (!this.listeners.has(eventType)) {\n      this.listeners.set(eventType, [])\n    }\n    this.listeners.get(eventType)!.push(callback)\n\n    // Return unsubscribe function\n    return () => {\n      const listeners = this.listeners.get(eventType)\n      if (listeners) {\n        const index = listeners.indexOf(callback)\n        if (index > -1) {\n          listeners.splice(index, 1)\n        }\n      }\n    }\n  }\n}\n\nconst wsManager = new KdsWebSocketManager()\n\n/**\n * Data API Functions\n */\nexport const kdsApi = {\n  /**\n   * Initialize the KDS data layer\n   */\n  init: (): void => {\n    wsManager.connect()\n  },\n\n  /**\n   * Cleanup resources\n   */\n  cleanup: (): void => {\n    wsManager.disconnect()\n    cache.clear()\n  },\n\n  /**\n   * Fetch all active orders\n   */\n  fetchOrders: async (filters?: StationFilter): Promise<KdsOrder[]> => {\n    try {\n      // In production, this would make an API call\n      // const response = await httpClient.get<OrdersResponse>('/kds/orders')\n      // return response.orders\n      \n      // For now, return mock data with filtering applied\n      let orders = MOCK_ORDERS\n      \n      if (filters) {\n        orders = orders.filter(order => {\n          if (filters.stationId && !order.items.some(item => item.station === filters.stationId)) {\n            return false\n          }\n          if (filters.status && !filters.status.includes(order.status)) {\n            return false\n          }\n          if (filters.priority && !filters.priority.includes(order.priority)) {\n            return false\n          }\n          if (filters.source && !filters.source.includes(order.source)) {\n            return false\n          }\n          if (filters.timeRange) {\n            const orderTime = order.createdAt.getTime()\n            if (orderTime < filters.timeRange.start.getTime() || \n                orderTime > filters.timeRange.end.getTime()) {\n              return false\n            }\n          }\n          return true\n        })\n      }\n\n      // Cache the results\n      orders.forEach(order => cache.set(order.id, order, 'order'))\n      \n      return orders\n    } catch (error) {\n      console.error('Error fetching orders:', error)\n      throw error\n    }\n  },\n\n  /**\n   * Fetch tickets for specific stations\n   */\n  fetchTickets: async (stationIds: StationId[]): Promise<KdsTicket[]> => {\n    try {\n      const orders = await kdsApi.fetchOrders()\n      const tickets: KdsTicket[] = []\n      \n      orders.forEach(order => {\n        const orderTickets = orderUtils.createTicketsFromOrder(order)\n        const filteredTickets = orderTickets.filter(ticket => \n          stationIds.includes(ticket.station)\n        )\n        tickets.push(...filteredTickets)\n      })\n\n      // Update urgency based on elapsed time\n      tickets.forEach(ticket => {\n        ticket.elapsedTime = timeUtils.getElapsedTime(ticket.startTime)\n        ticket.urgency = ticket.elapsedTime >= 900 ? 'urgent' : \n                        ticket.elapsedTime >= 600 ? 'warning' : 'normal'\n      })\n\n      // Cache the results\n      tickets.forEach(ticket => cache.set(ticket.id, ticket, 'ticket'))\n      \n      return orderUtils.sortTickets(tickets)\n    } catch (error) {\n      console.error('Error fetching tickets:', error)\n      throw error\n    }\n  },\n\n  /**\n   * Fetch KDS metrics\n   */\n  fetchMetrics: async (): Promise<KdsMetrics> => {\n    try {\n      // In production, this would make an API call\n      // const response = await httpClient.get<KdsMetrics>('/kds/metrics')\n      // return response\n      \n      // For now, calculate metrics from mock data\n      const orders = await kdsApi.fetchOrders()\n      const activeTickets = orders.filter(order => \n        order.status !== 'completed' && order.status !== 'cancelled'\n      ).length\n\n      const metrics: KdsMetrics = {\n        totalActiveTickets: activeTickets,\n        averageTicketTime: 8.5, // minutes\n        longestWaitTime: 16, // minutes\n        stationMetrics: Object.values(DEFAULT_STATIONS).map(station => ({\n          stationId: station.id,\n          averageTicketTime: station.averageCookTime,\n          completedOrders: Math.floor(Math.random() * 50),\n          pendingOrders: Math.floor(Math.random() * 10),\n          overdueOrders: Math.floor(Math.random() * 3),\n          efficiency: Math.floor(Math.random() * 30) + 70,\n          lastHourThroughput: Math.floor(Math.random() * 20) + 10\n        })),\n        ordersBySource: {\n          'dine-in': 45,\n          'takeout': 23,\n          'delivery': 18,\n          'online': 12,\n          'phone': 8,\n          'pos': 5\n        },\n        ordersByPriority: {\n          'normal': 85,\n          'urgent': 12,\n          'rush': 5,\n          'fire': 2\n        },\n        lastUpdated: new Date()\n      }\n\n      cache.set('metrics', metrics, 'metrics')\n      return metrics\n    } catch (error) {\n      console.error('Error fetching metrics:', error)\n      throw error\n    }\n  },\n\n  /**\n   * Generate all day view\n   */\n  generateAllDayView: async (stationIds: StationId[]): Promise<AllDayView> => {\n    try {\n      const orders = await kdsApi.fetchOrders()\n      const items = orders.reduce((acc, order) => {\n        order.items.forEach(item => {\n          if (stationIds.includes(item.station)) {\n            const key = `${item.name}-${item.station}`\n            if (!acc[key]) {\n              acc[key] = {\n                itemId: item.id,\n                name: item.name,\n                station: item.station,\n                totalQuantity: 0,\n                completedQuantity: 0,\n                pendingQuantity: 0,\n                averageCookTime: item.cookTime,\n                modifiers: {},\n                allergens: item.allergens || []\n              }\n            }\n            \n            acc[key].totalQuantity += item.quantity\n            if (order.status === 'completed') {\n              acc[key].completedQuantity += item.quantity\n            } else {\n              acc[key].pendingQuantity += item.quantity\n            }\n            \n            // Aggregate modifiers\n            item.modifiers.forEach(mod => {\n              acc[key].modifiers[mod.name] = (acc[key].modifiers[mod.name] || 0) + item.quantity\n            })\n          }\n        })\n        return acc\n      }, {} as Record<string, any>)\n\n      return {\n        id: 'all-day-' + Date.now(),\n        name: 'All Day View',\n        stations: stationIds,\n        items: Object.values(items),\n        totalOrders: orders.length,\n        completedOrders: orders.filter(o => o.status === 'completed').length,\n        lastUpdated: new Date()\n      }\n    } catch (error) {\n      console.error('Error generating all day view:', error)\n      throw error\n    }\n  },\n\n  /**\n   * Bump a ticket (mark as completed)\n   */\n  bumpTicket: async (ticketId: string): Promise<void> => {\n    try {\n      await httpClient.post(`/kds/tickets/${ticketId}/bump`, {})\n      \n      // Update cache\n      const ticket = cache.get(ticketId)\n      if (ticket) {\n        ticket.status = 'completed'\n        ticket.completedTime = new Date()\n        cache.set(ticketId, ticket, 'ticket')\n      }\n    } catch (error) {\n      console.error('Error bumping ticket:', error)\n      throw error\n    }\n  },\n\n  /**\n   * Recall a completed ticket\n   */\n  recallTicket: async (ticketId: string): Promise<void> => {\n    try {\n      await httpClient.post(`/kds/tickets/${ticketId}/recall`, {})\n      \n      // Update cache\n      const ticket = cache.get(ticketId)\n      if (ticket) {\n        ticket.status = 'preparing'\n        ticket.isRecalled = true\n        ticket.completedTime = undefined\n        cache.set(ticketId, ticket, 'ticket')\n      }\n    } catch (error) {\n      console.error('Error recalling ticket:', error)\n      throw error\n    }\n  },\n\n  /**\n   * Fire a ticket (mark as rush)\n   */\n  fireTicket: async (ticketId: string): Promise<void> => {\n    try {\n      await httpClient.post(`/kds/tickets/${ticketId}/fire`, {})\n      \n      // Update cache\n      const ticket = cache.get(ticketId)\n      if (ticket) {\n        ticket.isFired = true\n        ticket.order.priority = 'fire'\n        cache.set(ticketId, ticket, 'ticket')\n      }\n    } catch (error) {\n      console.error('Error firing ticket:', error)\n      throw error\n    }\n  },\n\n  /**\n   * Change ticket priority\n   */\n  changePriority: async (ticketId: string, priority: TicketPriority): Promise<void> => {\n    try {\n      await httpClient.put(`/kds/tickets/${ticketId}/priority`, { priority })\n      \n      // Update cache\n      const ticket = cache.get(ticketId)\n      if (ticket) {\n        ticket.order.priority = priority\n        cache.set(ticketId, ticket, 'ticket')\n      }\n    } catch (error) {\n      console.error('Error changing ticket priority:', error)\n      throw error\n    }\n  },\n\n  /**\n   * Subscribe to real-time updates\n   */\n  subscribe: (\n    eventType: 'ticket_update' | 'new_order' | 'order_complete' | 'station_change' | 'system_alert',\n    callback: (data: any) => void\n  ): (() => void) => {\n    return wsManager.subscribe(eventType, callback)\n  },\n\n  /**\n   * Get cached data\n   */\n  getCached: <T>(key: string): T | undefined => {\n    return cache.get(key)\n  },\n\n  /**\n   * Check if cache is stale\n   */\n  isCacheStale: (): boolean => {\n    return cache.isStale()\n  }\n}\n\n/**\n * Real-time update hooks\n */\nexport const useKdsRealTime = () => {\n  if (typeof window !== 'undefined') {\n    // Initialize WebSocket connection\n    kdsApi.init()\n    \n    // Cleanup on unmount\n    window.addEventListener('beforeunload', () => {\n      kdsApi.cleanup()\n    })\n  }\n\n  return {\n    subscribe: kdsApi.subscribe,\n    disconnect: kdsApi.cleanup\n  }\n}\n\n/**\n * Export the main API\n */\nexport { kdsApi as default, wsManager, cache }"],"names":[],"mappings":"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"}