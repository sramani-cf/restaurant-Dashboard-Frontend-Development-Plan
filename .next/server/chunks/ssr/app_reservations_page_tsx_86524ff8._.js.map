{"version":3,"sources":["turbopack:///[project]/app/reservations/page.tsx","turbopack:///[project]/lib/reservations/data.ts","turbopack:///[project]/lib/reservations/utils.ts","turbopack:///[project]/components/reservations/reservation-grid.tsx","turbopack:///[project]/components/reservations/reservation-details.tsx","turbopack:///[project]/app/reservations/data:f10478 <text/javascript>","turbopack:///[project]/app/reservations/data:1780fa <text/javascript>","turbopack:///[project]/app/reservations/data:b2b70f <text/javascript>","turbopack:///[project]/app/reservations/data:d4077f <text/javascript>","turbopack:///[project]/components/reservations/reservation-form.tsx","turbopack:///[project]/components/reservations/guest-search.tsx","turbopack:///[project]/components/reservations/reservation-filters.tsx","turbopack:///[project]/components/reservations/floor-plan.tsx","turbopack:///[project]/components/reservations/floor-plan-editor.tsx","turbopack:///[project]/components/reservations/table-card.tsx","turbopack:///[project]/components/reservations/table-status-indicator.tsx","turbopack:///[project]/app/reservations/data:64605a <text/javascript>","turbopack:///[project]/components/reservations/waitlist-form.tsx","turbopack:///[project]/app/reservations/data:fdaae2 <text/javascript>","turbopack:///[project]/app/reservations/data:7e9b4e <text/javascript>","turbopack:///[project]/components/reservations/waitlist-panel.tsx","turbopack:///[project]/components/reservations/waitlist-entry.tsx","turbopack:///[project]/components/reservations/guest-profile.tsx","turbopack:///[project]/components/reservations/guest-form.tsx","turbopack:///[project]/components/reservations/reservation-stats.tsx","turbopack:///[project]/components/reservations/reservation-timeline.tsx","turbopack:///[project]/components/reservations/reservation-calendar.tsx","turbopack:///[project]/components/reservations/reservation-header.tsx","turbopack:///[project]/components/reservations/reservation-navigation.tsx","turbopack:///[project]/components/reservations/quick-actions.tsx","turbopack:///[project]/components/reservations/real-time-updates.tsx","turbopack:///[project]/app/reservations/data:887e7f <text/javascript>"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { \n  Reservation, \n  Guest, \n  Table, \n  DiningArea, \n  WaitlistEntry, \n  ReservationStats as StatsType,\n  ReservationFilters\n} from '@/lib/reservations/types';\nimport { \n  getReservations,\n  getGuests,\n  getTables,\n  getDiningAreas,\n  getWaitlist,\n  getReservationStats\n} from '@/lib/reservations/data';\nimport {\n  ReservationHeader,\n  ReservationNavigation,\n  ReservationGrid,\n  FloorPlan,\n  FloorPlanEditor,\n  WaitlistPanel,\n  ReservationStats,\n  ReservationTimeline,\n  ReservationCalendar,\n  QuickActions,\n  RealTimeUpdates,\n  ReservationFilters as FiltersComponent,\n  GuestProfile\n} from '@/components/reservations';\nimport { updateTableStatusAction } from './actions';\nimport { PageHeader } from '@/components/ui/page-header';\n\nexport default function ReservationsPage() {\n  // State management\n  const [activeTab, setActiveTab] = useState('dashboard');\n  const [reservations, setReservations] = useState<Reservation[]>([]);\n  const [guests, setGuests] = useState<Guest[]>([]);\n  const [tables, setTables] = useState<Table[]>([]);\n  const [diningAreas, setDiningAreas] = useState<DiningArea[]>([]);\n  const [waitlist, setWaitlist] = useState<WaitlistEntry[]>([]);\n  const [stats, setStats] = useState<StatsType | null>(null);\n  const [filters, setFilters] = useState<ReservationFilters>({});\n  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);\n  const [selectedDiningArea, setSelectedDiningArea] = useState<string>('');\n  const [selectedTableId, setSelectedTableId] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Load initial data\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  // Reload reservations when filters change\n  useEffect(() => {\n    loadReservations();\n  }, [filters]);\n\n  const loadData = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const [\n        reservationsResponse,\n        guestsData,\n        tablesData,\n        diningAreasData,\n        waitlistData,\n        statsData\n      ] = await Promise.all([\n        getReservations(filters),\n        getGuests(),\n        getTables(),\n        getDiningAreas(),\n        getWaitlist(),\n        getReservationStats()\n      ]);\n\n      setReservations(reservationsResponse.data);\n      setGuests(guestsData);\n      setTables(tablesData);\n      setDiningAreas(diningAreasData);\n      setWaitlist(waitlistData);\n      setStats(statsData);\n\n      // Set default dining area\n      if (diningAreasData.length > 0 && !selectedDiningArea) {\n        setSelectedDiningArea(diningAreasData[0].id);\n      }\n\n    } catch (err) {\n      console.error('Failed to load data:', err);\n      setError('Failed to load reservation data. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadReservations = async () => {\n    try {\n      const response = await getReservations(filters);\n      setReservations(response.data);\n    } catch (err) {\n      console.error('Failed to load reservations:', err);\n    }\n  };\n\n  const handleTabChange = (tab: string) => {\n    setActiveTab(tab);\n  };\n\n  const handleReservationUpdate = (updatedReservation: Reservation) => {\n    setReservations(prev => \n      prev.map(res => \n        res.id === updatedReservation.id ? updatedReservation : res\n      )\n    );\n    // Reload stats to reflect changes\n    getReservationStats().then(setStats);\n  };\n\n  const handleWaitlistUpdate = (updatedEntry: WaitlistEntry) => {\n    setWaitlist(prev => \n      prev.map(entry => \n        entry.id === updatedEntry.id ? updatedEntry : entry\n      )\n    );\n  };\n\n  const handleTableStatusChange = async (tableId: string, status: Table['status']) => {\n    try {\n      const result = await updateTableStatusAction(tableId, status);\n      if (result.success && result.data) {\n        setTables(prev => \n          prev.map(table => \n            table.id === tableId ? result.data! : table\n          )\n        );\n      }\n    } catch (error) {\n      console.error('Failed to update table status:', error);\n    }\n  };\n\n  const handleTableSelect = (table: Table) => {\n    setSelectedTableId(table.id);\n  };\n\n  const handleRealTimeUpdate = (update: any) => {\n    // Handle real-time updates from WebSocket or polling\n    switch (update.type) {\n      case 'reservation':\n        if (update.action === 'update') {\n          handleReservationUpdate(update.data);\n        }\n        break;\n      case 'table':\n        if (update.action === 'update') {\n          setTables(prev => \n            prev.map(table => \n              table.id === update.data.id ? update.data : table\n            )\n          );\n        }\n        break;\n      case 'waitlist':\n        if (update.action === 'update') {\n          handleWaitlistUpdate(update.data);\n        }\n        break;\n    }\n  };\n\n  // Get filtered data for current view\n  const currentDiningArea = diningAreas.find(area => area.id === selectedDiningArea);\n  const currentTables = tables.filter(table => table.diningAreaId === selectedDiningArea);\n  const availableTables = tables.filter(table => table.status === 'available');\n  const todayReservations = reservations.filter(res => \n    res.dateTime.startsWith(selectedDate)\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-2 border-gray-300 border-t-blue-600 mx-auto mb-4\"></div>\n          <div className=\"text-gray-600\">Loading reservations...</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"text-red-600 mb-2\">⚠️ Error</div>\n          <div className=\"text-gray-600 mb-4\">{error}</div>\n          <button \n            onClick={loadData}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n          >\n            Try Again\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <ReservationHeader \n        onReservationCreated={handleReservationUpdate}\n      />\n\n      <ReservationNavigation \n        activeTab={activeTab}\n        onTabChange={handleTabChange}\n      />\n\n      {activeTab === 'dashboard' && stats && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          {/* Main Stats */}\n          <div className=\"lg:col-span-3\">\n            <ReservationStats stats={stats} />\n          </div>\n          \n          {/* Side Panel */}\n          <div className=\"space-y-6\">\n            <QuickActions \n              onCreateReservation={() => {\n                // This would open the reservation form\n              }}\n              onAddWalkIn={() => {\n                setActiveTab('waitlist');\n              }}\n            />\n            \n            <RealTimeUpdates onUpdate={handleRealTimeUpdate} />\n          </div>\n          \n          {/* Timeline View */}\n          <div className=\"lg:col-span-2\">\n            <ReservationTimeline \n              reservations={todayReservations}\n              selectedDate={selectedDate}\n            />\n          </div>\n          \n          {/* Calendar View */}\n          <div className=\"lg:col-span-2\">\n            <ReservationCalendar \n              reservations={reservations}\n              selectedDate={selectedDate}\n              onDateSelect={setSelectedDate}\n            />\n          </div>\n        </div>\n      )}\n\n      {activeTab === 'reservations' && (\n        <div className=\"space-y-6\">\n          <FiltersComponent \n            filters={filters}\n            onFiltersChange={setFilters}\n          />\n          \n          <ReservationGrid\n            reservations={reservations}\n            guests={guests}\n            tables={tables}\n            onReservationUpdate={handleReservationUpdate}\n          />\n        </div>\n      )}\n\n      {activeTab === 'floor-plan' && (\n        <div className=\"space-y-6\">\n          {/* Dining Area Selector */}\n          <div className=\"flex items-center space-x-4\">\n            <label className=\"text-sm font-medium text-gray-700\">Dining Area:</label>\n            <select\n              value={selectedDiningArea}\n              onChange={(e) => setSelectedDiningArea(e.target.value)}\n              className=\"px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500\"\n            >\n              {diningAreas.map(area => (\n                <option key={area.id} value={area.id}>\n                  {area.name}\n                </option>\n              ))}\n            </select>\n            \n            <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n              <span>{currentTables.length} tables</span>\n              <span>•</span>\n              <span>{currentDiningArea?.capacity} capacity</span>\n            </div>\n          </div>\n\n          {currentDiningArea && (\n            <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n              {/* Floor Plan */}\n              <div className=\"lg:col-span-3\">\n                <FloorPlanEditor\n                  diningArea={currentDiningArea}\n                  tables={currentTables}\n                  onTableUpdate={(table) => {\n                    setTables(prev => \n                      prev.map(t => t.id === table.id ? table : t)\n                    );\n                  }}\n                />\n              </div>\n              \n              {/* Table Details */}\n              <div className=\"space-y-4\">\n                {selectedTableId && (\n                  <div className=\"text-sm text-gray-600\">\n                    <div className=\"font-medium mb-2\">Selected Table</div>\n                    {/* Table details would go here */}\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      {activeTab === 'waitlist' && (\n        <WaitlistPanel\n          waitlist={waitlist}\n          guests={guests}\n          availableTables={availableTables}\n          onWaitlistUpdate={handleWaitlistUpdate}\n        />\n      )}\n\n      {activeTab === 'guests' && (\n        <div className=\"space-y-6\">\n          <div className=\"text-center py-8 text-gray-500\">\n            <div className=\"text-lg font-medium mb-2\">Guest Database</div>\n            <div className=\"text-sm\">\n              Comprehensive guest management features would be implemented here,\n              including guest profiles, visit history, preferences, and CRM functionality.\n            </div>\n          </div>\n\n          {/* Sample guest profiles */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {guests.slice(0, 6).map(guest => (\n              <GuestProfile key={guest.id} guest={guest} />\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","import { \n  Table, \n  DiningArea, \n  Reservation, \n  Guest, \n  WaitlistEntry, \n  FloorPlan,\n  ReservationStats,\n  AvailabilityWindow,\n  TableTurnover,\n  ReservationFilters,\n  WaitlistFilters,\n  CreateReservationData,\n  UpdateReservationData,\n  CreateWaitlistEntryData,\n  ApiResponse,\n  PaginatedResponse,\n  TableStatus,\n  ReservationStatus,\n  WaitlistStatus,\n  VIPStatus\n} from './types';\n\n// Mock Data\nexport const mockTables: Table[] = [\n  {\n    id: 'table-1',\n    number: '1',\n    capacity: 2,\n    x: 100,\n    y: 150,\n    width: 80,\n    height: 80,\n    shape: 'round',\n    status: 'available',\n    diningAreaId: 'main-dining',\n    isCombinable: false,\n    estimatedTurnoverTime: 90\n  },\n  {\n    id: 'table-2',\n    number: '2',\n    capacity: 4,\n    x: 200,\n    y: 150,\n    width: 120,\n    height: 80,\n    shape: 'rectangular',\n    status: 'occupied',\n    diningAreaId: 'main-dining',\n    isCombinable: true,\n    estimatedTurnoverTime: 120\n  },\n  {\n    id: 'table-3',\n    number: '3',\n    capacity: 4,\n    x: 350,\n    y: 150,\n    width: 120,\n    height: 80,\n    shape: 'rectangular',\n    status: 'reserved',\n    diningAreaId: 'main-dining',\n    isCombinable: true,\n    estimatedTurnoverTime: 120\n  },\n  {\n    id: 'table-4',\n    number: '4',\n    capacity: 6,\n    x: 100,\n    y: 300,\n    width: 140,\n    height: 100,\n    shape: 'rectangular',\n    status: 'cleaning',\n    diningAreaId: 'main-dining',\n    isCombinable: false,\n    estimatedTurnoverTime: 150\n  },\n  {\n    id: 'table-5',\n    number: '5',\n    capacity: 2,\n    x: 500,\n    y: 100,\n    width: 80,\n    height: 80,\n    shape: 'round',\n    status: 'available',\n    diningAreaId: 'patio',\n    isCombinable: false,\n    estimatedTurnoverTime: 90\n  }\n];\n\nexport const mockDiningAreas: DiningArea[] = [\n  {\n    id: 'main-dining',\n    name: 'Main Dining Room',\n    floor: 1,\n    capacity: 60,\n    isActive: true,\n    tables: mockTables.filter(t => t.diningAreaId === 'main-dining'),\n    layout: {\n      width: 800,\n      height: 600\n    }\n  },\n  {\n    id: 'patio',\n    name: 'Outdoor Patio',\n    floor: 1,\n    capacity: 24,\n    isActive: true,\n    tables: mockTables.filter(t => t.diningAreaId === 'patio'),\n    layout: {\n      width: 600,\n      height: 400\n    }\n  },\n  {\n    id: 'private-dining',\n    name: 'Private Dining Room',\n    floor: 2,\n    capacity: 16,\n    isActive: true,\n    tables: [],\n    layout: {\n      width: 400,\n      height: 300\n    }\n  }\n];\n\nexport const mockGuests: Guest[] = [\n  {\n    id: 'guest-1',\n    firstName: 'John',\n    lastName: 'Smith',\n    phone: '+1234567890',\n    email: 'john.smith@email.com',\n    dateOfBirth: '1985-06-15',\n    preferences: {\n      seatingPreference: 'booth',\n      dietaryRestrictions: ['gluten-free'],\n      favoriteItems: ['Caesar Salad', 'Grilled Salmon']\n    },\n    visitHistory: [],\n    totalVisits: 12,\n    totalSpent: 1250.00,\n    averageSpend: 104.17,\n    lastVisit: '2024-01-10',\n    vipStatus: 'frequent',\n    createdAt: '2023-01-15T10:00:00Z',\n    updatedAt: '2024-01-10T20:30:00Z'\n  },\n  {\n    id: 'guest-2',\n    firstName: 'Sarah',\n    lastName: 'Johnson',\n    phone: '+1987654321',\n    email: 'sarah.j@email.com',\n    anniversary: '2020-03-14',\n    preferences: {\n      seatingPreference: 'patio',\n      allergies: ['nuts'],\n      ambiance: 'quiet'\n    },\n    visitHistory: [],\n    totalVisits: 5,\n    totalSpent: 425.00,\n    averageSpend: 85.00,\n    lastVisit: '2024-01-08',\n    vipStatus: 'regular',\n    createdAt: '2023-06-20T14:00:00Z',\n    updatedAt: '2024-01-08T19:45:00Z'\n  }\n];\n\nexport const mockReservations: Reservation[] = [\n  {\n    id: 'res-1',\n    guestId: 'guest-1',\n    tableId: 'table-3',\n    partySize: 4,\n    dateTime: '2024-01-20T19:00:00Z',\n    duration: 120,\n    status: 'confirmed',\n    specialRequests: 'Window seat preferred',\n    occasion: 'birthday',\n    createdAt: '2024-01-15T10:00:00Z',\n    updatedAt: '2024-01-15T10:00:00Z',\n    source: 'online',\n    estimatedSpend: 200,\n    tags: ['birthday', 'vip']\n  },\n  {\n    id: 'res-2',\n    guestId: 'guest-2',\n    partySize: 2,\n    dateTime: '2024-01-20T20:00:00Z',\n    duration: 90,\n    status: 'pending',\n    occasion: 'anniversary',\n    createdAt: '2024-01-18T14:30:00Z',\n    updatedAt: '2024-01-18T14:30:00Z',\n    source: 'phone',\n    estimatedSpend: 150\n  }\n];\n\nexport const mockWaitlist: WaitlistEntry[] = [\n  {\n    id: 'wait-1',\n    guestId: 'guest-1',\n    partySize: 3,\n    estimatedWaitTime: 25,\n    priority: 'normal',\n    addedAt: '2024-01-20T18:30:00Z',\n    phoneNumber: '+1234567890',\n    status: 'waiting',\n    quotedWaitTime: 30\n  },\n  {\n    id: 'wait-2',\n    guestId: 'guest-2',\n    partySize: 2,\n    estimatedWaitTime: 15,\n    priority: 'vip',\n    addedAt: '2024-01-20T18:45:00Z',\n    phoneNumber: '+1987654321',\n    status: 'notified',\n    quotedWaitTime: 20\n  }\n];\n\n// API Functions\nexport async function getDiningAreas(): Promise<DiningArea[]> {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 300));\n  return mockDiningAreas;\n}\n\nexport async function getTables(diningAreaId?: string): Promise<Table[]> {\n  await new Promise(resolve => setTimeout(resolve, 200));\n  return diningAreaId \n    ? mockTables.filter(table => table.diningAreaId === diningAreaId)\n    : mockTables;\n}\n\nexport async function getReservations(filters?: ReservationFilters): Promise<PaginatedResponse<Reservation>> {\n  await new Promise(resolve => setTimeout(resolve, 400));\n  \n  let filteredReservations = [...mockReservations];\n  \n  if (filters) {\n    if (filters.date) {\n      filteredReservations = filteredReservations.filter(res => \n        res.dateTime.startsWith(filters.date!)\n      );\n    }\n    \n    if (filters.status?.length) {\n      filteredReservations = filteredReservations.filter(res => \n        filters.status!.includes(res.status)\n      );\n    }\n    \n    if (filters.partySize) {\n      const { min, max } = filters.partySize;\n      filteredReservations = filteredReservations.filter(res => {\n        if (min && res.partySize < min) return false;\n        if (max && res.partySize > max) return false;\n        return true;\n      });\n    }\n    \n    if (filters.source?.length) {\n      filteredReservations = filteredReservations.filter(res => \n        filters.source!.includes(res.source)\n      );\n    }\n  }\n  \n  return {\n    data: filteredReservations,\n    pagination: {\n      page: 1,\n      limit: 50,\n      total: filteredReservations.length,\n      totalPages: 1\n    }\n  };\n}\n\nexport async function getWaitlist(filters?: WaitlistFilters): Promise<WaitlistEntry[]> {\n  await new Promise(resolve => setTimeout(resolve, 200));\n  \n  let filteredWaitlist = [...mockWaitlist];\n  \n  if (filters) {\n    if (filters.status?.length) {\n      filteredWaitlist = filteredWaitlist.filter(entry => \n        filters.status!.includes(entry.status)\n      );\n    }\n    \n    if (filters.priority?.length) {\n      filteredWaitlist = filteredWaitlist.filter(entry => \n        filters.priority!.includes(entry.priority)\n      );\n    }\n    \n    if (filters.partySize) {\n      const { min, max } = filters.partySize;\n      filteredWaitlist = filteredWaitlist.filter(entry => {\n        if (min && entry.partySize < min) return false;\n        if (max && entry.partySize > max) return false;\n        return true;\n      });\n    }\n  }\n  \n  return filteredWaitlist;\n}\n\nexport async function getGuests(search?: string): Promise<Guest[]> {\n  await new Promise(resolve => setTimeout(resolve, 300));\n  \n  if (search) {\n    const searchLower = search.toLowerCase();\n    return mockGuests.filter(guest => \n      guest.firstName.toLowerCase().includes(searchLower) ||\n      guest.lastName.toLowerCase().includes(searchLower) ||\n      guest.phone.includes(search) ||\n      guest.email?.toLowerCase().includes(searchLower)\n    );\n  }\n  \n  return mockGuests;\n}\n\nexport async function getGuestById(id: string): Promise<Guest | null> {\n  await new Promise(resolve => setTimeout(resolve, 200));\n  return mockGuests.find(guest => guest.id === id) || null;\n}\n\nexport async function createReservation(data: CreateReservationData): Promise<ApiResponse<Reservation>> {\n  await new Promise(resolve => setTimeout(resolve, 500));\n  \n  // Simulate validation\n  if (data.partySize < 1 || data.partySize > 20) {\n    return {\n      success: false,\n      error: 'Party size must be between 1 and 20'\n    };\n  }\n  \n  const newReservation: Reservation = {\n    id: `res-${Date.now()}`,\n    guestId: data.guestId || `guest-${Date.now()}`,\n    partySize: data.partySize,\n    dateTime: data.dateTime,\n    duration: data.duration || 120,\n    status: 'confirmed',\n    specialRequests: data.specialRequests,\n    occasion: data.occasion,\n    notes: data.notes,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    source: data.source,\n    tags: data.tags\n  };\n  \n  return {\n    success: true,\n    data: newReservation,\n    message: 'Reservation created successfully'\n  };\n}\n\nexport async function updateReservation(id: string, data: UpdateReservationData): Promise<ApiResponse<Reservation>> {\n  await new Promise(resolve => setTimeout(resolve, 400));\n  \n  const reservation = mockReservations.find(r => r.id === id);\n  if (!reservation) {\n    return {\n      success: false,\n      error: 'Reservation not found'\n    };\n  }\n  \n  const updatedReservation: Reservation = {\n    ...reservation,\n    ...data,\n    updatedAt: new Date().toISOString()\n  };\n  \n  return {\n    success: true,\n    data: updatedReservation,\n    message: 'Reservation updated successfully'\n  };\n}\n\nexport async function cancelReservation(id: string): Promise<ApiResponse<void>> {\n  await new Promise(resolve => setTimeout(resolve, 300));\n  \n  const reservation = mockReservations.find(r => r.id === id);\n  if (!reservation) {\n    return {\n      success: false,\n      error: 'Reservation not found'\n    };\n  }\n  \n  return {\n    success: true,\n    message: 'Reservation cancelled successfully'\n  };\n}\n\nexport async function addToWaitlist(data: CreateWaitlistEntryData): Promise<ApiResponse<WaitlistEntry>> {\n  await new Promise(resolve => setTimeout(resolve, 300));\n  \n  const newWaitlistEntry: WaitlistEntry = {\n    id: `wait-${Date.now()}`,\n    guestId: data.guestId || `guest-${Date.now()}`,\n    partySize: data.partySize,\n    estimatedWaitTime: data.estimatedWaitTime,\n    priority: data.priority || 'normal',\n    addedAt: new Date().toISOString(),\n    phoneNumber: data.guest?.phone || '',\n    status: 'waiting',\n    specialRequests: data.specialRequests,\n    quotedWaitTime: data.quotedWaitTime\n  };\n  \n  return {\n    success: true,\n    data: newWaitlistEntry,\n    message: 'Added to waitlist successfully'\n  };\n}\n\nexport async function updateWaitlistEntry(id: string, status: WaitlistStatus): Promise<ApiResponse<WaitlistEntry>> {\n  await new Promise(resolve => setTimeout(resolve, 200));\n  \n  const entry = mockWaitlist.find(e => e.id === id);\n  if (!entry) {\n    return {\n      success: false,\n      error: 'Waitlist entry not found'\n    };\n  }\n  \n  const updatedEntry: WaitlistEntry = {\n    ...entry,\n    status,\n    ...(status === 'notified' && { notifiedAt: new Date().toISOString() }),\n    ...(status === 'seated' && { seatedAt: new Date().toISOString() })\n  };\n  \n  return {\n    success: true,\n    data: updatedEntry,\n    message: 'Waitlist entry updated successfully'\n  };\n}\n\nexport async function updateTableStatus(tableId: string, status: TableStatus): Promise<ApiResponse<Table>> {\n  await new Promise(resolve => setTimeout(resolve, 200));\n  \n  const table = mockTables.find(t => t.id === tableId);\n  if (!table) {\n    return {\n      success: false,\n      error: 'Table not found'\n    };\n  }\n  \n  const updatedTable: Table = {\n    ...table,\n    status,\n    ...(status === 'cleaning' && { lastCleanedAt: new Date().toISOString() })\n  };\n  \n  return {\n    success: true,\n    data: updatedTable,\n    message: 'Table status updated successfully'\n  };\n}\n\nexport async function getReservationStats(): Promise<ReservationStats> {\n  await new Promise(resolve => setTimeout(resolve, 400));\n  \n  return {\n    today: {\n      totalReservations: 45,\n      seated: 28,\n      pending: 12,\n      noShows: 3,\n      walkIns: 8,\n      averagePartySize: 3.2,\n      totalCovers: 144\n    },\n    current: {\n      occupiedTables: 12,\n      availableTables: 8,\n      waitlistSize: 6,\n      averageWaitTime: 22,\n      nextAvailableSlot: '2024-01-20T21:30:00Z'\n    },\n    forecast: {\n      remainingCapacity: 45,\n      expectedTurnover: 15,\n      projectedRevenue: 2800\n    }\n  };\n}\n\nexport async function getAvailability(date: string): Promise<AvailabilityWindow> {\n  await new Promise(resolve => setTimeout(resolve, 300));\n  \n  // Mock availability data\n  const slots = [];\n  for (let hour = 17; hour <= 22; hour++) {\n    for (let minute = 0; minute < 60; minute += 30) {\n      const time = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n      slots.push({\n        time,\n        capacity: 80,\n        booked: Math.floor(Math.random() * 60),\n        available: Math.floor(Math.random() * 20),\n        tables: mockTables.map(table => ({\n          tableId: table.id,\n          status: Math.random() > 0.7 ? 'reserved' : 'available' as 'available' | 'reserved' | 'blocked'\n        }))\n      });\n    }\n  }\n  \n  const totalBooked = slots.reduce((sum, slot) => sum + slot.booked, 0);\n  const totalCapacity = slots.length * 80;\n  \n  return {\n    date,\n    slots,\n    totalCapacity,\n    totalBooked,\n    isFullyBooked: totalBooked >= totalCapacity * 0.95\n  };\n}\n\nexport async function getTableTurnover(date: string, tableId?: string): Promise<TableTurnover[]> {\n  await new Promise(resolve => setTimeout(resolve, 400));\n  \n  const tables = tableId ? [tableId] : mockTables.map(t => t.id);\n  \n  return tables.map(id => ({\n    tableId: id,\n    date,\n    turns: [\n      {\n        reservationId: 'res-1',\n        startTime: '18:00',\n        endTime: '20:00',\n        duration: 120,\n        partySize: 4,\n        revenue: 180\n      },\n      {\n        reservationId: 'res-2',\n        startTime: '20:30',\n        endTime: '22:15',\n        duration: 105,\n        partySize: 2,\n        revenue: 95\n      }\n    ],\n    totalTurns: 2,\n    averageTurnTime: 112.5,\n    totalRevenue: 275,\n    efficiency: 85\n  }));\n}\n\n// Real-time data simulation\nlet subscribers: ((data: any) => void)[] = [];\n\nexport function subscribeToUpdates(callback: (data: any) => void) {\n  subscribers.push(callback);\n  \n  return () => {\n    subscribers = subscribers.filter(cb => cb !== callback);\n  };\n}\n\n// Simulate real-time updates\nsetInterval(() => {\n  if (subscribers.length > 0) {\n    const updateType = Math.random();\n    let update;\n    \n    if (updateType < 0.4) {\n      // Table status update\n      const table = mockTables[Math.floor(Math.random() * mockTables.length)];\n      const statuses: TableStatus[] = ['available', 'occupied', 'reserved', 'cleaning'];\n      update = {\n        type: 'table',\n        action: 'update',\n        data: {\n          ...table,\n          status: statuses[Math.floor(Math.random() * statuses.length)]\n        },\n        timestamp: new Date().toISOString()\n      };\n    } else if (updateType < 0.7) {\n      // Reservation update\n      const reservation = mockReservations[Math.floor(Math.random() * mockReservations.length)];\n      update = {\n        type: 'reservation',\n        action: 'update',\n        data: {\n          ...reservation,\n          status: 'seated' as ReservationStatus\n        },\n        timestamp: new Date().toISOString()\n      };\n    } else {\n      // Waitlist update\n      const waitlistEntry = mockWaitlist[Math.floor(Math.random() * mockWaitlist.length)];\n      update = {\n        type: 'waitlist',\n        action: 'update',\n        data: {\n          ...waitlistEntry,\n          estimatedWaitTime: Math.max(0, waitlistEntry.estimatedWaitTime - 5)\n        },\n        timestamp: new Date().toISOString()\n      };\n    }\n    \n    subscribers.forEach(callback => callback(update));\n  }\n}, 30000); // Update every 30 seconds","import { \n  Table, \n  Reservation, \n  Guest, \n  WaitlistEntry, \n  TableStatus,\n  ReservationStatus,\n  WaitlistStatus,\n  TableTurnover,\n  AvailabilityWindow,\n  FloorPlanElement,\n  VIPStatus\n} from './types';\n\n// Date and Time Utilities\nexport function formatTime(dateString: string): string {\n  return new Date(dateString).toLocaleTimeString('en-US', {\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: true\n  });\n}\n\nexport function formatDate(dateString: string): string {\n  return new Date(dateString).toLocaleDateString('en-US', {\n    weekday: 'short',\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  });\n}\n\nexport function formatDateTime(dateString: string): string {\n  const date = new Date(dateString);\n  return `${formatDate(dateString)} at ${formatTime(dateString)}`;\n}\n\nexport function isToday(dateString: string): boolean {\n  const today = new Date();\n  const date = new Date(dateString);\n  return today.toDateString() === date.toDateString();\n}\n\nexport function isTomorrow(dateString: string): boolean {\n  const tomorrow = new Date();\n  tomorrow.setDate(tomorrow.getDate() + 1);\n  const date = new Date(dateString);\n  return tomorrow.toDateString() === date.toDateString();\n}\n\nexport function getTimeSlots(startHour: number = 17, endHour: number = 23, interval: number = 30): string[] {\n  const slots = [];\n  for (let hour = startHour; hour <= endHour; hour++) {\n    for (let minute = 0; minute < 60; minute += interval) {\n      if (hour === endHour && minute > 0) break;\n      const timeString = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n      slots.push(timeString);\n    }\n  }\n  return slots;\n}\n\nexport function addMinutes(dateString: string, minutes: number): string {\n  const date = new Date(dateString);\n  date.setMinutes(date.getMinutes() + minutes);\n  return date.toISOString();\n}\n\nexport function getDurationInMinutes(startTime: string, endTime: string): number {\n  const start = new Date(startTime);\n  const end = new Date(endTime);\n  return Math.floor((end.getTime() - start.getTime()) / (1000 * 60));\n}\n\nexport function isTimeSlotAvailable(\n  targetTime: string,\n  duration: number,\n  existingReservations: Reservation[],\n  tableId?: string\n): boolean {\n  const targetStart = new Date(targetTime);\n  const targetEnd = new Date(targetStart.getTime() + duration * 60000);\n  \n  return !existingReservations.some(reservation => {\n    if (tableId && reservation.tableId !== tableId) return false;\n    if (reservation.status === 'cancelled' || reservation.status === 'no-show') return false;\n    \n    const resStart = new Date(reservation.dateTime);\n    const resEnd = new Date(resStart.getTime() + reservation.duration * 60000);\n    \n    return (targetStart < resEnd && targetEnd > resStart);\n  });\n}\n\n// Table Management Utilities\nexport function getTableStatusColor(status: TableStatus): string {\n  switch (status) {\n    case 'available':\n      return '#10B981'; // green\n    case 'occupied':\n      return '#EF4444'; // red\n    case 'reserved':\n      return '#F59E0B'; // amber\n    case 'cleaning':\n      return '#6B7280'; // gray\n    case 'maintenance':\n      return '#8B5CF6'; // purple\n    case 'combined':\n      return '#3B82F6'; // blue\n    default:\n      return '#6B7280';\n  }\n}\n\nexport function getTableStatusLabel(status: TableStatus): string {\n  switch (status) {\n    case 'available':\n      return 'Available';\n    case 'occupied':\n      return 'Occupied';\n    case 'reserved':\n      return 'Reserved';\n    case 'cleaning':\n      return 'Cleaning';\n    case 'maintenance':\n      return 'Maintenance';\n    case 'combined':\n      return 'Combined';\n    default:\n      return 'Unknown';\n  }\n}\n\nexport function canCombineTables(tables: Table[]): boolean {\n  if (tables.length < 2) return false;\n  \n  return tables.every(table => \n    table.isCombinable && \n    table.status === 'available' &&\n    table.diningAreaId === tables[0].diningAreaId\n  );\n}\n\nexport function calculateCombinedCapacity(tables: Table[]): number {\n  return tables.reduce((total, table) => total + table.capacity, 0);\n}\n\nexport function findOptimalTable(\n  tables: Table[],\n  partySize: number,\n  preferredArea?: string\n): Table | null {\n  let availableTables = tables.filter(table => \n    table.status === 'available' && \n    table.capacity >= partySize &&\n    (!preferredArea || table.diningAreaId === preferredArea)\n  );\n  \n  if (availableTables.length === 0) {\n    // Try to find combinable tables\n    const combinableTables = tables.filter(table => \n      table.status === 'available' && \n      table.isCombinable &&\n      (!preferredArea || table.diningAreaId === preferredArea)\n    );\n    \n    // Simple combination logic - find two tables that together meet capacity\n    for (let i = 0; i < combinableTables.length; i++) {\n      for (let j = i + 1; j < combinableTables.length; j++) {\n        const combined = [combinableTables[i], combinableTables[j]];\n        if (calculateCombinedCapacity(combined) >= partySize) {\n          return combinableTables[i]; // Return first table as primary\n        }\n      }\n    }\n    \n    return null;\n  }\n  \n  // Sort by capacity (prefer table closest to party size)\n  availableTables.sort((a, b) => {\n    const diffA = Math.abs(a.capacity - partySize);\n    const diffB = Math.abs(b.capacity - partySize);\n    return diffA - diffB;\n  });\n  \n  return availableTables[0];\n}\n\nexport function estimateTableAvailability(\n  table: Table,\n  currentReservations: Reservation[],\n  averageTurnoverTime?: number\n): string | null {\n  const currentTime = new Date();\n  const turnover = averageTurnoverTime || table.estimatedTurnoverTime || 120;\n  \n  if (table.status === 'available') return 'Now';\n  if (table.status === 'maintenance' || table.status === 'cleaning') return null;\n  \n  // Find current or next reservation\n  const activeReservation = currentReservations.find(res => \n    res.tableId === table.id && \n    res.status === 'seated' &&\n    new Date(res.seatedAt || res.dateTime) <= currentTime\n  );\n  \n  if (activeReservation) {\n    const seatedTime = new Date(activeReservation.seatedAt || activeReservation.dateTime);\n    const estimatedEnd = new Date(seatedTime.getTime() + turnover * 60000);\n    \n    if (estimatedEnd > currentTime) {\n      return formatTime(estimatedEnd.toISOString());\n    }\n  }\n  \n  return 'Now';\n}\n\n// Reservation Utilities\nexport function getReservationStatusColor(status: ReservationStatus): string {\n  switch (status) {\n    case 'confirmed':\n      return '#10B981'; // green\n    case 'pending':\n      return '#F59E0B'; // amber\n    case 'seated':\n      return '#3B82F6'; // blue\n    case 'completed':\n      return '#6B7280'; // gray\n    case 'cancelled':\n      return '#EF4444'; // red\n    case 'no-show':\n      return '#DC2626'; // dark red\n    default:\n      return '#6B7280';\n  }\n}\n\nexport function getReservationStatusLabel(status: ReservationStatus): string {\n  switch (status) {\n    case 'confirmed':\n      return 'Confirmed';\n    case 'pending':\n      return 'Pending';\n    case 'seated':\n      return 'Seated';\n    case 'completed':\n      return 'Completed';\n    case 'cancelled':\n      return 'Cancelled';\n    case 'no-show':\n      return 'No Show';\n    default:\n      return 'Unknown';\n  }\n}\n\nexport function isReservationLate(reservation: Reservation): boolean {\n  if (reservation.status !== 'confirmed' && reservation.status !== 'pending') {\n    return false;\n  }\n  \n  const now = new Date();\n  const reservationTime = new Date(reservation.dateTime);\n  const gracePeriod = 15 * 60 * 1000; // 15 minutes in milliseconds\n  \n  return now.getTime() > (reservationTime.getTime() + gracePeriod);\n}\n\nexport function getReservationTimeStatus(reservation: Reservation): 'early' | 'on-time' | 'late' | 'very-late' {\n  const now = new Date();\n  const reservationTime = new Date(reservation.dateTime);\n  const diffMinutes = (now.getTime() - reservationTime.getTime()) / (1000 * 60);\n  \n  if (diffMinutes < -30) return 'early';\n  if (diffMinutes >= -30 && diffMinutes <= 15) return 'on-time';\n  if (diffMinutes > 15 && diffMinutes <= 45) return 'late';\n  return 'very-late';\n}\n\nexport function calculateExpectedRevenue(reservation: Reservation, averageSpendPerPerson: number = 45): number {\n  if (reservation.estimatedSpend) return reservation.estimatedSpend;\n  return reservation.partySize * averageSpendPerPerson;\n}\n\n// Waitlist Utilities\nexport function getWaitlistStatusColor(status: WaitlistStatus): string {\n  switch (status) {\n    case 'waiting':\n      return '#F59E0B'; // amber\n    case 'notified':\n      return '#3B82F6'; // blue\n    case 'seated':\n      return '#10B981'; // green\n    case 'cancelled':\n      return '#EF4444'; // red\n    case 'no-show':\n      return '#DC2626'; // dark red\n    default:\n      return '#6B7280';\n  }\n}\n\nexport function getWaitlistPriorityColor(priority: string): string {\n  switch (priority) {\n    case 'vip':\n      return '#DC2626'; // red\n    case 'high':\n      return '#F59E0B'; // amber\n    case 'normal':\n      return '#10B981'; // green\n    case 'low':\n      return '#6B7280'; // gray\n    default:\n      return '#6B7280';\n  }\n}\n\nexport function updateWaitTimes(waitlist: WaitlistEntry[], averageTurnoverTime: number = 90): WaitlistEntry[] {\n  return waitlist\n    .filter(entry => entry.status === 'waiting')\n    .map((entry, index) => {\n      const baseWaitTime = (index + 1) * (averageTurnoverTime / 2);\n      const priorityMultiplier = entry.priority === 'vip' ? 0.5 : \n                                 entry.priority === 'high' ? 0.75 : 1;\n      \n      return {\n        ...entry,\n        estimatedWaitTime: Math.max(5, Math.round(baseWaitTime * priorityMultiplier))\n      };\n    });\n}\n\nexport function canSeatWaitlistEntry(entry: WaitlistEntry, availableTables: Table[]): boolean {\n  return availableTables.some(table => \n    table.status === 'available' && \n    table.capacity >= entry.partySize\n  );\n}\n\n// Guest Utilities\nexport function getGuestVIPStatusColor(status: VIPStatus): string {\n  switch (status) {\n    case 'celebrity':\n      return '#DC2626'; // red\n    case 'vip':\n      return '#F59E0B'; // amber\n    case 'frequent':\n      return '#3B82F6'; // blue\n    case 'regular':\n      return '#6B7280'; // gray\n    default:\n      return '#6B7280';\n  }\n}\n\nexport function getGuestVIPStatusLabel(status: VIPStatus): string {\n  switch (status) {\n    case 'celebrity':\n      return 'Celebrity';\n    case 'vip':\n      return 'VIP';\n    case 'frequent':\n      return 'Frequent Guest';\n    case 'regular':\n      return 'Regular';\n    default:\n      return 'Guest';\n  }\n}\n\nexport function calculateGuestLTV(guest: Guest): number {\n  if (guest.totalVisits === 0) return 0;\n  \n  const monthsSinceFirstVisit = guest.visitHistory.length > 0 \n    ? getDurationInMinutes(guest.createdAt, new Date().toISOString()) / (60 * 24 * 30)\n    : 1;\n  \n  const visitsPerMonth = guest.totalVisits / Math.max(monthsSinceFirstVisit, 1);\n  const projectedAnnualVisits = visitsPerMonth * 12;\n  \n  return projectedAnnualVisits * guest.averageSpend * 3; // 3-year projection\n}\n\nexport function getGuestTags(guest: Guest): string[] {\n  const tags = [];\n  \n  if (guest.vipStatus !== 'regular') {\n    tags.push(getGuestVIPStatusLabel(guest.vipStatus));\n  }\n  \n  if (guest.totalVisits > 50) tags.push('Loyal Customer');\n  if (guest.averageSpend > 100) tags.push('High Spender');\n  if (guest.preferences.dietaryRestrictions?.length) tags.push('Dietary Restrictions');\n  if (guest.preferences.allergies?.length) tags.push('Allergies');\n  if (guest.dateOfBirth) tags.push('Birthday on File');\n  if (guest.anniversary) tags.push('Anniversary on File');\n  \n  const daysSinceLastVisit = guest.lastVisit \n    ? getDurationInMinutes(guest.lastVisit, new Date().toISOString()) / (60 * 24)\n    : Infinity;\n  \n  if (daysSinceLastVisit > 90) tags.push('Needs Follow-up');\n  if (daysSinceLastVisit <= 7) tags.push('Recent Visitor');\n  \n  return tags;\n}\n\n// Floor Plan Utilities\nexport function isPointInTable(x: number, y: number, table: Table): boolean {\n  return x >= table.x && \n         x <= table.x + table.width && \n         y >= table.y && \n         y <= table.y + table.height;\n}\n\nexport function getTableCenter(table: Table): { x: number; y: number } {\n  return {\n    x: table.x + table.width / 2,\n    y: table.y + table.height / 2\n  };\n}\n\nexport function calculateDistance(point1: { x: number; y: number }, point2: { x: number; y: number }): number {\n  return Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2));\n}\n\nexport function findNearbyTables(table: Table, allTables: Table[], maxDistance: number = 150): Table[] {\n  const tableCenter = getTableCenter(table);\n  \n  return allTables.filter(otherTable => {\n    if (otherTable.id === table.id) return false;\n    \n    const otherCenter = getTableCenter(otherTable);\n    const distance = calculateDistance(tableCenter, otherCenter);\n    \n    return distance <= maxDistance && otherTable.diningAreaId === table.diningAreaId;\n  });\n}\n\nexport function validateTablePosition(table: Table, existingTables: Table[], floorPlan: { width: number; height: number }): string[] {\n  const errors = [];\n  \n  // Check boundaries\n  if (table.x < 0 || table.y < 0) {\n    errors.push('Table cannot be positioned outside floor plan boundaries');\n  }\n  \n  if (table.x + table.width > floorPlan.width || table.y + table.height > floorPlan.height) {\n    errors.push('Table extends beyond floor plan boundaries');\n  }\n  \n  // Check overlaps\n  const overlapping = existingTables.find(existingTable => {\n    if (existingTable.id === table.id) return false;\n    \n    return !(table.x + table.width <= existingTable.x ||\n             existingTable.x + existingTable.width <= table.x ||\n             table.y + table.height <= existingTable.y ||\n             existingTable.y + existingTable.height <= table.y);\n  });\n  \n  if (overlapping) {\n    errors.push(`Table overlaps with table ${overlapping.number}`);\n  }\n  \n  return errors;\n}\n\n// Analytics Utilities\nexport function calculateTableUtilization(turnover: TableTurnover): number {\n  const totalPossibleTurns = 8; // Assuming 8 possible turns per day\n  return (turnover.totalTurns / totalPossibleTurns) * 100;\n}\n\nexport function calculateAverageWaitTime(waitlist: WaitlistEntry[]): number {\n  const seatedEntries = waitlist.filter(entry => entry.status === 'seated' && entry.seatedAt);\n  \n  if (seatedEntries.length === 0) return 0;\n  \n  const totalWaitTime = seatedEntries.reduce((sum, entry) => {\n    const waitTime = getDurationInMinutes(entry.addedAt, entry.seatedAt!);\n    return sum + waitTime;\n  }, 0);\n  \n  return totalWaitTime / seatedEntries.length;\n}\n\nexport function predictPeakTimes(reservations: Reservation[]): { time: string; count: number }[] {\n  const timeCounts: { [key: string]: number } = {};\n  \n  reservations.forEach(reservation => {\n    const hour = new Date(reservation.dateTime).getHours();\n    const timeSlot = `${hour}:00`;\n    timeCounts[timeSlot] = (timeCounts[timeSlot] || 0) + 1;\n  });\n  \n  return Object.entries(timeCounts)\n    .map(([time, count]) => ({ time, count }))\n    .sort((a, b) => b.count - a.count);\n}\n\n// Validation Utilities\nexport function validateReservationData(data: any): string[] {\n  const errors = [];\n  \n  if (!data.partySize || data.partySize < 1 || data.partySize > 20) {\n    errors.push('Party size must be between 1 and 20');\n  }\n  \n  if (!data.dateTime) {\n    errors.push('Date and time is required');\n  } else {\n    const reservationDate = new Date(data.dateTime);\n    const now = new Date();\n    \n    if (reservationDate < now) {\n      errors.push('Reservation time cannot be in the past');\n    }\n    \n    const maxAdvanceBooking = new Date();\n    maxAdvanceBooking.setDate(maxAdvanceBooking.getDate() + 60);\n    \n    if (reservationDate > maxAdvanceBooking) {\n      errors.push('Reservations cannot be made more than 60 days in advance');\n    }\n  }\n  \n  if (data.guest) {\n    if (!data.guest.firstName || data.guest.firstName.trim().length < 2) {\n      errors.push('First name must be at least 2 characters');\n    }\n    \n    if (!data.guest.lastName || data.guest.lastName.trim().length < 2) {\n      errors.push('Last name must be at least 2 characters');\n    }\n    \n    if (!data.guest.phone || !/^\\+?[\\d\\s\\-\\(\\)]+$/.test(data.guest.phone)) {\n      errors.push('Valid phone number is required');\n    }\n    \n    if (data.guest.email && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(data.guest.email)) {\n      errors.push('Valid email address is required');\n    }\n  }\n  \n  return errors;\n}\n\nexport function validateGuestData(data: any): string[] {\n  const errors = [];\n  \n  if (!data.firstName || data.firstName.trim().length < 2) {\n    errors.push('First name must be at least 2 characters');\n  }\n  \n  if (!data.lastName || data.lastName.trim().length < 2) {\n    errors.push('Last name must be at least 2 characters');\n  }\n  \n  if (!data.phone || !/^\\+?[\\d\\s\\-\\(\\)]+$/.test(data.phone)) {\n    errors.push('Valid phone number is required');\n  }\n  \n  if (data.email && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(data.email)) {\n    errors.push('Valid email address is required');\n  }\n  \n  if (data.dateOfBirth) {\n    const birthDate = new Date(data.dateOfBirth);\n    const now = new Date();\n    const age = now.getFullYear() - birthDate.getFullYear();\n    \n    if (age < 0 || age > 120) {\n      errors.push('Invalid date of birth');\n    }\n  }\n  \n  return errors;\n}\n\n// Search and Filter Utilities\nexport function searchGuests(guests: Guest[], query: string): Guest[] {\n  const searchTerm = query.toLowerCase().trim();\n  \n  if (!searchTerm) return guests;\n  \n  return guests.filter(guest => \n    guest.firstName.toLowerCase().includes(searchTerm) ||\n    guest.lastName.toLowerCase().includes(searchTerm) ||\n    guest.phone.includes(searchTerm) ||\n    guest.email?.toLowerCase().includes(searchTerm) ||\n    `${guest.firstName} ${guest.lastName}`.toLowerCase().includes(searchTerm)\n  );\n}\n\nexport function sortReservations(reservations: Reservation[], sortBy: 'time' | 'name' | 'party' | 'status', order: 'asc' | 'desc' = 'asc'): Reservation[] {\n  return [...reservations].sort((a, b) => {\n    let comparison = 0;\n    \n    switch (sortBy) {\n      case 'time':\n        comparison = new Date(a.dateTime).getTime() - new Date(b.dateTime).getTime();\n        break;\n      case 'party':\n        comparison = a.partySize - b.partySize;\n        break;\n      case 'status':\n        comparison = a.status.localeCompare(b.status);\n        break;\n      default:\n        comparison = 0;\n    }\n    \n    return order === 'desc' ? -comparison : comparison;\n  });\n}","'use client';\n\nimport React, { useState, useMemo } from 'react';\nimport { Reservation, Guest, Table, ReservationStatus } from '@/lib/reservations/types';\nimport { \n  formatTime, \n  formatDate, \n  getReservationStatusColor, \n  getReservationStatusLabel,\n  isReservationLate,\n  getReservationTimeStatus\n} from '@/lib/reservations/utils';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { DataTable } from '@/components/ui/data-table';\nimport { ReservationDetails } from './reservation-details';\nimport { updateReservationAction, seatReservationAction, cancelReservationAction } from '@/app/reservations/actions';\n\ninterface ReservationGridProps {\n  reservations: Reservation[];\n  guests: Guest[];\n  tables: Table[];\n  onReservationUpdate?: (reservation: Reservation) => void;\n  className?: string;\n}\n\nexport function ReservationGrid({\n  reservations,\n  guests,\n  tables,\n  onReservationUpdate,\n  className = ''\n}: ReservationGridProps) {\n  const [selectedReservation, setSelectedReservation] = useState<Reservation | null>(null);\n  const [isDetailsOpen, setIsDetailsOpen] = useState(false);\n  const [loadingActions, setLoadingActions] = useState<Record<string, boolean>>({});\n\n  const guestMap = useMemo(() => {\n    return guests.reduce((acc, guest) => {\n      acc[guest.id] = guest;\n      return acc;\n    }, {} as Record<string, Guest>);\n  }, [guests]);\n\n  const tableMap = useMemo(() => {\n    return tables.reduce((acc, table) => {\n      acc[table.id] = table;\n      return acc;\n    }, {} as Record<string, Table>);\n  }, [tables]);\n\n  const handleActionClick = async (\n    reservationId: string, \n    action: 'seat' | 'cancel' | 'complete' | 'no-show',\n    tableId?: string\n  ) => {\n    setLoadingActions(prev => ({ ...prev, [reservationId]: true }));\n\n    try {\n      let result;\n      switch (action) {\n        case 'seat':\n          if (!tableId) {\n            throw new Error('Table ID required for seating');\n          }\n          result = await seatReservationAction(reservationId, tableId);\n          break;\n        case 'cancel':\n          result = await cancelReservationAction(reservationId);\n          break;\n        case 'complete':\n          result = await updateReservationAction(reservationId, { status: 'completed' });\n          break;\n        case 'no-show':\n          result = await updateReservationAction(reservationId, { status: 'no-show' });\n          break;\n      }\n\n      if (result.success && result.data && onReservationUpdate) {\n        onReservationUpdate(result.data);\n      }\n    } catch (error) {\n      console.error(`Action ${action} failed:`, error);\n    } finally {\n      setLoadingActions(prev => ({ ...prev, [reservationId]: false }));\n    }\n  };\n\n  const getTimeStatusBadge = (reservation: Reservation) => {\n    if (reservation.status !== 'confirmed' && reservation.status !== 'pending') {\n      return null;\n    }\n\n    const timeStatus = getReservationTimeStatus(reservation);\n    let variant: 'default' | 'secondary' | 'destructive' | 'outline' = 'default';\n    let text = '';\n\n    switch (timeStatus) {\n      case 'early':\n        variant = 'secondary';\n        text = 'Early';\n        break;\n      case 'on-time':\n        variant = 'default';\n        text = 'On Time';\n        break;\n      case 'late':\n        variant = 'outline';\n        text = 'Late';\n        break;\n      case 'very-late':\n        variant = 'destructive';\n        text = 'Very Late';\n        break;\n    }\n\n    return <Badge variant={variant} className=\"text-xs\">{text}</Badge>;\n  };\n\n  const getAvailableTables = (partySize: number) => {\n    return tables.filter(table => \n      table.status === 'available' && table.capacity >= partySize\n    );\n  };\n\n  const columns = [\n    {\n      header: 'Time',\n      accessorKey: 'dateTime',\n      cell: ({ row }: { row: { original: Reservation } }) => (\n        <div className=\"space-y-1\">\n          <div className=\"font-medium\">{formatTime(row.original.dateTime)}</div>\n          <div className=\"text-sm text-gray-500\">{formatDate(row.original.dateTime)}</div>\n          {getTimeStatusBadge(row.original)}\n        </div>\n      ),\n    },\n    {\n      header: 'Guest',\n      cell: ({ row }: { row: { original: Reservation } }) => {\n        const guest = guestMap[row.original.guestId];\n        return (\n          <div className=\"space-y-1\">\n            <div className=\"font-medium\">\n              {guest ? `${guest.firstName} ${guest.lastName}` : 'Unknown Guest'}\n            </div>\n            {guest?.phone && (\n              <div className=\"text-sm text-gray-500\">{guest.phone}</div>\n            )}\n            {guest?.vipStatus !== 'regular' && (\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {guest.vipStatus.toUpperCase()}\n              </Badge>\n            )}\n          </div>\n        );\n      },\n    },\n    {\n      header: 'Party',\n      accessorKey: 'partySize',\n      cell: ({ row }: { row: { original: Reservation } }) => (\n        <div className=\"text-center\">\n          <div className=\"font-semibold text-lg\">{row.original.partySize}</div>\n          <div className=\"text-xs text-gray-500\">guests</div>\n        </div>\n      ),\n    },\n    {\n      header: 'Table',\n      cell: ({ row }: { row: { original: Reservation } }) => {\n        const table = row.original.tableId ? tableMap[row.original.tableId] : null;\n        return (\n          <div className=\"space-y-1\">\n            {table ? (\n              <>\n                <div className=\"font-medium\">Table {table.number}</div>\n                <Badge \n                  variant=\"outline\" \n                  className=\"text-xs\"\n                  style={{ backgroundColor: getReservationStatusColor(row.original.status) + '20' }}\n                >\n                  {getReservationStatusLabel(row.original.status)}\n                </Badge>\n              </>\n            ) : (\n              <span className=\"text-gray-500\">Not assigned</span>\n            )}\n          </div>\n        );\n      },\n    },\n    {\n      header: 'Status',\n      cell: ({ row }: { row: { original: Reservation } }) => {\n        const isLate = isReservationLate(row.original);\n        return (\n          <div className=\"space-y-1\">\n            <Badge \n              style={{ \n                backgroundColor: getReservationStatusColor(row.original.status),\n                color: 'white'\n              }}\n            >\n              {getReservationStatusLabel(row.original.status)}\n            </Badge>\n            {isLate && (\n              <Badge variant=\"destructive\" className=\"text-xs\">LATE</Badge>\n            )}\n          </div>\n        );\n      },\n    },\n    {\n      header: 'Special Requests',\n      cell: ({ row }: { row: { original: Reservation } }) => (\n        <div className=\"max-w-xs\">\n          {row.original.specialRequests && (\n            <div className=\"text-sm text-gray-600 truncate\" title={row.original.specialRequests}>\n              {row.original.specialRequests}\n            </div>\n          )}\n          {row.original.occasion && (\n            <Badge variant=\"outline\" className=\"text-xs mt-1\">\n              {row.original.occasion}\n            </Badge>\n          )}\n        </div>\n      ),\n    },\n    {\n      header: 'Actions',\n      cell: ({ row }: { row: { original: Reservation } }) => {\n        const reservation = row.original;\n        const guest = guestMap[reservation.guestId];\n        const availableTables = getAvailableTables(reservation.partySize);\n        const isLoading = loadingActions[reservation.id];\n\n        return (\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={() => {\n                setSelectedReservation(reservation);\n                setIsDetailsOpen(true);\n              }}\n            >\n              Details\n            </Button>\n\n            {reservation.status === 'confirmed' && !reservation.tableId && availableTables.length > 0 && (\n              <Button\n                size=\"sm\"\n                onClick={() => handleActionClick(reservation.id, 'seat', availableTables[0].id)}\n                disabled={isLoading}\n              >\n                {isLoading ? 'Seating...' : `Seat at ${availableTables[0].number}`}\n              </Button>\n            )}\n\n            {reservation.status === 'seated' && (\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => handleActionClick(reservation.id, 'complete')}\n                disabled={isLoading}\n              >\n                {isLoading ? 'Completing...' : 'Complete'}\n              </Button>\n            )}\n\n            {(reservation.status === 'confirmed' || reservation.status === 'pending') && (\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => handleActionClick(reservation.id, 'no-show')}\n                disabled={isLoading}\n              >\n                No Show\n              </Button>\n            )}\n\n            {(reservation.status === 'confirmed' || reservation.status === 'pending') && (\n              <Button\n                size=\"sm\"\n                variant=\"destructive\"\n                onClick={() => handleActionClick(reservation.id, 'cancel')}\n                disabled={isLoading}\n              >\n                {isLoading ? 'Cancelling...' : 'Cancel'}\n              </Button>\n            )}\n          </div>\n        );\n      },\n    },\n  ];\n\n  // Group reservations by date for better organization\n  const groupedReservations = useMemo(() => {\n    const groups: Record<string, Reservation[]> = {};\n    \n    reservations.forEach(reservation => {\n      const dateKey = formatDate(reservation.dateTime);\n      if (!groups[dateKey]) {\n        groups[dateKey] = [];\n      }\n      groups[dateKey].push(reservation);\n    });\n\n    // Sort reservations within each group by time\n    Object.keys(groups).forEach(dateKey => {\n      groups[dateKey].sort((a, b) => \n        new Date(a.dateTime).getTime() - new Date(b.dateTime).getTime()\n      );\n    });\n\n    return groups;\n  }, [reservations]);\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {Object.entries(groupedReservations).map(([date, dateReservations]) => (\n        <Card key={date} className=\"overflow-hidden\">\n          <div className=\"px-6 py-4 bg-gray-50 border-b\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">{date}</h3>\n            <div className=\"flex items-center space-x-4 mt-2 text-sm text-gray-600\">\n              <span>{dateReservations.length} reservations</span>\n              <span>\n                {dateReservations.reduce((sum, res) => sum + res.partySize, 0)} total guests\n              </span>\n              <div className=\"flex space-x-3\">\n                <span className=\"text-green-600\">\n                  {dateReservations.filter(r => r.status === 'confirmed').length} confirmed\n                </span>\n                <span className=\"text-blue-600\">\n                  {dateReservations.filter(r => r.status === 'seated').length} seated\n                </span>\n                <span className=\"text-gray-600\">\n                  {dateReservations.filter(r => r.status === 'completed').length} completed\n                </span>\n              </div>\n            </div>\n          </div>\n          \n          <DataTable\n            columns={columns}\n            data={dateReservations}\n            searchable={false}\n            pagination={{ pageSize: 10 }}\n          />\n        </Card>\n      ))}\n\n      {reservations.length === 0 && (\n        <Card className=\"p-8 text-center\">\n          <div className=\"text-gray-500\">\n            <div className=\"text-lg font-medium mb-2\">No reservations found</div>\n            <div className=\"text-sm\">Create a new reservation to get started.</div>\n          </div>\n        </Card>\n      )}\n\n      {/* Reservation Details Modal */}\n      {selectedReservation && (\n        <ReservationDetails\n          reservation={selectedReservation}\n          guest={guestMap[selectedReservation.guestId]}\n          table={selectedReservation.tableId ? tableMap[selectedReservation.tableId] : undefined}\n          isOpen={isDetailsOpen}\n          onClose={() => {\n            setIsDetailsOpen(false);\n            setSelectedReservation(null);\n          }}\n          onUpdate={onReservationUpdate}\n        />\n      )}\n    </div>\n  );\n}","'use client';\n\nimport React, { useState } from 'react';\nimport { Reservation, Guest, Table } from '@/lib/reservations/types';\nimport { formatDateTime, getReservationStatusColor } from '@/lib/reservations/utils';\nimport { Modal } from '@/components/ui/modal';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card } from '@/components/ui/card';\n\ninterface ReservationDetailsProps {\n  reservation: Reservation;\n  guest?: Guest;\n  table?: Table;\n  isOpen: boolean;\n  onClose: () => void;\n  onUpdate?: (reservation: Reservation) => void;\n}\n\nexport function ReservationDetails({\n  reservation,\n  guest,\n  table,\n  isOpen,\n  onClose,\n  onUpdate\n}: ReservationDetailsProps) {\n  const [isEditing, setIsEditing] = useState(false);\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} className=\"max-w-2xl\">\n      <div className=\"p-6\">\n        <h2 className=\"text-xl font-semibold mb-4\">Reservation Details</h2>\n        \n        <div className=\"space-y-4\">\n          <Card className=\"p-4\">\n            <div className=\"flex justify-between items-start\">\n              <div>\n                <h3 className=\"font-medium\">\n                  {guest ? `${guest.firstName} ${guest.lastName}` : 'Unknown Guest'}\n                </h3>\n                <p className=\"text-gray-600\">{formatDateTime(reservation.dateTime)}</p>\n                <p className=\"text-gray-600\">{reservation.partySize} guests</p>\n              </div>\n              <Badge style={{ backgroundColor: getReservationStatusColor(reservation.status) }}>\n                {reservation.status}\n              </Badge>\n            </div>\n          </Card>\n\n          {/* Placeholder for detailed information */}\n          <div className=\"text-gray-500 text-center py-8\">\n            Detailed reservation information would be displayed here\n          </div>\n        </div>\n\n        <div className=\"flex justify-end space-x-2 mt-6\">\n          <Button variant=\"ghost\" onClick={onClose}>\n            Close\n          </Button>\n          <Button onClick={() => setIsEditing(true)}>\n            Edit\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n}","/* __next_internal_action_entry_do_not_use__ [{\"60da97403df77a32677291ba24e46f04df12a8b480\":\"updateReservationAction\"},\"app/reservations/actions.ts\",\"\"] */\"use turbopack no side effects\";import{createServerReference,callServer,findSourceMapURL}from\"private-next-rsc-action-client-wrapper\";export var updateReservationAction=/*#__PURE__*/createServerReference(\"60da97403df77a32677291ba24e46f04df12a8b480\",callServer,void 0,findSourceMapURL,\"updateReservationAction\");","/* __next_internal_action_entry_do_not_use__ [{\"60914b440cc33feca29dd81bfddf1cf97dbebdba13\":\"seatReservationAction\"},\"app/reservations/actions.ts\",\"\"] */\"use turbopack no side effects\";import{createServerReference,callServer,findSourceMapURL}from\"private-next-rsc-action-client-wrapper\";export var seatReservationAction=/*#__PURE__*/createServerReference(\"60914b440cc33feca29dd81bfddf1cf97dbebdba13\",callServer,void 0,findSourceMapURL,\"seatReservationAction\");","/* __next_internal_action_entry_do_not_use__ [{\"6042007cc1c3fa5dfa785c91858b90cbff06afff87\":\"cancelReservationAction\"},\"app/reservations/actions.ts\",\"\"] */\"use turbopack no side effects\";import{createServerReference,callServer,findSourceMapURL}from\"private-next-rsc-action-client-wrapper\";export var cancelReservationAction=/*#__PURE__*/createServerReference(\"6042007cc1c3fa5dfa785c91858b90cbff06afff87\",callServer,void 0,findSourceMapURL,\"cancelReservationAction\");","/* __next_internal_action_entry_do_not_use__ [{\"40d53966cd22908b34c3a388219981590c16f1b09c\":\"createReservationAction\"},\"app/reservations/actions.ts\",\"\"] */\"use turbopack no side effects\";import{createServerReference,callServer,findSourceMapURL}from\"private-next-rsc-action-client-wrapper\";export var createReservationAction=/*#__PURE__*/createServerReference(\"40d53966cd22908b34c3a388219981590c16f1b09c\",callServer,void 0,findSourceMapURL,\"createReservationAction\");","'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { CreateReservationData, Guest } from '@/lib/reservations/types';\nimport { validateReservationData, getTimeSlots } from '@/lib/reservations/utils';\nimport { createReservationAction } from '@/app/reservations/actions';\nimport { getGuests, getAvailability } from '@/lib/reservations/data';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Modal } from '@/components/ui/modal';\nimport { Card } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { GuestSearch } from './guest-search';\n\ninterface ReservationFormProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess?: (reservation: any) => void;\n  initialDate?: string;\n  initialTime?: string;\n  className?: string;\n}\n\nexport function ReservationForm({\n  isOpen,\n  onClose,\n  onSuccess,\n  initialDate,\n  initialTime,\n  className = ''\n}: ReservationFormProps) {\n  const [formData, setFormData] = useState<CreateReservationData>({\n    partySize: 2,\n    dateTime: '',\n    duration: 120,\n    source: 'phone',\n    specialRequests: '',\n    occasion: '',\n    notes: ''\n  });\n\n  const [selectedGuest, setSelectedGuest] = useState<Guest | null>(null);\n  const [showGuestForm, setShowGuestForm] = useState(false);\n  const [newGuest, setNewGuest] = useState({\n    firstName: '',\n    lastName: '',\n    phone: '',\n    email: ''\n  });\n\n  const [availableSlots, setAvailableSlots] = useState<string[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errors, setErrors] = useState<string[]>([]);\n  const [selectedDate, setSelectedDate] = useState(initialDate || '');\n  const [selectedTime, setSelectedTime] = useState(initialTime || '');\n\n  // Initialize form with initial values\n  useEffect(() => {\n    if (initialDate && initialTime) {\n      const dateTime = `${initialDate}T${selectedTime}:00`;\n      setFormData(prev => ({ ...prev, dateTime }));\n    }\n  }, [initialDate, initialTime, selectedTime]);\n\n  // Fetch available time slots when date or party size changes\n  useEffect(() => {\n    if (selectedDate) {\n      fetchAvailableSlots();\n    }\n  }, [selectedDate, formData.partySize]);\n\n  const fetchAvailableSlots = async () => {\n    try {\n      const availability = await getAvailability(selectedDate);\n      const slots = availability.slots\n        .filter(slot => slot.available >= formData.partySize)\n        .map(slot => slot.time);\n      setAvailableSlots(slots);\n    } catch (error) {\n      console.error('Failed to fetch availability:', error);\n      setAvailableSlots(getTimeSlots()); // Fallback to default slots\n    }\n  };\n\n  const handleInputChange = (field: string, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    setErrors([]); // Clear errors when user makes changes\n  };\n\n  const handleDateTimeChange = () => {\n    if (selectedDate && selectedTime) {\n      const dateTime = `${selectedDate}T${selectedTime}:00`;\n      handleInputChange('dateTime', dateTime);\n    }\n  };\n\n  useEffect(() => {\n    handleDateTimeChange();\n  }, [selectedDate, selectedTime]);\n\n  const handleGuestSelect = (guest: Guest) => {\n    setSelectedGuest(guest);\n    setShowGuestForm(false);\n    setFormData(prev => ({ ...prev, guestId: guest.id }));\n  };\n\n  const handleNewGuestChange = (field: string, value: string) => {\n    setNewGuest(prev => ({ ...prev, [field]: value }));\n  };\n\n  const validateForm = (): boolean => {\n    const validationErrors = validateReservationData({\n      ...formData,\n      guest: showGuestForm ? newGuest : undefined\n    });\n\n    if (!selectedGuest && !showGuestForm) {\n      validationErrors.push('Please select a guest or add a new one');\n    }\n\n    if (showGuestForm) {\n      if (!newGuest.firstName.trim()) validationErrors.push('First name is required');\n      if (!newGuest.lastName.trim()) validationErrors.push('Last name is required');\n      if (!newGuest.phone.trim()) validationErrors.push('Phone number is required');\n    }\n\n    setErrors(validationErrors);\n    return validationErrors.length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      const reservationData: CreateReservationData = {\n        ...formData,\n        guestId: selectedGuest?.id,\n        guest: showGuestForm ? newGuest : undefined\n      };\n\n      const result = await createReservationAction(reservationData);\n\n      if (result.success) {\n        if (onSuccess && result.data) {\n          onSuccess(result.data);\n        }\n        onClose();\n        resetForm();\n      } else {\n        setErrors([result.error || 'Failed to create reservation']);\n      }\n    } catch (error) {\n      setErrors(['An unexpected error occurred. Please try again.']);\n      console.error('Reservation creation error:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      partySize: 2,\n      dateTime: '',\n      duration: 120,\n      source: 'phone',\n      specialRequests: '',\n      occasion: '',\n      notes: ''\n    });\n    setSelectedGuest(null);\n    setShowGuestForm(false);\n    setNewGuest({ firstName: '', lastName: '', phone: '', email: '' });\n    setSelectedDate('');\n    setSelectedTime('');\n    setErrors([]);\n  };\n\n  const handleClose = () => {\n    resetForm();\n    onClose();\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={handleClose} className={`max-w-2xl ${className}`}>\n      <div className=\"p-6\">\n        <h2 className=\"text-xl font-semibold text-gray-900 mb-6\">New Reservation</h2>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Guest Selection */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Guest Information\n            </label>\n            \n            {!selectedGuest && !showGuestForm && (\n              <div className=\"space-y-3\">\n                <GuestSearch \n                  onGuestSelect={handleGuestSelect}\n                  placeholder=\"Search for existing guest...\"\n                />\n                <div className=\"text-center\">\n                  <span className=\"text-gray-500 text-sm\">or </span>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setShowGuestForm(true)}\n                  >\n                    Add New Guest\n                  </Button>\n                </div>\n              </div>\n            )}\n\n            {selectedGuest && (\n              <Card className=\"p-4 bg-green-50 border-green-200\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <div className=\"font-medium\">\n                      {selectedGuest.firstName} {selectedGuest.lastName}\n                    </div>\n                    <div className=\"text-sm text-gray-600\">\n                      {selectedGuest.phone} • {selectedGuest.email}\n                    </div>\n                    <div className=\"flex space-x-2 mt-2\">\n                      <Badge variant=\"outline\">{selectedGuest.vipStatus}</Badge>\n                      <Badge variant=\"outline\">{selectedGuest.totalVisits} visits</Badge>\n                    </div>\n                  </div>\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    onClick={() => setSelectedGuest(null)}\n                  >\n                    Change\n                  </Button>\n                </div>\n              </Card>\n            )}\n\n            {showGuestForm && (\n              <Card className=\"p-4 border-blue-200 bg-blue-50\">\n                <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                  <Input\n                    label=\"First Name\"\n                    value={newGuest.firstName}\n                    onChange={(e) => handleNewGuestChange('firstName', e.target.value)}\n                    required\n                  />\n                  <Input\n                    label=\"Last Name\"\n                    value={newGuest.lastName}\n                    onChange={(e) => handleNewGuestChange('lastName', e.target.value)}\n                    required\n                  />\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <Input\n                    label=\"Phone Number\"\n                    type=\"tel\"\n                    value={newGuest.phone}\n                    onChange={(e) => handleNewGuestChange('phone', e.target.value)}\n                    required\n                  />\n                  <Input\n                    label=\"Email (Optional)\"\n                    type=\"email\"\n                    value={newGuest.email}\n                    onChange={(e) => handleNewGuestChange('email', e.target.value)}\n                  />\n                </div>\n                <div className=\"flex justify-end mt-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    onClick={() => setShowGuestForm(false)}\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </Card>\n            )}\n          </div>\n\n          {/* Reservation Details */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <Input\n              label=\"Date\"\n              type=\"date\"\n              value={selectedDate}\n              onChange={(e) => setSelectedDate(e.target.value)}\n              min={new Date().toISOString().split('T')[0]}\n              required\n            />\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Time\n              </label>\n              <select\n                value={selectedTime}\n                onChange={(e) => setSelectedTime(e.target.value)}\n                className=\"w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                required\n              >\n                <option value=\"\">Select time</option>\n                {availableSlots.map(slot => (\n                  <option key={slot} value={slot}>\n                    {slot}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <Input\n              label=\"Party Size\"\n              type=\"number\"\n              min=\"1\"\n              max=\"20\"\n              value={formData.partySize}\n              onChange={(e) => handleInputChange('partySize', parseInt(e.target.value))}\n              required\n            />\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Duration (minutes)\n              </label>\n              <select\n                value={formData.duration}\n                onChange={(e) => handleInputChange('duration', parseInt(e.target.value))}\n                className=\"w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              >\n                <option value={90}>90 minutes</option>\n                <option value={120}>2 hours</option>\n                <option value={150}>2.5 hours</option>\n                <option value={180}>3 hours</option>\n              </select>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Source\n              </label>\n              <select\n                value={formData.source}\n                onChange={(e) => handleInputChange('source', e.target.value)}\n                className=\"w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              >\n                <option value=\"phone\">Phone</option>\n                <option value=\"online\">Online</option>\n                <option value=\"walk-in\">Walk-in</option>\n                <option value=\"app\">Mobile App</option>\n              </select>\n            </div>\n\n            <Input\n              label=\"Special Occasion (Optional)\"\n              value={formData.occasion || ''}\n              onChange={(e) => handleInputChange('occasion', e.target.value)}\n              placeholder=\"Birthday, Anniversary, etc.\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Special Requests\n            </label>\n            <textarea\n              value={formData.specialRequests || ''}\n              onChange={(e) => handleInputChange('specialRequests', e.target.value)}\n              rows={3}\n              className=\"w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              placeholder=\"Window seat, high chair, allergies, etc.\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Internal Notes\n            </label>\n            <textarea\n              value={formData.notes || ''}\n              onChange={(e) => handleInputChange('notes', e.target.value)}\n              rows={2}\n              className=\"w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              placeholder=\"Staff notes (not visible to guest)\"\n            />\n          </div>\n\n          {/* Error Display */}\n          {errors.length > 0 && (\n            <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\n              <div className=\"text-sm text-red-600\">\n                <div className=\"font-medium mb-1\">Please fix the following errors:</div>\n                <ul className=\"list-disc list-inside space-y-1\">\n                  {errors.map((error, index) => (\n                    <li key={index}>{error}</li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          )}\n\n          {/* Form Actions */}\n          <div className=\"flex justify-end space-x-3 pt-6 border-t\">\n            <Button\n              type=\"button\"\n              variant=\"ghost\"\n              onClick={handleClose}\n              disabled={isLoading}\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"min-w-[120px]\"\n            >\n              {isLoading ? 'Creating...' : 'Create Reservation'}\n            </Button>\n          </div>\n        </form>\n      </div>\n    </Modal>\n  );\n}","'use client';\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Guest } from '@/lib/reservations/types';\nimport { getGuests } from '@/lib/reservations/data';\nimport { searchGuests } from '@/lib/reservations/utils';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\n\ninterface GuestSearchProps {\n  onGuestSelect: (guest: Guest) => void;\n  placeholder?: string;\n  className?: string;\n}\n\nexport function GuestSearch({ \n  onGuestSelect, \n  placeholder = \"Search guests...\",\n  className = '' \n}: GuestSearchProps) {\n  const [query, setQuery] = useState('');\n  const [guests, setGuests] = useState<Guest[]>([]);\n  const [filteredGuests, setFilteredGuests] = useState<Guest[]>([]);\n  const [isOpen, setIsOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedIndex, setSelectedIndex] = useState(-1);\n  \n  const inputRef = useRef<HTMLInputElement>(null);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  // Load all guests on component mount\n  useEffect(() => {\n    loadGuests();\n  }, []);\n\n  // Filter guests when query changes\n  useEffect(() => {\n    if (query.trim().length > 0) {\n      const filtered = searchGuests(guests, query);\n      setFilteredGuests(filtered.slice(0, 10)); // Limit to 10 results\n      setIsOpen(filtered.length > 0);\n      setSelectedIndex(-1);\n    } else {\n      setFilteredGuests([]);\n      setIsOpen(false);\n      setSelectedIndex(-1);\n    }\n  }, [query, guests]);\n\n  const loadGuests = async () => {\n    try {\n      setIsLoading(true);\n      const guestData = await getGuests();\n      setGuests(guestData);\n    } catch (error) {\n      console.error('Failed to load guests:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(e.target.value);\n  };\n\n  const handleInputFocus = () => {\n    if (query.trim().length > 0 && filteredGuests.length > 0) {\n      setIsOpen(true);\n    }\n  };\n\n  const handleInputBlur = () => {\n    // Delay closing to allow for clicks on dropdown items\n    setTimeout(() => {\n      setIsOpen(false);\n    }, 200);\n  };\n\n  const handleGuestClick = (guest: Guest) => {\n    setQuery(`${guest.firstName} ${guest.lastName}`);\n    setIsOpen(false);\n    onGuestSelect(guest);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (!isOpen || filteredGuests.length === 0) return;\n\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        setSelectedIndex(prev => \n          prev < filteredGuests.length - 1 ? prev + 1 : prev\n        );\n        break;\n      \n      case 'ArrowUp':\n        e.preventDefault();\n        setSelectedIndex(prev => prev > 0 ? prev - 1 : -1);\n        break;\n      \n      case 'Enter':\n        e.preventDefault();\n        if (selectedIndex >= 0 && selectedIndex < filteredGuests.length) {\n          handleGuestClick(filteredGuests[selectedIndex]);\n        }\n        break;\n      \n      case 'Escape':\n        setIsOpen(false);\n        setSelectedIndex(-1);\n        inputRef.current?.blur();\n        break;\n    }\n  };\n\n  const getGuestVIPBadge = (guest: Guest) => {\n    if (guest.vipStatus === 'regular') return null;\n    \n    const colors = {\n      frequent: 'bg-blue-100 text-blue-800',\n      vip: 'bg-purple-100 text-purple-800',\n      celebrity: 'bg-red-100 text-red-800'\n    };\n\n    return (\n      <Badge className={`text-xs ${colors[guest.vipStatus]}`}>\n        {guest.vipStatus.toUpperCase()}\n      </Badge>\n    );\n  };\n\n  const formatPhoneNumber = (phone: string) => {\n    // Simple phone number formatting\n    const cleaned = phone.replace(/\\D/g, '');\n    if (cleaned.length === 10) {\n      return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6)}`;\n    }\n    return phone;\n  };\n\n  const highlightMatch = (text: string, query: string) => {\n    if (!query) return text;\n    \n    const regex = new RegExp(`(${query.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')})`, 'gi');\n    const parts = text.split(regex);\n    \n    return parts.map((part, index) => \n      regex.test(part) ? (\n        <mark key={index} className=\"bg-yellow-200\">{part}</mark>\n      ) : (\n        part\n      )\n    );\n  };\n\n  return (\n    <div className={`relative ${className}`}>\n      <Input\n        ref={inputRef}\n        type=\"text\"\n        placeholder={placeholder}\n        value={query}\n        onChange={handleInputChange}\n        onFocus={handleInputFocus}\n        onBlur={handleInputBlur}\n        onKeyDown={handleKeyDown}\n        className=\"w-full\"\n        disabled={isLoading}\n      />\n\n      {isLoading && (\n        <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n          <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-gray-300 border-t-blue-600\"></div>\n        </div>\n      )}\n\n      {isOpen && (\n        <div \n          ref={dropdownRef}\n          className=\"absolute z-50 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg max-h-60 overflow-y-auto\"\n        >\n          {filteredGuests.length > 0 ? (\n            <ul className=\"py-1\">\n              {filteredGuests.map((guest, index) => (\n                <li\n                  key={guest.id}\n                  className={`px-4 py-3 cursor-pointer transition-colors ${\n                    index === selectedIndex \n                      ? 'bg-blue-50 border-l-2 border-blue-500' \n                      : 'hover:bg-gray-50'\n                  }`}\n                  onClick={() => handleGuestClick(guest)}\n                >\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-1\">\n                        <span className=\"font-medium text-gray-900\">\n                          {highlightMatch(`${guest.firstName} ${guest.lastName}`, query)}\n                        </span>\n                        {getGuestVIPBadge(guest)}\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-4 text-sm text-gray-600\">\n                        <span>{highlightMatch(formatPhoneNumber(guest.phone), query)}</span>\n                        {guest.email && (\n                          <span>{highlightMatch(guest.email, query)}</span>\n                        )}\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-4 text-xs text-gray-500 mt-1\">\n                        <span>{guest.totalVisits} visits</span>\n                        <span>Avg: ${guest.averageSpend.toFixed(0)}</span>\n                        {guest.lastVisit && (\n                          <span>\n                            Last: {new Date(guest.lastVisit).toLocaleDateString()}\n                          </span>\n                        )}\n                      </div>\n\n                      {/* Preferences indicators */}\n                      {(guest.preferences.dietaryRestrictions?.length || \n                        guest.preferences.allergies?.length ||\n                        guest.preferences.seatingPreference) && (\n                        <div className=\"flex flex-wrap gap-1 mt-2\">\n                          {guest.preferences.seatingPreference && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {guest.preferences.seatingPreference}\n                            </Badge>\n                          )}\n                          {guest.preferences.dietaryRestrictions?.map(restriction => (\n                            <Badge key={restriction} variant=\"outline\" className=\"text-xs bg-orange-50 text-orange-700\">\n                              {restriction}\n                            </Badge>\n                          ))}\n                          {guest.preferences.allergies?.map(allergy => (\n                            <Badge key={allergy} variant=\"outline\" className=\"text-xs bg-red-50 text-red-700\">\n                              ⚠️ {allergy}\n                            </Badge>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </li>\n              ))}\n            </ul>\n          ) : query.length > 2 ? (\n            <div className=\"px-4 py-3 text-sm text-gray-500 text-center\">\n              No guests found matching \"{query}\"\n            </div>\n          ) : (\n            <div className=\"px-4 py-3 text-sm text-gray-500 text-center\">\n              Type at least 3 characters to search\n            </div>\n          )}\n\n          {/* Quick add option when no results */}\n          {query.length > 2 && filteredGuests.length === 0 && (\n            <div className=\"border-t border-gray-200\">\n              <button\n                type=\"button\"\n                className=\"w-full px-4 py-3 text-sm text-left text-blue-600 hover:bg-blue-50 transition-colors\"\n                onClick={() => {\n                  // This would trigger the new guest form\n                  setQuery('');\n                  setIsOpen(false);\n                }}\n              >\n                + Add \"{query}\" as new guest\n              </button>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}","'use client';\n\nimport React from 'react';\nimport { ReservationFilters } from '@/lib/reservations/types';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\n\ninterface ReservationFiltersProps {\n  filters: ReservationFilters;\n  onFiltersChange: (filters: ReservationFilters) => void;\n}\n\nexport function ReservationFilters({ filters, onFiltersChange }: ReservationFiltersProps) {\n  return (\n    <div className=\"bg-gray-50 p-4 rounded-lg space-y-4\">\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Input\n          label=\"Date\"\n          type=\"date\"\n          value={filters.date || ''}\n          onChange={(e) => onFiltersChange({ ...filters, date: e.target.value })}\n        />\n        \n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Status</label>\n          <select\n            className=\"w-full p-2 border border-gray-300 rounded-md\"\n            onChange={(e) => onFiltersChange({ \n              ...filters, \n              status: e.target.value ? [e.target.value as any] : undefined \n            })}\n          >\n            <option value=\"\">All Statuses</option>\n            <option value=\"confirmed\">Confirmed</option>\n            <option value=\"pending\">Pending</option>\n            <option value=\"seated\">Seated</option>\n            <option value=\"completed\">Completed</option>\n            <option value=\"cancelled\">Cancelled</option>\n            <option value=\"no-show\">No Show</option>\n          </select>\n        </div>\n\n        <Input\n          label=\"Min Party Size\"\n          type=\"number\"\n          min=\"1\"\n          value={filters.partySize?.min || ''}\n          onChange={(e) => onFiltersChange({\n            ...filters,\n            partySize: { ...filters.partySize, min: parseInt(e.target.value) || undefined }\n          })}\n        />\n\n        <Input\n          label=\"Max Party Size\"\n          type=\"number\"\n          min=\"1\"\n          value={filters.partySize?.max || ''}\n          onChange={(e) => onFiltersChange({\n            ...filters,\n            partySize: { ...filters.partySize, max: parseInt(e.target.value) || undefined }\n          })}\n        />\n      </div>\n\n      <div className=\"flex justify-end\">\n        <Button\n          variant=\"outline\"\n          onClick={() => onFiltersChange({})}\n        >\n          Clear Filters\n        </Button>\n      </div>\n    </div>\n  );\n}","'use client';\n\nimport React, { useState, useRef, useCallback } from 'react';\nimport { Table, DiningArea, FloorPlanElement } from '@/lib/reservations/types';\nimport { getTableStatusColor, isPointInTable, getTableCenter } from '@/lib/reservations/utils';\nimport { updateTableStatusAction } from '@/app/reservations/actions';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\n\ninterface FloorPlanProps {\n  diningArea: DiningArea;\n  tables: Table[];\n  isEditable?: boolean;\n  selectedTableId?: string | null;\n  onTableSelect?: (table: Table) => void;\n  onTableStatusChange?: (tableId: string, status: Table['status']) => void;\n  className?: string;\n}\n\ninterface TablePosition {\n  id: string;\n  x: number;\n  y: number;\n}\n\nexport function FloorPlan({\n  diningArea,\n  tables,\n  isEditable = false,\n  selectedTableId,\n  onTableSelect,\n  onTableStatusChange,\n  className = ''\n}: FloorPlanProps) {\n  const svgRef = useRef<SVGSVGElement>(null);\n  const [draggedTable, setDraggedTable] = useState<string | null>(null);\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n  const [hoveredTable, setHoveredTable] = useState<string | null>(null);\n\n  const handleTableClick = useCallback((table: Table) => {\n    if (onTableSelect) {\n      onTableSelect(table);\n    }\n  }, [onTableSelect]);\n\n  const handleTableDragStart = useCallback((e: React.MouseEvent, table: Table) => {\n    if (!isEditable) return;\n    \n    e.preventDefault();\n    const rect = svgRef.current?.getBoundingClientRect();\n    if (!rect) return;\n\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    \n    setDraggedTable(table.id);\n    setDragOffset({\n      x: x - table.x,\n      y: y - table.y\n    });\n  }, [isEditable]);\n\n  const handleMouseMove = useCallback((e: React.MouseEvent) => {\n    if (!draggedTable || !svgRef.current) return;\n\n    const rect = svgRef.current.getBoundingClientRect();\n    const x = e.clientX - rect.left - dragOffset.x;\n    const y = e.clientY - rect.top - dragOffset.y;\n\n    // Update table position (in a real app, this would update state)\n    const tableElement = document.getElementById(`table-${draggedTable}`);\n    if (tableElement) {\n      tableElement.setAttribute('x', x.toString());\n      tableElement.setAttribute('y', y.toString());\n    }\n  }, [draggedTable, dragOffset]);\n\n  const handleMouseUp = useCallback(() => {\n    setDraggedTable(null);\n    setDragOffset({ x: 0, y: 0 });\n  }, []);\n\n  const getTableShape = (table: Table) => {\n    const { x, y, width, height, shape } = table;\n    \n    switch (shape) {\n      case 'round':\n        const radius = Math.min(width, height) / 2;\n        const centerX = x + width / 2;\n        const centerY = y + height / 2;\n        return (\n          <circle\n            cx={centerX}\n            cy={centerY}\n            r={radius}\n            fill={getTableStatusColor(table.status)}\n            stroke={selectedTableId === table.id ? '#3B82F6' : '#374151'}\n            strokeWidth={selectedTableId === table.id ? 3 : 1.5}\n            opacity={table.status === 'maintenance' ? 0.5 : 1}\n          />\n        );\n      \n      case 'square':\n      case 'rectangular':\n      default:\n        return (\n          <rect\n            x={x}\n            y={y}\n            width={width}\n            height={height}\n            fill={getTableStatusColor(table.status)}\n            stroke={selectedTableId === table.id ? '#3B82F6' : '#374151'}\n            strokeWidth={selectedTableId === table.id ? 3 : 1.5}\n            rx={4}\n            opacity={table.status === 'maintenance' ? 0.5 : 1}\n          />\n        );\n    }\n  };\n\n  const getTableLabel = (table: Table) => {\n    const center = getTableCenter(table);\n    return (\n      <text\n        x={center.x}\n        y={center.y}\n        textAnchor=\"middle\"\n        dominantBaseline=\"central\"\n        fontSize=\"12\"\n        fontWeight=\"600\"\n        fill=\"white\"\n        className=\"pointer-events-none select-none\"\n      >\n        {table.number}\n      </text>\n    );\n  };\n\n  const getCapacityLabel = (table: Table) => {\n    const center = getTableCenter(table);\n    return (\n      <text\n        x={center.x}\n        y={center.y + 15}\n        textAnchor=\"middle\"\n        dominantBaseline=\"central\"\n        fontSize=\"10\"\n        fill=\"white\"\n        className=\"pointer-events-none select-none\"\n        opacity={0.8}\n      >\n        {table.capacity} seats\n      </text>\n    );\n  };\n\n  const renderGrid = () => {\n    const gridSize = 20;\n    const lines = [];\n    \n    // Vertical lines\n    for (let x = 0; x <= diningArea.layout.width; x += gridSize) {\n      lines.push(\n        <line\n          key={`v-${x}`}\n          x1={x}\n          y1={0}\n          x2={x}\n          y2={diningArea.layout.height}\n          stroke=\"#E5E7EB\"\n          strokeWidth={0.5}\n          opacity={0.3}\n        />\n      );\n    }\n    \n    // Horizontal lines\n    for (let y = 0; y <= diningArea.layout.height; y += gridSize) {\n      lines.push(\n        <line\n          key={`h-${y}`}\n          x1={0}\n          y1={y}\n          x2={diningArea.layout.width}\n          y2={y}\n          stroke=\"#E5E7EB\"\n          strokeWidth={0.5}\n          opacity={0.3}\n        />\n      );\n    }\n    \n    return lines;\n  };\n\n  return (\n    <Card className={`p-4 ${className}`}>\n      <div className=\"mb-4\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">{diningArea.name}</h3>\n          <div className=\"flex items-center space-x-2\">\n            <Badge variant=\"outline\" className=\"text-xs\">\n              Floor {diningArea.floor}\n            </Badge>\n            <Badge variant=\"outline\" className=\"text-xs\">\n              {tables.length} Tables\n            </Badge>\n          </div>\n        </div>\n        \n        {/* Status Legend */}\n        <div className=\"flex flex-wrap gap-3 mt-2 text-xs\">\n          <div className=\"flex items-center space-x-1\">\n            <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n            <span>Available</span>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n            <span>Occupied</span>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <div className=\"w-3 h-3 rounded-full bg-amber-500\"></div>\n            <span>Reserved</span>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <div className=\"w-3 h-3 rounded-full bg-gray-500\"></div>\n            <span>Cleaning</span>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <div className=\"w-3 h-3 rounded-full bg-purple-500\"></div>\n            <span>Maintenance</span>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <div className=\"w-3 h-3 rounded-full bg-blue-500\"></div>\n            <span>Combined</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"border rounded-lg overflow-hidden bg-white\">\n        <svg\n          ref={svgRef}\n          width=\"100%\"\n          height=\"400\"\n          viewBox={`0 0 ${diningArea.layout.width} ${diningArea.layout.height}`}\n          className=\"bg-gray-50\"\n          onMouseMove={handleMouseMove}\n          onMouseUp={handleMouseUp}\n          onMouseLeave={handleMouseUp}\n        >\n          {/* Grid */}\n          {isEditable && renderGrid()}\n          \n          {/* Background Image */}\n          {diningArea.layout.backgroundImage && (\n            <image\n              href={diningArea.layout.backgroundImage}\n              width={diningArea.layout.width}\n              height={diningArea.layout.height}\n              opacity={0.3}\n            />\n          )}\n          \n          {/* Tables */}\n          {tables.map((table) => (\n            <g\n              key={table.id}\n              id={`table-${table.id}`}\n              className={`cursor-pointer ${isEditable ? 'hover:opacity-80' : ''}`}\n              onMouseDown={(e) => isEditable && handleTableDragStart(e, table)}\n              onClick={() => handleTableClick(table)}\n              onMouseEnter={() => setHoveredTable(table.id)}\n              onMouseLeave={() => setHoveredTable(null)}\n            >\n              {getTableShape(table)}\n              {getTableLabel(table)}\n              {hoveredTable === table.id && getCapacityLabel(table)}\n            </g>\n          ))}\n          \n          {/* Selected Table Highlight */}\n          {selectedTableId && tables.find(t => t.id === selectedTableId) && (\n            <g className=\"pointer-events-none\">\n              {(() => {\n                const table = tables.find(t => t.id === selectedTableId)!;\n                const center = getTableCenter(table);\n                return (\n                  <circle\n                    cx={center.x}\n                    cy={center.y}\n                    r={Math.max(table.width, table.height) / 2 + 10}\n                    fill=\"none\"\n                    stroke=\"#3B82F6\"\n                    strokeWidth={2}\n                    strokeDasharray=\"5,5\"\n                    opacity={0.7}\n                  >\n                    <animateTransform\n                      attributeName=\"transform\"\n                      type=\"rotate\"\n                      values={`0 ${center.x} ${center.y};360 ${center.x} ${center.y}`}\n                      dur=\"3s\"\n                      repeatCount=\"indefinite\"\n                    />\n                  </circle>\n                );\n              })()}\n            </g>\n          )}\n        </svg>\n      </div>\n\n      {/* Table Status Summary */}\n      <div className=\"mt-4 grid grid-cols-2 md:grid-cols-6 gap-2 text-sm\">\n        <div className=\"text-center\">\n          <div className=\"font-semibold text-green-600\">\n            {tables.filter(t => t.status === 'available').length}\n          </div>\n          <div className=\"text-gray-600\">Available</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"font-semibold text-red-600\">\n            {tables.filter(t => t.status === 'occupied').length}\n          </div>\n          <div className=\"text-gray-600\">Occupied</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"font-semibold text-amber-600\">\n            {tables.filter(t => t.status === 'reserved').length}\n          </div>\n          <div className=\"text-gray-600\">Reserved</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"font-semibold text-gray-600\">\n            {tables.filter(t => t.status === 'cleaning').length}\n          </div>\n          <div className=\"text-gray-600\">Cleaning</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"font-semibold text-purple-600\">\n            {tables.filter(t => t.status === 'maintenance').length}\n          </div>\n          <div className=\"text-gray-600\">Maintenance</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"font-semibold text-blue-600\">\n            {tables.filter(t => t.status === 'combined').length}\n          </div>\n          <div className=\"text-gray-600\">Combined</div>\n        </div>\n      </div>\n\n      {/* Quick Actions for Selected Table */}\n      {selectedTableId && onTableStatusChange && (\n        <div className=\"mt-4 p-3 bg-gray-50 rounded-lg\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm font-medium text-gray-700\">\n              Table {tables.find(t => t.id === selectedTableId)?.number} Actions:\n            </span>\n            <div className=\"flex space-x-2\">\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => onTableStatusChange(selectedTableId, 'available')}\n              >\n                Set Available\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => onTableStatusChange(selectedTableId, 'cleaning')}\n              >\n                Start Cleaning\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => onTableStatusChange(selectedTableId, 'maintenance')}\n              >\n                Maintenance\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </Card>\n  );\n}","'use client';\n\nimport React from 'react';\nimport { FloorPlan } from './floor-plan';\nimport { DiningArea, Table } from '@/lib/reservations/types';\n\ninterface FloorPlanEditorProps {\n  diningArea: DiningArea;\n  tables: Table[];\n  onTableUpdate?: (table: Table) => void;\n}\n\nexport function FloorPlanEditor({ diningArea, tables, onTableUpdate }: FloorPlanEditorProps) {\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold\">Floor Plan Editor</h3>\n        <div className=\"text-sm text-gray-500\">\n          Drag and drop to rearrange tables\n        </div>\n      </div>\n      \n      <FloorPlan\n        diningArea={diningArea}\n        tables={tables}\n        isEditable={true}\n        onTableStatusChange={(tableId, status) => {\n          const table = tables.find(t => t.id === tableId);\n          if (table && onTableUpdate) {\n            onTableUpdate({ ...table, status });\n          }\n        }}\n      />\n    </div>\n  );\n}","'use client';\n\nimport React from 'react';\nimport { Table } from '@/lib/reservations/types';\nimport { getTableStatusColor, getTableStatusLabel } from '@/lib/reservations/utils';\nimport { Card } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\n\ninterface TableCardProps {\n  table: Table;\n  onClick?: () => void;\n  className?: string;\n}\n\nexport function TableCard({ table, onClick, className = '' }: TableCardProps) {\n  return (\n    <Card \n      className={`p-4 cursor-pointer hover:shadow-md transition-shadow ${className}`}\n      onClick={onClick}\n    >\n      <div className=\"flex items-center justify-between mb-2\">\n        <span className=\"font-semibold\">Table {table.number}</span>\n        <Badge style={{ backgroundColor: getTableStatusColor(table.status) }}>\n          {getTableStatusLabel(table.status)}\n        </Badge>\n      </div>\n      <div className=\"text-sm text-gray-600\">\n        <div>Capacity: {table.capacity} guests</div>\n        <div>Shape: {table.shape}</div>\n      </div>\n    </Card>\n  );\n}","'use client';\n\nimport React from 'react';\nimport { TableStatus } from '@/lib/reservations/types';\nimport { getTableStatusColor, getTableStatusLabel } from '@/lib/reservations/utils';\n\ninterface TableStatusIndicatorProps {\n  status: TableStatus;\n  size?: 'sm' | 'md' | 'lg';\n}\n\nexport function TableStatusIndicator({ status, size = 'md' }: TableStatusIndicatorProps) {\n  const sizeClasses = {\n    sm: 'w-2 h-2',\n    md: 'w-3 h-3',\n    lg: 'w-4 h-4'\n  };\n\n  return (\n    <div className=\"flex items-center space-x-2\">\n      <div \n        className={`${sizeClasses[size]} rounded-full`}\n        style={{ backgroundColor: getTableStatusColor(status) }}\n      />\n      <span className=\"text-sm\">{getTableStatusLabel(status)}</span>\n    </div>\n  );\n}","/* __next_internal_action_entry_do_not_use__ [{\"4024748d30c4fcef516363c66fa5b418d80eeaf8c7\":\"addToWaitlistAction\"},\"app/reservations/actions.ts\",\"\"] */\"use turbopack no side effects\";import{createServerReference,callServer,findSourceMapURL}from\"private-next-rsc-action-client-wrapper\";export var addToWaitlistAction=/*#__PURE__*/createServerReference(\"4024748d30c4fcef516363c66fa5b418d80eeaf8c7\",callServer,void 0,findSourceMapURL,\"addToWaitlistAction\");","'use client';\n\nimport React, { useState } from 'react';\nimport { CreateWaitlistEntryData, WaitlistEntry } from '@/lib/reservations/types';\nimport { addToWaitlistAction } from '@/app/reservations/actions';\nimport { Modal } from '@/components/ui/modal';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\n\ninterface WaitlistFormProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess?: (entry: WaitlistEntry) => void;\n}\n\nexport function WaitlistForm({ isOpen, onClose, onSuccess }: WaitlistFormProps) {\n  const [formData, setFormData] = useState<CreateWaitlistEntryData>({\n    partySize: 2,\n    estimatedWaitTime: 30,\n    quotedWaitTime: 30\n  });\n\n  const [newGuest, setNewGuest] = useState({\n    firstName: '',\n    lastName: '',\n    phone: ''\n  });\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const result = await addToWaitlistAction({\n        ...formData,\n        guest: newGuest\n      });\n\n      if (result.success && result.data) {\n        onSuccess?.(result.data);\n      }\n    } catch (error) {\n      console.error('Failed to add to waitlist:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} className=\"max-w-md\">\n      <div className=\"p-6\">\n        <h2 className=\"text-xl font-semibold mb-4\">Add to Waitlist</h2>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <Input\n            label=\"First Name\"\n            value={newGuest.firstName}\n            onChange={(e) => setNewGuest(prev => ({ ...prev, firstName: e.target.value }))}\n            required\n          />\n          \n          <Input\n            label=\"Last Name\"\n            value={newGuest.lastName}\n            onChange={(e) => setNewGuest(prev => ({ ...prev, lastName: e.target.value }))}\n            required\n          />\n          \n          <Input\n            label=\"Phone Number\"\n            value={newGuest.phone}\n            onChange={(e) => setNewGuest(prev => ({ ...prev, phone: e.target.value }))}\n            required\n          />\n          \n          <Input\n            label=\"Party Size\"\n            type=\"number\"\n            min=\"1\"\n            max=\"20\"\n            value={formData.partySize}\n            onChange={(e) => setFormData(prev => ({ ...prev, partySize: parseInt(e.target.value) }))}\n            required\n          />\n          \n          <Input\n            label=\"Quoted Wait Time (minutes)\"\n            type=\"number\"\n            min=\"5\"\n            max=\"180\"\n            value={formData.quotedWaitTime}\n            onChange={(e) => setFormData(prev => ({ ...prev, quotedWaitTime: parseInt(e.target.value) }))}\n            required\n          />\n\n          <div className=\"flex justify-end space-x-2 pt-4\">\n            <Button variant=\"ghost\" onClick={onClose} disabled={isLoading}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={isLoading}>\n              {isLoading ? 'Adding...' : 'Add to Waitlist'}\n            </Button>\n          </div>\n        </form>\n      </div>\n    </Modal>\n  );\n}","/* __next_internal_action_entry_do_not_use__ [{\"604d883b7d27fa43d93da04432e8172984fbefa056\":\"updateWaitlistEntryAction\"},\"app/reservations/actions.ts\",\"\"] */\"use turbopack no side effects\";import{createServerReference,callServer,findSourceMapURL}from\"private-next-rsc-action-client-wrapper\";export var updateWaitlistEntryAction=/*#__PURE__*/createServerReference(\"604d883b7d27fa43d93da04432e8172984fbefa056\",callServer,void 0,findSourceMapURL,\"updateWaitlistEntryAction\");","/* __next_internal_action_entry_do_not_use__ [{\"60372304174c5128ffdb48de6d0db7514f4ed30799\":\"seatFromWaitlistAction\"},\"app/reservations/actions.ts\",\"\"] */\"use turbopack no side effects\";import{createServerReference,callServer,findSourceMapURL}from\"private-next-rsc-action-client-wrapper\";export var seatFromWaitlistAction=/*#__PURE__*/createServerReference(\"60372304174c5128ffdb48de6d0db7514f4ed30799\",callServer,void 0,findSourceMapURL,\"seatFromWaitlistAction\");","'use client';\n\nimport React, { useState, useMemo } from 'react';\nimport { WaitlistEntry, Guest, Table } from '@/lib/reservations/types';\nimport { \n  getWaitlistStatusColor, \n  getWaitlistPriorityColor,\n  formatTime,\n  updateWaitTimes,\n  canSeatWaitlistEntry\n} from '@/lib/reservations/utils';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { WaitlistForm } from './waitlist-form';\nimport { updateWaitlistEntryAction, seatFromWaitlistAction } from '@/app/reservations/actions';\n\ninterface WaitlistPanelProps {\n  waitlist: WaitlistEntry[];\n  guests: Guest[];\n  availableTables: Table[];\n  onWaitlistUpdate?: (entry: WaitlistEntry) => void;\n  className?: string;\n}\n\nexport function WaitlistPanel({\n  waitlist,\n  guests,\n  availableTables,\n  onWaitlistUpdate,\n  className = ''\n}: WaitlistPanelProps) {\n  const [isAddFormOpen, setIsAddFormOpen] = useState(false);\n  const [loadingActions, setLoadingActions] = useState<Record<string, boolean>>({});\n\n  const guestMap = useMemo(() => {\n    return guests.reduce((acc, guest) => {\n      acc[guest.id] = guest;\n      return acc;\n    }, {} as Record<string, Guest>);\n  }, [guests]);\n\n  // Update wait times based on current position\n  const updatedWaitlist = useMemo(() => {\n    const waitingEntries = waitlist.filter(entry => entry.status === 'waiting');\n    return updateWaitTimes(waitingEntries, 90); // 90-minute average turnover\n  }, [waitlist]);\n\n  const handleActionClick = async (\n    entryId: string,\n    action: 'notify' | 'seat' | 'cancel' | 'no-show',\n    tableId?: string\n  ) => {\n    setLoadingActions(prev => ({ ...prev, [entryId]: true }));\n\n    try {\n      let result;\n      switch (action) {\n        case 'notify':\n          result = await updateWaitlistEntryAction(entryId, 'notified');\n          break;\n        case 'seat':\n          if (!tableId) {\n            throw new Error('Table ID required for seating');\n          }\n          result = await seatFromWaitlistAction(entryId, tableId);\n          break;\n        case 'cancel':\n          result = await updateWaitlistEntryAction(entryId, 'cancelled');\n          break;\n        case 'no-show':\n          result = await updateWaitlistEntryAction(entryId, 'no-show');\n          break;\n      }\n\n      if (result.success && result.data && onWaitlistUpdate) {\n        if ('waitlistEntry' in result.data) {\n          onWaitlistUpdate(result.data.waitlistEntry);\n        } else {\n          onWaitlistUpdate(result.data as WaitlistEntry);\n        }\n      }\n    } catch (error) {\n      console.error(`Waitlist action ${action} failed:`, error);\n    } finally {\n      setLoadingActions(prev => ({ ...prev, [entryId]: false }));\n    }\n  };\n\n  const getOptimalTable = (entry: WaitlistEntry) => {\n    const suitableTables = availableTables.filter(table => \n      table.capacity >= entry.partySize &&\n      table.status === 'available'\n    );\n\n    if (suitableTables.length === 0) return null;\n\n    // Find the table with capacity closest to party size\n    return suitableTables.reduce((best, current) => {\n      const bestDiff = Math.abs(best.capacity - entry.partySize);\n      const currentDiff = Math.abs(current.capacity - entry.partySize);\n      return currentDiff < bestDiff ? current : best;\n    });\n  };\n\n  const getPriorityIcon = (priority: string) => {\n    switch (priority) {\n      case 'vip':\n        return '👑';\n      case 'high':\n        return '⭐';\n      case 'normal':\n        return '👥';\n      case 'low':\n        return '⏳';\n      default:\n        return '👥';\n    }\n  };\n\n  const waitingEntries = updatedWaitlist.filter(entry => entry.status === 'waiting');\n  const notifiedEntries = waitlist.filter(entry => entry.status === 'notified');\n  const totalWaitTime = waitingEntries.reduce((sum, entry) => sum + entry.estimatedWaitTime, 0);\n  const averageWaitTime = waitingEntries.length > 0 ? Math.round(totalWaitTime / waitingEntries.length) : 0;\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      {/* Waitlist Header */}\n      <Card className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 className=\"text-lg font-semibold text-gray-900\">Digital Waitlist</h2>\n          <Button onClick={() => setIsAddFormOpen(true)}>\n            Add Walk-in\n          </Button>\n        </div>\n\n        {/* Waitlist Stats */}\n        <div className=\"grid grid-cols-4 gap-4 text-center\">\n          <div>\n            <div className=\"text-2xl font-bold text-blue-600\">{waitingEntries.length}</div>\n            <div className=\"text-sm text-gray-600\">Waiting</div>\n          </div>\n          <div>\n            <div className=\"text-2xl font-bold text-amber-600\">{notifiedEntries.length}</div>\n            <div className=\"text-sm text-gray-600\">Notified</div>\n          </div>\n          <div>\n            <div className=\"text-2xl font-bold text-gray-600\">{averageWaitTime}m</div>\n            <div className=\"text-sm text-gray-600\">Avg Wait</div>\n          </div>\n          <div>\n            <div className=\"text-2xl font-bold text-green-600\">{availableTables.length}</div>\n            <div className=\"text-sm text-gray-600\">Tables Ready</div>\n          </div>\n        </div>\n      </Card>\n\n      {/* Waiting List */}\n      {waitingEntries.length > 0 && (\n        <Card className=\"p-4\">\n          <h3 className=\"text-md font-semibold text-gray-900 mb-4\">Currently Waiting</h3>\n          <div className=\"space-y-3\">\n            {waitingEntries.map((entry, index) => {\n              const guest = guestMap[entry.guestId];\n              const optimalTable = getOptimalTable(entry);\n              const isLoading = loadingActions[entry.id];\n              const position = index + 1;\n\n              return (\n                <div \n                  key={entry.id} \n                  className=\"flex items-center justify-between p-3 bg-white border rounded-lg hover:shadow-sm transition-shadow\"\n                >\n                  <div className=\"flex items-center space-x-4\">\n                    {/* Position */}\n                    <div className=\"flex items-center justify-center w-8 h-8 bg-blue-100 text-blue-600 rounded-full font-semibold\">\n                      {position}\n                    </div>\n\n                    {/* Guest Info */}\n                    <div>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"font-medium\">\n                          {guest ? `${guest.firstName} ${guest.lastName}` : 'Unknown Guest'}\n                        </span>\n                        <span className=\"text-sm text-gray-600\">\n                          {getPriorityIcon(entry.priority)}\n                        </span>\n                        <Badge \n                          variant=\"outline\"\n                          style={{ \n                            borderColor: getWaitlistPriorityColor(entry.priority),\n                            color: getWaitlistPriorityColor(entry.priority)\n                          }}\n                        >\n                          {entry.priority.toUpperCase()}\n                        </Badge>\n                      </div>\n                      <div className=\"flex items-center space-x-4 text-sm text-gray-600\">\n                        <span>{entry.partySize} guests</span>\n                        <span>{guest?.phone}</span>\n                        <span>Added {formatTime(entry.addedAt)}</span>\n                      </div>\n                      {entry.specialRequests && (\n                        <div className=\"text-sm text-gray-600 mt-1\">\n                          Note: {entry.specialRequests}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-4\">\n                    {/* Wait Time */}\n                    <div className=\"text-center\">\n                      <div className=\"font-semibold text-amber-600\">\n                        {entry.estimatedWaitTime}m\n                      </div>\n                      <div className=\"text-xs text-gray-500\">\n                        (quoted {entry.quotedWaitTime}m)\n                      </div>\n                    </div>\n\n                    {/* Actions */}\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleActionClick(entry.id, 'notify')}\n                        disabled={isLoading}\n                      >\n                        {isLoading ? 'Notifying...' : 'Notify'}\n                      </Button>\n\n                      {optimalTable && (\n                        <Button\n                          size=\"sm\"\n                          onClick={() => handleActionClick(entry.id, 'seat', optimalTable.id)}\n                          disabled={isLoading}\n                        >\n                          {isLoading ? 'Seating...' : `Seat at ${optimalTable.number}`}\n                        </Button>\n                      )}\n\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => handleActionClick(entry.id, 'cancel')}\n                        disabled={isLoading}\n                      >\n                        Remove\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </Card>\n      )}\n\n      {/* Notified Guests */}\n      {notifiedEntries.length > 0 && (\n        <Card className=\"p-4\">\n          <h3 className=\"text-md font-semibold text-gray-900 mb-4\">Notified Guests</h3>\n          <div className=\"space-y-3\">\n            {notifiedEntries.map((entry) => {\n              const guest = guestMap[entry.guestId];\n              const optimalTable = getOptimalTable(entry);\n              const isLoading = loadingActions[entry.id];\n              const notifiedMinutesAgo = Math.floor(\n                (Date.now() - new Date(entry.notifiedAt!).getTime()) / (1000 * 60)\n              );\n\n              return (\n                <div \n                  key={entry.id} \n                  className=\"flex items-center justify-between p-3 bg-amber-50 border border-amber-200 rounded-lg\"\n                >\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"flex items-center justify-center w-8 h-8 bg-amber-100 text-amber-600 rounded-full\">\n                      📱\n                    </div>\n\n                    <div>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"font-medium\">\n                          {guest ? `${guest.firstName} ${guest.lastName}` : 'Unknown Guest'}\n                        </span>\n                        <Badge variant=\"outline\" className=\"border-amber-400 text-amber-600\">\n                          NOTIFIED\n                        </Badge>\n                      </div>\n                      <div className=\"flex items-center space-x-4 text-sm text-gray-600\">\n                        <span>{entry.partySize} guests</span>\n                        <span>Notified {notifiedMinutesAgo}m ago</span>\n                        {notifiedMinutesAgo > 10 && (\n                          <Badge variant=\"destructive\" className=\"text-xs\">\n                            Overdue\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex space-x-2\">\n                    {optimalTable && (\n                      <Button\n                        size=\"sm\"\n                        onClick={() => handleActionClick(entry.id, 'seat', optimalTable.id)}\n                        disabled={isLoading}\n                      >\n                        {isLoading ? 'Seating...' : `Seat at ${optimalTable.number}`}\n                      </Button>\n                    )}\n\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => handleActionClick(entry.id, 'no-show')}\n                      disabled={isLoading}\n                    >\n                      No Show\n                    </Button>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </Card>\n      )}\n\n      {/* Empty State */}\n      {waitingEntries.length === 0 && notifiedEntries.length === 0 && (\n        <Card className=\"p-8 text-center\">\n          <div className=\"text-gray-500\">\n            <div className=\"text-4xl mb-4\">📋</div>\n            <div className=\"text-lg font-medium mb-2\">No guests waiting</div>\n            <div className=\"text-sm\">Walk-in guests will appear here when added to the waitlist.</div>\n          </div>\n        </Card>\n      )}\n\n      {/* Add Waitlist Entry Form */}\n      {isAddFormOpen && (\n        <WaitlistForm\n          isOpen={isAddFormOpen}\n          onClose={() => setIsAddFormOpen(false)}\n          onSuccess={(entry) => {\n            setIsAddFormOpen(false);\n            if (onWaitlistUpdate) {\n              onWaitlistUpdate(entry);\n            }\n          }}\n        />\n      )}\n    </div>\n  );\n}","'use client';\n\nimport React from 'react';\nimport { WaitlistEntry, Guest } from '@/lib/reservations/types';\nimport { getWaitlistStatusColor, formatTime } from '@/lib/reservations/utils';\nimport { Card } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\n\ninterface WaitlistEntryProps {\n  entry: WaitlistEntry;\n  guest?: Guest;\n  position: number;\n}\n\nexport function WaitlistEntry({ entry, guest, position }: WaitlistEntryProps) {\n  return (\n    <Card className=\"p-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center justify-center w-8 h-8 bg-blue-100 text-blue-600 rounded-full font-semibold\">\n            {position}\n          </div>\n          <div>\n            <div className=\"font-medium\">\n              {guest ? `${guest.firstName} ${guest.lastName}` : 'Unknown Guest'}\n            </div>\n            <div className=\"text-sm text-gray-600\">\n              {entry.partySize} guests • Added {formatTime(entry.addedAt)}\n            </div>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"text-right\">\n            <div className=\"font-semibold\">{entry.estimatedWaitTime}m</div>\n            <div className=\"text-xs text-gray-500\">wait time</div>\n          </div>\n          <Badge style={{ backgroundColor: getWaitlistStatusColor(entry.status) }}>\n            {entry.status}\n          </Badge>\n        </div>\n      </div>\n    </Card>\n  );\n}","'use client';\n\nimport React from 'react';\nimport { Guest } from '@/lib/reservations/types';\nimport { getGuestVIPStatusLabel } from '@/lib/reservations/utils';\nimport { Card } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\n\ninterface GuestProfileProps {\n  guest: Guest;\n  className?: string;\n}\n\nexport function GuestProfile({ guest, className = '' }: GuestProfileProps) {\n  return (\n    <Card className={`p-6 ${className}`}>\n      <div className=\"flex items-start justify-between mb-4\">\n        <div>\n          <h3 className=\"text-lg font-semibold\">\n            {guest.firstName} {guest.lastName}\n          </h3>\n          <p className=\"text-gray-600\">{guest.phone}</p>\n          {guest.email && <p className=\"text-gray-600\">{guest.email}</p>}\n        </div>\n        <Badge variant=\"outline\">\n          {getGuestVIPStatusLabel(guest.vipStatus)}\n        </Badge>\n      </div>\n\n      <div className=\"grid grid-cols-3 gap-4 mb-4\">\n        <div className=\"text-center\">\n          <div className=\"text-2xl font-bold text-blue-600\">{guest.totalVisits}</div>\n          <div className=\"text-sm text-gray-600\">Total Visits</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"text-2xl font-bold text-green-600\">\n            ${guest.totalSpent.toLocaleString()}\n          </div>\n          <div className=\"text-sm text-gray-600\">Total Spent</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"text-2xl font-bold text-purple-600\">\n            ${guest.averageSpend.toFixed(0)}\n          </div>\n          <div className=\"text-sm text-gray-600\">Average Spend</div>\n        </div>\n      </div>\n\n      {/* Preferences */}\n      {(guest.preferences.seatingPreference || \n        guest.preferences.dietaryRestrictions?.length ||\n        guest.preferences.allergies?.length) && (\n        <div>\n          <h4 className=\"font-medium mb-2\">Preferences & Notes</h4>\n          <div className=\"space-y-2 text-sm\">\n            {guest.preferences.seatingPreference && (\n              <div>Seating: {guest.preferences.seatingPreference}</div>\n            )}\n            {guest.preferences.dietaryRestrictions?.length && (\n              <div>Dietary: {guest.preferences.dietaryRestrictions.join(', ')}</div>\n            )}\n            {guest.preferences.allergies?.length && (\n              <div className=\"text-red-600\">\n                Allergies: {guest.preferences.allergies.join(', ')}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </Card>\n  );\n}","'use client';\n\nimport React, { useState } from 'react';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Modal } from '@/components/ui/modal';\n\ninterface GuestFormProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess?: (guest: any) => void;\n}\n\nexport function GuestForm({ isOpen, onClose, onSuccess }: GuestFormProps) {\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    phone: '',\n    email: ''\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    // Handle guest creation\n    onSuccess?.(formData);\n    onClose();\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <div className=\"p-6\">\n        <h2 className=\"text-xl font-semibold mb-4\">Add New Guest</h2>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <Input\n            label=\"First Name\"\n            value={formData.firstName}\n            onChange={(e) => setFormData(prev => ({ ...prev, firstName: e.target.value }))}\n            required\n          />\n          <Input\n            label=\"Last Name\"\n            value={formData.lastName}\n            onChange={(e) => setFormData(prev => ({ ...prev, lastName: e.target.value }))}\n            required\n          />\n          <Input\n            label=\"Phone Number\"\n            value={formData.phone}\n            onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}\n            required\n          />\n          <Input\n            label=\"Email (Optional)\"\n            type=\"email\"\n            value={formData.email}\n            onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n          />\n          <div className=\"flex justify-end space-x-2 pt-4\">\n            <Button variant=\"ghost\" onClick={onClose}>Cancel</Button>\n            <Button type=\"submit\">Add Guest</Button>\n          </div>\n        </form>\n      </div>\n    </Modal>\n  );\n}","'use client';\n\nimport React from 'react';\nimport { ReservationStats as StatsType } from '@/lib/reservations/types';\nimport { formatTime } from '@/lib/reservations/utils';\nimport { Card } from '@/components/ui/card';\nimport { StatCard } from '@/components/ui/stat-card';\nimport { Badge } from '@/components/ui/badge';\n\ninterface ReservationStatsProps {\n  stats: StatsType;\n  className?: string;\n}\n\nexport function ReservationStats({ stats, className = '' }: ReservationStatsProps) {\n  const occupancyRate = stats.current.occupiedTables + stats.current.availableTables > 0\n    ? (stats.current.occupiedTables / (stats.current.occupiedTables + stats.current.availableTables)) * 100\n    : 0;\n\n  const turnoverRate = stats.today.totalReservations > 0\n    ? (stats.today.seated / stats.today.totalReservations) * 100\n    : 0;\n\n  const noShowRate = stats.today.totalReservations > 0\n    ? (stats.today.noShows / stats.today.totalReservations) * 100\n    : 0;\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Today's Performance */}\n      <Card className=\"p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Today's Performance</h3>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <StatCard\n            title=\"Total Reservations\"\n            value={stats.today.totalReservations}\n            trend={stats.today.totalReservations > 0 ? 'up' : 'neutral'}\n            className=\"text-center\"\n          />\n          <StatCard\n            title=\"Total Covers\"\n            value={stats.today.totalCovers}\n            subtitle={`${stats.today.averagePartySize.toFixed(1)} avg party size`}\n            trend=\"up\"\n            className=\"text-center\"\n          />\n          <StatCard\n            title=\"Seated Today\"\n            value={stats.today.seated}\n            subtitle={`${turnoverRate.toFixed(1)}% turnover rate`}\n            trend={turnoverRate > 85 ? 'up' : turnoverRate > 70 ? 'neutral' : 'down'}\n            className=\"text-center\"\n          />\n          <StatCard\n            title=\"Walk-ins\"\n            value={stats.today.walkIns}\n            subtitle=\"Without reservation\"\n            trend=\"neutral\"\n            className=\"text-center\"\n          />\n        </div>\n      </Card>\n\n      {/* Current Status */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <Card className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Current Status</h3>\n          <div className=\"space-y-4\">\n            {/* Table Occupancy */}\n            <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n              <div>\n                <div className=\"text-sm font-medium text-gray-700\">Table Occupancy</div>\n                <div className=\"text-xs text-gray-500\">\n                  {stats.current.occupiedTables} of {stats.current.occupiedTables + stats.current.availableTables} tables\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"text-xl font-bold text-gray-900\">\n                  {occupancyRate.toFixed(0)}%\n                </div>\n                <div \n                  className=\"w-16 h-2 bg-gray-200 rounded-full overflow-hidden\"\n                  title={`${stats.current.occupiedTables} occupied, ${stats.current.availableTables} available`}\n                >\n                  <div \n                    className={`h-full transition-all duration-300 ${\n                      occupancyRate > 90 ? 'bg-red-500' : \n                      occupancyRate > 70 ? 'bg-amber-500' : \n                      'bg-green-500'\n                    }`}\n                    style={{ width: `${occupancyRate}%` }}\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Waitlist */}\n            <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n              <div>\n                <div className=\"text-sm font-medium text-gray-700\">Waitlist</div>\n                <div className=\"text-xs text-gray-500\">\n                  {stats.current.averageWaitTime} min average wait\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"text-xl font-bold text-amber-600\">\n                  {stats.current.waitlistSize}\n                </div>\n                {stats.current.waitlistSize > 10 && (\n                  <Badge variant=\"destructive\" className=\"text-xs\">HIGH</Badge>\n                )}\n              </div>\n            </div>\n\n            {/* Next Available */}\n            <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n              <div>\n                <div className=\"text-sm font-medium text-gray-700\">Next Available</div>\n                <div className=\"text-xs text-gray-500\">Earliest table opening</div>\n              </div>\n              <div className=\"text-lg font-semibold text-green-600\">\n                {stats.current.nextAvailableSlot \n                  ? formatTime(stats.current.nextAvailableSlot)\n                  : 'Now'\n                }\n              </div>\n            </div>\n          </div>\n        </Card>\n\n        <Card className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Today's Issues</h3>\n          <div className=\"space-y-4\">\n            {/* No Shows */}\n            <div className=\"flex items-center justify-between p-4 bg-red-50 border border-red-200 rounded-lg\">\n              <div>\n                <div className=\"text-sm font-medium text-red-700\">No Shows</div>\n                <div className=\"text-xs text-red-600\">\n                  {noShowRate.toFixed(1)}% of reservations\n                </div>\n              </div>\n              <div className=\"text-xl font-bold text-red-600\">\n                {stats.today.noShows}\n              </div>\n            </div>\n\n            {/* Pending Confirmations */}\n            <div className=\"flex items-center justify-between p-4 bg-amber-50 border border-amber-200 rounded-lg\">\n              <div>\n                <div className=\"text-sm font-medium text-amber-700\">Pending</div>\n                <div className=\"text-xs text-amber-600\">Need confirmation</div>\n              </div>\n              <div className=\"text-xl font-bold text-amber-600\">\n                {stats.today.pending}\n              </div>\n            </div>\n\n            {/* Success Metrics */}\n            <div className=\"flex items-center justify-between p-4 bg-green-50 border border-green-200 rounded-lg\">\n              <div>\n                <div className=\"text-sm font-medium text-green-700\">Successfully Seated</div>\n                <div className=\"text-xs text-green-600\">\n                  {turnoverRate.toFixed(1)}% success rate\n                </div>\n              </div>\n              <div className=\"text-xl font-bold text-green-600\">\n                {stats.today.seated}\n              </div>\n            </div>\n          </div>\n        </Card>\n      </div>\n\n      {/* Forecast */}\n      <Card className=\"p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Today's Forecast</h3>\n        <div className=\"grid grid-cols-3 gap-6\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-blue-600 mb-2\">\n              {stats.forecast.remainingCapacity}\n            </div>\n            <div className=\"text-sm text-gray-600 mb-1\">Remaining Capacity</div>\n            <div className=\"text-xs text-gray-500\">Available covers</div>\n          </div>\n\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-purple-600 mb-2\">\n              {stats.forecast.expectedTurnover}\n            </div>\n            <div className=\"text-sm text-gray-600 mb-1\">Expected Turnover</div>\n            <div className=\"text-xs text-gray-500\">Tables to turn</div>\n          </div>\n\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-green-600 mb-2\">\n              ${stats.forecast.projectedRevenue.toLocaleString()}\n            </div>\n            <div className=\"text-sm text-gray-600 mb-1\">Projected Revenue</div>\n            <div className=\"text-xs text-gray-500\">Based on bookings</div>\n          </div>\n        </div>\n\n        {/* Revenue Progress Bar */}\n        <div className=\"mt-4\">\n          <div className=\"flex items-center justify-between text-sm mb-2\">\n            <span className=\"text-gray-600\">Revenue Progress</span>\n            <span className=\"text-gray-900 font-medium\">\n              ${Math.round(stats.forecast.projectedRevenue * 0.6).toLocaleString()} / ${stats.forecast.projectedRevenue.toLocaleString()}\n            </span>\n          </div>\n          <div className=\"w-full bg-gray-200 rounded-full h-3\">\n            <div \n              className=\"bg-green-500 h-3 rounded-full transition-all duration-500\"\n              style={{ width: '60%' }}\n            />\n          </div>\n          <div className=\"text-xs text-gray-500 mt-1\">60% of projected revenue achieved</div>\n        </div>\n      </Card>\n\n      {/* Quick Insights */}\n      <Card className=\"p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Quick Insights</h3>\n        <div className=\"space-y-3\">\n          {occupancyRate > 90 && (\n            <div className=\"flex items-start space-x-3 p-3 bg-red-50 border border-red-200 rounded-lg\">\n              <div className=\"text-red-500\">⚠️</div>\n              <div>\n                <div className=\"text-sm font-medium text-red-700\">High Occupancy Alert</div>\n                <div className=\"text-xs text-red-600\">\n                  Restaurant is at {occupancyRate.toFixed(0)}% capacity. Consider managing walk-ins carefully.\n                </div>\n              </div>\n            </div>\n          )}\n\n          {stats.current.waitlistSize > 5 && (\n            <div className=\"flex items-start space-x-3 p-3 bg-amber-50 border border-amber-200 rounded-lg\">\n              <div className=\"text-amber-500\">📋</div>\n              <div>\n                <div className=\"text-sm font-medium text-amber-700\">Long Waitlist</div>\n                <div className=\"text-xs text-amber-600\">\n                  {stats.current.waitlistSize} guests waiting with {stats.current.averageWaitTime} min average wait time.\n                </div>\n              </div>\n            </div>\n          )}\n\n          {noShowRate > 15 && (\n            <div className=\"flex items-start space-x-3 p-3 bg-red-50 border border-red-200 rounded-lg\">\n              <div className=\"text-red-500\">❌</div>\n              <div>\n                <div className=\"text-sm font-medium text-red-700\">High No-Show Rate</div>\n                <div className=\"text-xs text-red-600\">\n                  {noShowRate.toFixed(1)}% no-show rate today. Consider implementing confirmation reminders.\n                </div>\n              </div>\n            </div>\n          )}\n\n          {turnoverRate > 90 && (\n            <div className=\"flex items-start space-x-3 p-3 bg-green-50 border border-green-200 rounded-lg\">\n              <div className=\"text-green-500\">✅</div>\n              <div>\n                <div className=\"text-sm font-medium text-green-700\">Excellent Performance</div>\n                <div className=\"text-xs text-green-600\">\n                  {turnoverRate.toFixed(1)}% of reservations were successfully seated. Great job!\n                </div>\n              </div>\n            </div>\n          )}\n\n          {stats.today.walkIns > stats.today.totalReservations * 0.3 && (\n            <div className=\"flex items-start space-x-3 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n              <div className=\"text-blue-500\">👥</div>\n              <div>\n                <div className=\"text-sm font-medium text-blue-700\">High Walk-in Volume</div>\n                <div className=\"text-xs text-blue-600\">\n                  {stats.today.walkIns} walk-ins today ({((stats.today.walkIns / (stats.today.totalReservations + stats.today.walkIns)) * 100).toFixed(0)}% of total guests).\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </Card>\n    </div>\n  );\n}","'use client';\n\nimport React from 'react';\nimport { Reservation } from '@/lib/reservations/types';\nimport { formatTime } from '@/lib/reservations/utils';\nimport { Card } from '@/components/ui/card';\n\ninterface ReservationTimelineProps {\n  reservations: Reservation[];\n  selectedDate: string;\n}\n\nexport function ReservationTimeline({ reservations, selectedDate }: ReservationTimelineProps) {\n  const timeSlots = ['17:00', '17:30', '18:00', '18:30', '19:00', '19:30', '20:00', '20:30', '21:00', '21:30', '22:00'];\n  \n  return (\n    <Card className=\"p-6\">\n      <h3 className=\"text-lg font-semibold mb-4\">Reservation Timeline</h3>\n      <div className=\"space-y-2\">\n        {timeSlots.map(time => {\n          const slotReservations = reservations.filter(res => \n            formatTime(res.dateTime) === time\n          );\n          \n          return (\n            <div key={time} className=\"flex items-center space-x-4 py-2 border-b\">\n              <div className=\"w-16 text-sm font-medium\">{time}</div>\n              <div className=\"flex-1\">\n                {slotReservations.length === 0 ? (\n                  <span className=\"text-gray-400\">Available</span>\n                ) : (\n                  <div className=\"flex space-x-2\">\n                    {slotReservations.map(res => (\n                      <div key={res.id} className=\"bg-blue-100 text-blue-800 px-2 py-1 rounded text-sm\">\n                        {res.partySize} guests\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </Card>\n  );\n}","'use client';\n\nimport React from 'react';\nimport { Reservation } from '@/lib/reservations/types';\nimport { Card } from '@/components/ui/card';\n\ninterface ReservationCalendarProps {\n  reservations: Reservation[];\n  selectedDate: string;\n  onDateSelect: (date: string) => void;\n}\n\nexport function ReservationCalendar({ reservations, selectedDate, onDateSelect }: ReservationCalendarProps) {\n  return (\n    <Card className=\"p-6\">\n      <h3 className=\"text-lg font-semibold mb-4\">Calendar View</h3>\n      <div className=\"text-gray-500 text-center py-8\">\n        Calendar component would be implemented here with date selection and reservation indicators\n      </div>\n    </Card>\n  );\n}","'use client';\n\nimport React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { ReservationForm } from './reservation-form';\n\ninterface ReservationHeaderProps {\n  onReservationCreated?: (reservation: any) => void;\n}\n\nexport function ReservationHeader({ onReservationCreated }: ReservationHeaderProps) {\n  const [isFormOpen, setIsFormOpen] = useState(false);\n\n  return (\n    <>\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Reservations & Tables</h1>\n          <p className=\"text-gray-600\">Manage reservations, waitlist, and table assignments</p>\n        </div>\n        <div className=\"flex space-x-3\">\n          <Button variant=\"outline\">\n            Export\n          </Button>\n          <Button onClick={() => setIsFormOpen(true)}>\n            New Reservation\n          </Button>\n        </div>\n      </div>\n\n      <ReservationForm\n        isOpen={isFormOpen}\n        onClose={() => setIsFormOpen(false)}\n        onSuccess={onReservationCreated}\n      />\n    </>\n  );\n}","'use client';\n\nimport React from 'react';\nimport { SimpleTabs } from '@/components/ui/simple-tabs';\n\ninterface ReservationNavigationProps {\n  activeTab: string;\n  onTabChange: (tab: string) => void;\n}\n\nexport function ReservationNavigation({ activeTab, onTabChange }: ReservationNavigationProps) {\n  const tabs = [\n    { id: 'dashboard', label: 'Dashboard' },\n    { id: 'reservations', label: 'Reservations' },\n    { id: 'floor-plan', label: 'Floor Plan' },\n    { id: 'waitlist', label: 'Waitlist' },\n    { id: 'guests', label: 'Guest Database' },\n  ];\n\n  return (\n    <SimpleTabs\n      tabs={tabs}\n      activeTab={activeTab}\n      onTabChange={onTabChange}\n      className=\"mb-6\"\n    />\n  );\n}","'use client';\n\nimport React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\n\ninterface QuickActionsProps {\n  onCreateReservation?: () => void;\n  onAddWalkIn?: () => void;\n  onExportData?: () => void;\n}\n\nexport function QuickActions({ onCreateReservation, onAddWalkIn, onExportData }: QuickActionsProps) {\n  return (\n    <Card className=\"p-4\">\n      <h3 className=\"text-md font-semibold mb-4\">Quick Actions</h3>\n      <div className=\"space-y-2\">\n        <Button \n          className=\"w-full justify-start\"\n          onClick={onCreateReservation}\n        >\n          + New Reservation\n        </Button>\n        <Button \n          variant=\"outline\"\n          className=\"w-full justify-start\"\n          onClick={onAddWalkIn}\n        >\n          + Add Walk-in\n        </Button>\n        <Button \n          variant=\"outline\"\n          className=\"w-full justify-start\"\n          onClick={onExportData}\n        >\n          📊 Export Data\n        </Button>\n      </div>\n    </Card>\n  );\n}","'use client';\n\nimport React, { useEffect, useState } from 'react';\nimport { ReservationUpdate } from '@/lib/reservations/types';\nimport { subscribeToUpdates } from '@/lib/reservations/data';\nimport { Card } from '@/components/ui/card';\n\ninterface RealTimeUpdatesProps {\n  onUpdate?: (update: ReservationUpdate) => void;\n}\n\nexport function RealTimeUpdates({ onUpdate }: RealTimeUpdatesProps) {\n  const [updates, setUpdates] = useState<ReservationUpdate[]>([]);\n\n  useEffect(() => {\n    const unsubscribe = subscribeToUpdates((update: ReservationUpdate) => {\n      setUpdates(prev => [update, ...prev.slice(0, 4)]); // Keep last 5 updates\n      onUpdate?.(update);\n    });\n\n    return unsubscribe;\n  }, [onUpdate]);\n\n  if (updates.length === 0) {\n    return null;\n  }\n\n  return (\n    <Card className=\"p-4\">\n      <h3 className=\"text-md font-semibold mb-2\">Live Updates</h3>\n      <div className=\"space-y-2\">\n        {updates.map((update, index) => (\n          <div key={`${update.timestamp}-${index}`} className=\"text-sm p-2 bg-blue-50 rounded border-l-2 border-blue-400\">\n            <div className=\"font-medium\">{update.type} {update.action}</div>\n            <div className=\"text-gray-600 text-xs\">\n              {new Date(update.timestamp).toLocaleTimeString()}\n            </div>\n          </div>\n        ))}\n      </div>\n    </Card>\n  );\n}","/* __next_internal_action_entry_do_not_use__ [{\"6047ae1e34a20b56161977a5db84b60a8227efbe8f\":\"updateTableStatusAction\"},\"app/reservations/actions.ts\",\"\"] */\"use turbopack no side effects\";import{createServerReference,callServer,findSourceMapURL}from\"private-next-rsc-action-client-wrapper\";export var updateTableStatusAction=/*#__PURE__*/createServerReference(\"6047ae1e34a20b56161977a5db84b60a8227efbe8f\",callServer,void 0,findSourceMapURL,\"updateTableStatusAction\");"],"names":[],"mappings":"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"}