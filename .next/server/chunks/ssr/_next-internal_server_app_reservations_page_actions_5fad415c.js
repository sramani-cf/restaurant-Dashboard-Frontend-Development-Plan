module.exports=[37571,a=>{"use strict";a.s(["4024748d30c4fcef516363c66fa5b418d80eeaf8c7",()=>A,"40d53966cd22908b34c3a388219981590c16f1b09c",()=>u,"60372304174c5128ffdb48de6d0db7514f4ed30799",()=>C,"6042007cc1c3fa5dfa785c91858b90cbff06afff87",()=>w,"6047ae1e34a20b56161977a5db84b60a8227efbe8f",()=>D,"604d883b7d27fa43d93da04432e8172984fbefa056",()=>B,"60914b440cc33feca29dd81bfddf1cf97dbebdba13",()=>x,"60da97403df77a32677291ba24e46f04df12a8b480",()=>v],37571),a.s([],78300);var b=a.i(37936),c=a.i(18558);let d=[{id:"table-1",number:"1",capacity:2,x:100,y:150,width:80,height:80,shape:"round",status:"available",diningAreaId:"main-dining",isCombinable:!1,estimatedTurnoverTime:90},{id:"table-2",number:"2",capacity:4,x:200,y:150,width:120,height:80,shape:"rectangular",status:"occupied",diningAreaId:"main-dining",isCombinable:!0,estimatedTurnoverTime:120},{id:"table-3",number:"3",capacity:4,x:350,y:150,width:120,height:80,shape:"rectangular",status:"reserved",diningAreaId:"main-dining",isCombinable:!0,estimatedTurnoverTime:120},{id:"table-4",number:"4",capacity:6,x:100,y:300,width:140,height:100,shape:"rectangular",status:"cleaning",diningAreaId:"main-dining",isCombinable:!1,estimatedTurnoverTime:150},{id:"table-5",number:"5",capacity:2,x:500,y:100,width:80,height:80,shape:"round",status:"available",diningAreaId:"patio",isCombinable:!1,estimatedTurnoverTime:90}];d.filter(a=>"main-dining"===a.diningAreaId),d.filter(a=>"patio"===a.diningAreaId);let e=[{id:"guest-1",firstName:"John",lastName:"Smith",phone:"+1234567890",email:"john.smith@email.com",dateOfBirth:"1985-06-15",preferences:{seatingPreference:"booth",dietaryRestrictions:["gluten-free"],favoriteItems:["Caesar Salad","Grilled Salmon"]},visitHistory:[],totalVisits:12,totalSpent:1250,averageSpend:104.17,lastVisit:"2024-01-10",vipStatus:"frequent",createdAt:"2023-01-15T10:00:00Z",updatedAt:"2024-01-10T20:30:00Z"},{id:"guest-2",firstName:"Sarah",lastName:"Johnson",phone:"+1987654321",email:"sarah.j@email.com",anniversary:"2020-03-14",preferences:{seatingPreference:"patio",allergies:["nuts"],ambiance:"quiet"},visitHistory:[],totalVisits:5,totalSpent:425,averageSpend:85,lastVisit:"2024-01-08",vipStatus:"regular",createdAt:"2023-06-20T14:00:00Z",updatedAt:"2024-01-08T19:45:00Z"}],f=[{id:"res-1",guestId:"guest-1",tableId:"table-3",partySize:4,dateTime:"2024-01-20T19:00:00Z",duration:120,status:"confirmed",specialRequests:"Window seat preferred",occasion:"birthday",createdAt:"2024-01-15T10:00:00Z",updatedAt:"2024-01-15T10:00:00Z",source:"online",estimatedSpend:200,tags:["birthday","vip"]},{id:"res-2",guestId:"guest-2",partySize:2,dateTime:"2024-01-20T20:00:00Z",duration:90,status:"pending",occasion:"anniversary",createdAt:"2024-01-18T14:30:00Z",updatedAt:"2024-01-18T14:30:00Z",source:"phone",estimatedSpend:150}],g=[{id:"wait-1",guestId:"guest-1",partySize:3,estimatedWaitTime:25,priority:"normal",addedAt:"2024-01-20T18:30:00Z",phoneNumber:"+1234567890",status:"waiting",quotedWaitTime:30},{id:"wait-2",guestId:"guest-2",partySize:2,estimatedWaitTime:15,priority:"vip",addedAt:"2024-01-20T18:45:00Z",phoneNumber:"+1987654321",status:"notified",quotedWaitTime:20}];async function h(a){return await new Promise(a=>setTimeout(a,200)),a?d.filter(b=>b.diningAreaId===a):d}async function i(a){await new Promise(a=>setTimeout(a,400));let b=[...f];if(a){if(a.date&&(b=b.filter(b=>b.dateTime.startsWith(a.date))),a.status?.length&&(b=b.filter(b=>a.status.includes(b.status))),a.partySize){let{min:c,max:d}=a.partySize;b=b.filter(a=>(!c||!(a.partySize<c))&&(!d||!(a.partySize>d)))}a.source?.length&&(b=b.filter(b=>a.source.includes(b.source)))}return{data:b,pagination:{page:1,limit:50,total:b.length,totalPages:1}}}async function j(a){if(await new Promise(a=>setTimeout(a,300)),a){let b=a.toLowerCase();return e.filter(c=>c.firstName.toLowerCase().includes(b)||c.lastName.toLowerCase().includes(b)||c.phone.includes(a)||c.email?.toLowerCase().includes(b))}return e}async function k(a){return(await new Promise(a=>setTimeout(a,500)),a.partySize<1||a.partySize>20)?{success:!1,error:"Party size must be between 1 and 20"}:{success:!0,data:{id:`res-${Date.now()}`,guestId:a.guestId||`guest-${Date.now()}`,partySize:a.partySize,dateTime:a.dateTime,duration:a.duration||120,status:"confirmed",specialRequests:a.specialRequests,occasion:a.occasion,notes:a.notes,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),source:a.source,tags:a.tags},message:"Reservation created successfully"}}async function l(a,b){await new Promise(a=>setTimeout(a,400));let c=f.find(b=>b.id===a);return c?{success:!0,data:{...c,...b,updatedAt:new Date().toISOString()},message:"Reservation updated successfully"}:{success:!1,error:"Reservation not found"}}async function m(a){return(await new Promise(a=>setTimeout(a,300)),f.find(b=>b.id===a))?{success:!0,message:"Reservation cancelled successfully"}:{success:!1,error:"Reservation not found"}}async function n(a){return await new Promise(a=>setTimeout(a,300)),{success:!0,data:{id:`wait-${Date.now()}`,guestId:a.guestId||`guest-${Date.now()}`,partySize:a.partySize,estimatedWaitTime:a.estimatedWaitTime,priority:a.priority||"normal",addedAt:new Date().toISOString(),phoneNumber:a.guest?.phone||"",status:"waiting",specialRequests:a.specialRequests,quotedWaitTime:a.quotedWaitTime},message:"Added to waitlist successfully"}}async function o(a,b){await new Promise(a=>setTimeout(a,200));let c=g.find(b=>b.id===a);return c?{success:!0,data:{...c,status:b,..."notified"===b&&{notifiedAt:new Date().toISOString()},..."seated"===b&&{seatedAt:new Date().toISOString()}},message:"Waitlist entry updated successfully"}:{success:!1,error:"Waitlist entry not found"}}async function p(a,b){await new Promise(a=>setTimeout(a,200));let c=d.find(b=>b.id===a);return c?{success:!0,data:{...c,status:b,..."cleaning"===b&&{lastCleanedAt:new Date().toISOString()}},message:"Table status updated successfully"}:{success:!1,error:"Table not found"}}let q=[];setInterval(()=>{if(q.length>0){let a,b=Math.random();if(b<.4){let b=d[Math.floor(Math.random()*d.length)],c=["available","occupied","reserved","cleaning"];a={type:"table",action:"update",data:{...b,status:c[Math.floor(Math.random()*c.length)]},timestamp:new Date().toISOString()}}else if(b<.7)a={type:"reservation",action:"update",data:{...f[Math.floor(Math.random()*f.length)],status:"seated"},timestamp:new Date().toISOString()};else{let b=g[Math.floor(Math.random()*g.length)];a={type:"waitlist",action:"update",data:{...b,estimatedWaitTime:Math.max(0,b.estimatedWaitTime-5)},timestamp:new Date().toISOString()}}q.forEach(b=>b(a))}},3e4);let r={RESERVATION_CONFIRMATION:(a,b,c,d)=>`Hi ${a}, your reservation for ${d} on ${b} at ${c} is confirmed. Reply CANCEL to cancel. - {Restaurant Name}`,RESERVATION_REMINDER:(a,b,c)=>`Hi ${a}, reminder: your table for ${c} is reserved for ${b} today. See you soon! - {Restaurant Name}`,TABLE_READY:(a,b)=>`Hi ${a}, your table is ready! Please come to the host stand within the next 10 minutes. - {Restaurant Name}`,WAITLIST_UPDATE:(a,b,c)=>`Hi ${a}, you're #${b} on our waitlist. Estimated wait time: ${c} minutes. - {Restaurant Name}`,RESERVATION_CANCELLED:(a,b,c)=>`Hi ${a}, your reservation for ${b} at ${c} has been cancelled. We hope to see you again soon! - {Restaurant Name}`,NO_SHOW_FOLLOW_UP:a=>`Hi ${a}, we missed you today! If something came up, please let us know. We'd love to reschedule. - {Restaurant Name}`,SPECIAL_OCCASION:(a,b,c)=>`Hi ${a}, we're excited to celebrate your ${b} with you today at ${c}! - {Restaurant Name}`},s={restaurantName:"Bella Vista Restaurant",fromNumber:"+1234567890",provider:"mock",enableDeliveryReceipts:!0,enableOptOut:!0,maxRetries:3},t=new class{config;notifications=[];constructor(a={}){this.config={...s,...a}}generateNotificationId(){return`sms_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}formatTemplate(a){return a.replace("{Restaurant Name}",this.config.restaurantName)}async sendSMS(a,b,c,d){let e={id:this.generateNotificationId(),phoneNumber:a,message:this.formatTemplate(b),type:c,status:"pending",...d&&{reservationId:d}};this.notifications.push(e);try{return await this.mockSendSMS(e),e.status="sent",e.sentAt=new Date().toISOString(),setTimeout(()=>{this.config.enableDeliveryReceipts&&(e.status="delivered",e.deliveredAt=new Date().toISOString())},3e3*Math.random()+1e3),e}catch(a){throw e.status="failed",e.errorMessage=a instanceof Error?a.message:"Unknown error",a}}async mockSendSMS(a){if(await new Promise(a=>setTimeout(a,1e3*Math.random()+500)),.05>Math.random())throw Error("SMS delivery failed");console.log(`[SMS Mock] Sending to ${a.phoneNumber}: ${a.message}`)}async sendReservationConfirmation(a,b){let c=new Date(a.dateTime).toLocaleDateString(),d=new Date(a.dateTime).toLocaleTimeString("en-US",{hour:"2-digit",minute:"2-digit",hour12:!0}),e=r.RESERVATION_CONFIRMATION(b.firstName,c,d,a.partySize);return this.sendSMS(b.phone,e,"confirmation",a.id)}async sendReservationReminder(a,b){let c=new Date(a.dateTime).toLocaleTimeString("en-US",{hour:"2-digit",minute:"2-digit",hour12:!0}),d=r.RESERVATION_REMINDER(b.firstName,c,a.partySize);return this.sendSMS(b.phone,d,"reservation_reminder",a.id)}async sendTableReadyNotification(a,b){let c=r.TABLE_READY(b.firstName),d=await this.sendSMS(b.phone,c,"table_ready");return d.waitlistEntryId=a.id,d}async sendWaitlistUpdate(a,b,c){let d=r.WAITLIST_UPDATE(b.firstName,c,a.estimatedWaitTime),e=await this.sendSMS(b.phone,d,"waitlist_update");return e.waitlistEntryId=a.id,e}async sendReservationCancellation(a,b){let c=new Date(a.dateTime).toLocaleDateString(),d=new Date(a.dateTime).toLocaleTimeString("en-US",{hour:"2-digit",minute:"2-digit",hour12:!0}),e=r.RESERVATION_CANCELLED(b.firstName,c,d);return this.sendSMS(b.phone,e,"confirmation",a.id)}async sendNoShowFollowUp(a,b){let c=r.NO_SHOW_FOLLOW_UP(b.firstName);return this.sendSMS(b.phone,c,"reservation_reminder",a.id)}async sendSpecialOccasionMessage(a,b){if(!a.occasion)throw Error("No special occasion specified");let c=new Date(a.dateTime).toLocaleTimeString("en-US",{hour:"2-digit",minute:"2-digit",hour12:!0}),d=r.SPECIAL_OCCASION(b.firstName,a.occasion,c);return this.sendSMS(b.phone,d,"reservation_reminder",a.id)}async sendCustomMessage(a,b,c){return this.sendSMS(a,b,"confirmation",c)}async sendBulkReminders(a){let b=[];for(let c=0;c<a.length;c+=10){let d=a.slice(c,c+10),e=d.map(({reservation:a,guest:b})=>this.sendReservationReminder(a,b));try{(await Promise.allSettled(e)).forEach((a,c)=>{"fulfilled"===a.status?b.push(a.value):console.error(`Failed to send reminder to ${d[c].guest.phone}:`,a.reason)}),c+10<a.length&&await new Promise(a=>setTimeout(a,1e3))}catch(a){console.error("Batch SMS sending error:",a)}}return b}getNotifications(a){let b=[...this.notifications];if(a&&(a.phoneNumber&&(b=b.filter(b=>b.phoneNumber.includes(a.phoneNumber))),a.type&&(b=b.filter(b=>b.type===a.type)),a.status&&(b=b.filter(b=>b.status===a.status)),a.dateRange)){let c=new Date(a.dateRange.start),d=new Date(a.dateRange.end);b=b.filter(a=>{let b=new Date(a.sentAt||Date.now());return b>=c&&b<=d})}return b.sort((a,b)=>new Date(b.sentAt||b.id).getTime()-new Date(a.sentAt||a.id).getTime())}getNotificationById(a){return this.notifications.find(b=>b.id===a)}async retryFailedNotification(a){let b=this.getNotificationById(a);if(!b)throw Error("Notification not found");if("failed"!==b.status)throw Error("Can only retry failed notifications");return this.sendSMS(b.phoneNumber,b.message,b.type,b.reservationId||b.waitlistEntryId)}getNotificationStats(a){let b=this.getNotifications(a?{dateRange:a}:void 0);return{total:b.length,sent:b.filter(a=>"sent"===a.status||"delivered"===a.status).length,delivered:b.filter(a=>"delivered"===a.status).length,failed:b.filter(a=>"failed"===a.status).length,pending:b.filter(a=>"pending"===a.status).length,deliveryRate:b.length>0?b.filter(a=>"delivered"===a.status).length/b.length*100:0,byType:{confirmation:b.filter(a=>"confirmation"===a.type).length,reminder:b.filter(a=>"reservation_reminder"===a.type).length,tableReady:b.filter(a=>"table_ready"===a.type).length,waitlistUpdate:b.filter(a=>"waitlist_update"===a.type).length}}}updateConfig(a){this.config={...this.config,...a}}getConfig(){return{...this.config}}};async function u(a){try{let b=function(a){let b=[];if((!a.partySize||a.partySize<1||a.partySize>20)&&b.push("Party size must be between 1 and 20"),a.dateTime){let c=new Date(a.dateTime);c<new Date&&b.push("Reservation time cannot be in the past");let d=new Date;d.setDate(d.getDate()+60),c>d&&b.push("Reservations cannot be made more than 60 days in advance")}else b.push("Date and time is required");return a.guest&&((!a.guest.firstName||a.guest.firstName.trim().length<2)&&b.push("First name must be at least 2 characters"),(!a.guest.lastName||a.guest.lastName.trim().length<2)&&b.push("Last name must be at least 2 characters"),a.guest.phone&&/^\+?[\d\s\-\(\)]+$/.test(a.guest.phone)||b.push("Valid phone number is required"),a.guest.email&&!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(a.guest.email)&&b.push("Valid email address is required")),b}(a);if(b.length>0)return{success:!1,error:b.join(", ")};let d=await k(a);if(d.success&&d.data){if(a.guest?.phone||a.guestId)try{let b=null;a.guestId?b=(await j()).find(b=>b.id===a.guestId)||null:a.guest&&(b={id:"temp",firstName:a.guest.firstName,lastName:a.guest.lastName,phone:a.guest.phone,email:a.guest.email,preferences:{},visitHistory:[],totalVisits:0,totalSpent:0,averageSpend:0,vipStatus:"regular",createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()}),b&&await t.sendReservationConfirmation(d.data,b)}catch(a){console.error("Failed to send reservation confirmation SMS:",a)}(0,c.revalidatePath)("/reservations")}return d}catch(a){return console.error("Create reservation error:",a),{success:!1,error:"Failed to create reservation. Please try again."}}}async function v(a,b){try{let d=await l(a,b);return d.success&&(0,c.revalidatePath)("/reservations"),d}catch(a){return console.error("Update reservation error:",a),{success:!1,error:"Failed to update reservation. Please try again."}}}async function w(a,b){try{let b=(await i()).data.find(b=>b.id===a),d=await m(a);if(d.success&&b){try{let a=(await j()).find(a=>a.id===b.guestId);a&&await t.sendReservationCancellation(b,a)}catch(a){console.error("Failed to send cancellation SMS:",a)}(0,c.revalidatePath)("/reservations")}return d}catch(a){return console.error("Cancel reservation error:",a),{success:!1,error:"Failed to cancel reservation. Please try again."}}}async function x(a,b){try{let d=await l(a,{status:"seated",tableId:b});return d.success&&(await p(b,"occupied"),(0,c.revalidatePath)("/reservations")),d}catch(a){return console.error("Seat reservation error:",a),{success:!1,error:"Failed to seat reservation. Please try again."}}}async function y(a,b){try{let d=await l(a,{status:"completed"});return d.success&&b&&(await p(b,"cleaning"),(0,c.revalidatePath)("/reservations")),d}catch(a){return console.error("Complete reservation error:",a),{success:!1,error:"Failed to complete reservation. Please try again."}}}async function z(a){try{let b=await l(a,{status:"no-show"});if(b.success){try{let b=(await i()).data.find(b=>b.id===a);if(b){let a=(await j()).find(a=>a.id===b.guestId);a&&setTimeout(async()=>{try{await t.sendNoShowFollowUp(b,a)}catch(a){console.error("No-show follow-up SMS error:",a)}},6e4)}}catch(a){console.error("Failed to schedule no-show follow-up:",a)}(0,c.revalidatePath)("/reservations")}return b}catch(a){return console.error("Mark no-show error:",a),{success:!1,error:"Failed to mark reservation as no-show. Please try again."}}}async function A(a){try{if(a.guest){let b=function(a){let b=[];if((!a.firstName||a.firstName.trim().length<2)&&b.push("First name must be at least 2 characters"),(!a.lastName||a.lastName.trim().length<2)&&b.push("Last name must be at least 2 characters"),a.phone&&/^\+?[\d\s\-\(\)]+$/.test(a.phone)||b.push("Valid phone number is required"),a.email&&!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(a.email)&&b.push("Valid email address is required"),a.dateOfBirth){let c=new Date(a.dateOfBirth),d=new Date().getFullYear()-c.getFullYear();(d<0||d>120)&&b.push("Invalid date of birth")}return b}(a.guest);if(b.length>0)return{success:!1,error:b.join(", ")}}let b=await n(a);return b.success&&(0,c.revalidatePath)("/reservations"),b}catch(a){return console.error("Add to waitlist error:",a),{success:!1,error:"Failed to add to waitlist. Please try again."}}}async function B(a,b){try{let d=await o(a,b);if(d.success&&d.data){try{let a=(await j()).find(a=>a.id===d.data.guestId);a&&"notified"===b&&await t.sendTableReadyNotification(d.data,a)}catch(a){console.error("Failed to send waitlist notification:",a)}(0,c.revalidatePath)("/reservations")}return d}catch(a){return console.error("Update waitlist entry error:",a),{success:!1,error:"Failed to update waitlist entry. Please try again."}}}async function C(a,b){try{let d=await o(a,"seated");if(d.success&&d.data){let a={guestId:d.data.guestId,partySize:d.data.partySize,dateTime:new Date().toISOString(),duration:120,source:"walk-in"},e=await k(a);if(e.success&&e.data)return await l(e.data.id,{status:"seated",tableId:b}),await p(b,"occupied"),(0,c.revalidatePath)("/reservations"),{success:!0,data:{waitlistEntry:d.data,reservation:e.data},message:"Guest seated successfully from waitlist"}}return{success:!1,error:"Failed to seat guest from waitlist"}}catch(a){return console.error("Seat from waitlist error:",a),{success:!1,error:"Failed to seat guest from waitlist. Please try again."}}}async function D(a,b){try{let d=await p(a,b);return d.success&&(0,c.revalidatePath)("/reservations"),d}catch(a){return console.error("Update table status error:",a),{success:!1,error:"Failed to update table status. Please try again."}}}async function E(a,b){try{if(a.length<2)return{success:!1,error:"At least 2 tables are required for combination"};let d=(await h()).filter(b=>a.includes(b.id));if(!d.every(a=>a.isCombinable&&"available"===a.status&&a.diningAreaId===d[0].diningAreaId))return{success:!1,error:"Selected tables cannot be combined. Check that all tables are available and combinable."};let e=a.map(a=>p(a,"combined")),f=(await Promise.all(e)).filter(a=>a.success&&a.data).map(a=>a.data);if(f.length===a.length)return(0,c.revalidatePath)("/reservations"),{success:!0,data:f,message:`Tables combined successfully as "${b}"`};return{success:!1,error:"Failed to combine some tables"}}catch(a){return console.error("Combine tables error:",a),{success:!1,error:"Failed to combine tables. Please try again."}}}async function F(a){try{let b=a.map(a=>p(a,"available")),d=(await Promise.all(b)).filter(a=>a.success&&a.data).map(a=>a.data);if(d.length===a.length)return(0,c.revalidatePath)("/reservations"),{success:!0,data:d,message:"Tables separated successfully"};return{success:!1,error:"Failed to separate some tables"}}catch(a){return console.error("Separate tables error:",a),{success:!1,error:"Failed to separate tables. Please try again."}}}async function G(a){try{let b=await Promise.allSettled(a.map(a=>l(a.id,a.data))),d=[],e=[];return b.forEach((b,c)=>{"fulfilled"===b.status&&b.value.success?d.push(a[c].id):e.push(a[c].id)}),d.length>0&&(0,c.revalidatePath)("/reservations"),{success:!0,data:{successful:d,failed:e},message:`Updated ${d.length} reservations successfully`}}catch(a){return console.error("Batch update reservations error:",a),{success:!1,error:"Failed to update reservations. Please try again."}}}async function H(a){try{let b=(await i()).data.filter(b=>a.includes(b.id)),c=await j(),d=b.map(a=>{let b=c.find(b=>b.id===a.guestId);return b?{reservation:a,guest:b}:null}).filter(Boolean),e=await t.sendBulkReminders(d);return{success:!0,data:{sent:e.filter(a=>"sent"===a.status).length,failed:e.filter(a=>"failed"===a.status).length},message:`Sent ${e.length} reminder notifications`}}catch(a){return console.error("Send bulk reminders error:",a),{success:!1,error:"Failed to send reminder notifications. Please try again."}}}async function I(){return{success:!0,message:"Real-time updates subscription initiated"}}new class{smsService;constructor(a){this.smsService=a}async scheduleReservationReminders(a){let b=new Date;b.setDate(b.getDate()+1),b.setHours(0,0,0,0);let c=new Date(b);c.setHours(23,59,59,999);let d=a.filter(({reservation:a})=>{let d=new Date(a.dateTime);return d>=b&&d<=c&&"confirmed"===a.status});d.length>0&&(console.log(`Sending ${d.length} reservation reminders`),await this.smsService.sendBulkReminders(d))}async sendSpecialOccasionReminders(a){for(let{reservation:b,guest:c}of a.filter(({reservation:a})=>a.occasion&&"confirmed"===a.status))try{await this.smsService.sendSpecialOccasionMessage(b,c)}catch(a){console.error(`Failed to send special occasion message for reservation ${b.id}:`,a)}}async updateWaitlistPositions(a){let b=a.filter(({entry:a})=>"waiting"===a.status);for(let a=0;a<b.length;a++){let{entry:c,guest:d}=b[a],e=a+1;if(Math.abs(c.estimatedWaitTime-15*e)>10)try{await this.smsService.sendWaitlistUpdate(c,d,e)}catch(a){console.error(`Failed to send waitlist update for entry ${c.id}:`,a)}}}async followUpNoShows(a){for(let{reservation:b,guest:c}of a)try{await this.smsService.sendNoShowFollowUp(b,c)}catch(a){console.error(`Failed to send no-show follow-up for reservation ${b.id}:`,a)}}}(t),(0,a.i(13095).ensureServerEntryExports)([u,v,w,x,y,z,A,B,C,D,E,F,G,H,I]),(0,b.registerServerReference)(u,"40d53966cd22908b34c3a388219981590c16f1b09c",null),(0,b.registerServerReference)(v,"60da97403df77a32677291ba24e46f04df12a8b480",null),(0,b.registerServerReference)(w,"6042007cc1c3fa5dfa785c91858b90cbff06afff87",null),(0,b.registerServerReference)(x,"60914b440cc33feca29dd81bfddf1cf97dbebdba13",null),(0,b.registerServerReference)(y,"60f26b0ada9c58594c349fdfacfc21ec4976d352c8",null),(0,b.registerServerReference)(z,"40dd9aeff35a5a938e712c9ceae74179133cd862a2",null),(0,b.registerServerReference)(A,"4024748d30c4fcef516363c66fa5b418d80eeaf8c7",null),(0,b.registerServerReference)(B,"604d883b7d27fa43d93da04432e8172984fbefa056",null),(0,b.registerServerReference)(C,"60372304174c5128ffdb48de6d0db7514f4ed30799",null),(0,b.registerServerReference)(D,"6047ae1e34a20b56161977a5db84b60a8227efbe8f",null),(0,b.registerServerReference)(E,"6082493e0fa59f2454b73a52a4b934ba36539d174b",null),(0,b.registerServerReference)(F,"40e4f6c05e76e40c58d7b47aa8bf6bdbea5f5d0eda",null),(0,b.registerServerReference)(G,"40eadbec09556d2b7b354caf2a50edfa77cb3994d9",null),(0,b.registerServerReference)(H,"4017eac45b71dcedb56160fe7f515808299285b8ec",null),(0,b.registerServerReference)(I,"00536992d6b6a080d546ac1d8a7fd696376d99eb7f",null),a.i(78300)}];

//# sourceMappingURL=_next-internal_server_app_reservations_page_actions_5fad415c.js.map