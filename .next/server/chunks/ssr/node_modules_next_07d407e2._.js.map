{"version":3,"sources":["turbopack:///[project]/node_modules/next/src/server/lib/trace/constants.ts","turbopack:///[project]/node_modules/next/src/shared/lib/is-thenable.ts","turbopack:///[project]/node_modules/next/src/server/lib/trace/tracer.ts","turbopack:///[project]/node_modules/next/src/server/lib/clone-response.ts","turbopack:///[project]/node_modules/next/src/server/lib/dedupe-fetch.ts","turbopack:///[project]/node_modules/next/src/server/response-cache/types.ts","turbopack:///[project]/node_modules/next/src/lib/detached-promise.ts","turbopack:///[project]/node_modules/next/src/lib/batcher.ts","turbopack:///[project]/node_modules/next/src/server/stream-utils/encoded-tags.ts","turbopack:///[project]/node_modules/next/src/server/stream-utils/uint8array-helpers.ts","turbopack:///[project]/node_modules/next/src/shared/lib/errors/constants.ts","turbopack:///[project]/node_modules/next/src/shared/lib/segment-cache/output-export-prefetch-encoding.ts","turbopack:///[project]/node_modules/next/src/server/stream-utils/node-web-streams-helper.ts","turbopack:///[project]/node_modules/next/src/server/request-meta.ts","turbopack:///[project]/node_modules/next/src/server/base-http/helpers.ts","turbopack:///[project]/node_modules/next/src/server/web/spec-extension/adapters/next-request.ts","turbopack:///[project]/node_modules/next/src/server/client-component-renderer-logger.ts","turbopack:///[project]/node_modules/next/src/server/pipe-readable.ts","turbopack:///[project]/node_modules/next/src/server/render-result.ts","turbopack:///[project]/node_modules/next/src/server/route-kind.ts","turbopack:///[project]/node_modules/next/src/server/response-cache/utils.ts","turbopack:///[project]/node_modules/next/src/server/response-cache/index.ts","turbopack:///[project]/node_modules/next/src/server/lib/patch-fetch.ts","turbopack:///[project]/node_modules/next/src/server/web/spec-extension/unstable-cache.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/sorted-routes.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/is-dynamic.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/index.ts","turbopack:///[project]/node_modules/next/src/server/web/spec-extension/revalidate.ts","turbopack:///[project]/node_modules/next/src/server/web/spec-extension/unstable-no-store.ts","turbopack:///[project]/node_modules/next/src/server/use-cache/cache-life.ts","turbopack:///[project]/node_modules/next/src/server/use-cache/cache-tag.ts","turbopack:///[project]/node_modules/next/cache.js"],"sourcesContent":["/**\n * Contains predefined constants for the trace span name in next/server.\n *\n * Currently, next/server/tracer is internal implementation only for tracking\n * next.js's implementation only with known span names defined here.\n **/\n\n// eslint typescript has a bug with TS enums\n/* eslint-disable no-shadow */\n\nenum BaseServerSpan {\n  handleRequest = 'BaseServer.handleRequest',\n  run = 'BaseServer.run',\n  pipe = 'BaseServer.pipe',\n  getStaticHTML = 'BaseServer.getStaticHTML',\n  render = 'BaseServer.render',\n  renderToResponseWithComponents = 'BaseServer.renderToResponseWithComponents',\n  renderToResponse = 'BaseServer.renderToResponse',\n  renderToHTML = 'BaseServer.renderToHTML',\n  renderError = 'BaseServer.renderError',\n  renderErrorToResponse = 'BaseServer.renderErrorToResponse',\n  renderErrorToHTML = 'BaseServer.renderErrorToHTML',\n  render404 = 'BaseServer.render404',\n}\n\nenum LoadComponentsSpan {\n  loadDefaultErrorComponents = 'LoadComponents.loadDefaultErrorComponents',\n  loadComponents = 'LoadComponents.loadComponents',\n}\n\nenum NextServerSpan {\n  getRequestHandler = 'NextServer.getRequestHandler',\n  getServer = 'NextServer.getServer',\n  getServerRequestHandler = 'NextServer.getServerRequestHandler',\n  createServer = 'createServer.createServer',\n}\n\nenum NextNodeServerSpan {\n  compression = 'NextNodeServer.compression',\n  getBuildId = 'NextNodeServer.getBuildId',\n  createComponentTree = 'NextNodeServer.createComponentTree',\n  clientComponentLoading = 'NextNodeServer.clientComponentLoading',\n  getLayoutOrPageModule = 'NextNodeServer.getLayoutOrPageModule',\n  generateStaticRoutes = 'NextNodeServer.generateStaticRoutes',\n  generateFsStaticRoutes = 'NextNodeServer.generateFsStaticRoutes',\n  generatePublicRoutes = 'NextNodeServer.generatePublicRoutes',\n  generateImageRoutes = 'NextNodeServer.generateImageRoutes.route',\n  sendRenderResult = 'NextNodeServer.sendRenderResult',\n  proxyRequest = 'NextNodeServer.proxyRequest',\n  runApi = 'NextNodeServer.runApi',\n  render = 'NextNodeServer.render',\n  renderHTML = 'NextNodeServer.renderHTML',\n  imageOptimizer = 'NextNodeServer.imageOptimizer',\n  getPagePath = 'NextNodeServer.getPagePath',\n  getRoutesManifest = 'NextNodeServer.getRoutesManifest',\n  findPageComponents = 'NextNodeServer.findPageComponents',\n  getFontManifest = 'NextNodeServer.getFontManifest',\n  getServerComponentManifest = 'NextNodeServer.getServerComponentManifest',\n  getRequestHandler = 'NextNodeServer.getRequestHandler',\n  renderToHTML = 'NextNodeServer.renderToHTML',\n  renderError = 'NextNodeServer.renderError',\n  renderErrorToHTML = 'NextNodeServer.renderErrorToHTML',\n  render404 = 'NextNodeServer.render404',\n  startResponse = 'NextNodeServer.startResponse',\n\n  // nested inner span, does not require parent scope name\n  route = 'route',\n  onProxyReq = 'onProxyReq',\n  apiResolver = 'apiResolver',\n  internalFetch = 'internalFetch',\n}\n\nenum StartServerSpan {\n  startServer = 'startServer.startServer',\n}\n\nenum RenderSpan {\n  getServerSideProps = 'Render.getServerSideProps',\n  getStaticProps = 'Render.getStaticProps',\n  renderToString = 'Render.renderToString',\n  renderDocument = 'Render.renderDocument',\n  createBodyResult = 'Render.createBodyResult',\n}\n\nenum AppRenderSpan {\n  renderToString = 'AppRender.renderToString',\n  renderToReadableStream = 'AppRender.renderToReadableStream',\n  getBodyResult = 'AppRender.getBodyResult',\n  fetch = 'AppRender.fetch',\n}\n\nenum RouterSpan {\n  executeRoute = 'Router.executeRoute',\n}\n\nenum NodeSpan {\n  runHandler = 'Node.runHandler',\n}\n\nenum AppRouteRouteHandlersSpan {\n  runHandler = 'AppRouteRouteHandlers.runHandler',\n}\n\nenum ResolveMetadataSpan {\n  generateMetadata = 'ResolveMetadata.generateMetadata',\n  generateViewport = 'ResolveMetadata.generateViewport',\n}\n\nenum MiddlewareSpan {\n  execute = 'Middleware.execute',\n}\n\ntype SpanTypes =\n  | `${BaseServerSpan}`\n  | `${LoadComponentsSpan}`\n  | `${NextServerSpan}`\n  | `${StartServerSpan}`\n  | `${NextNodeServerSpan}`\n  | `${RenderSpan}`\n  | `${RouterSpan}`\n  | `${AppRenderSpan}`\n  | `${NodeSpan}`\n  | `${AppRouteRouteHandlersSpan}`\n  | `${ResolveMetadataSpan}`\n  | `${MiddlewareSpan}`\n\n// This list is used to filter out spans that are not relevant to the user\nexport const NextVanillaSpanAllowlist = [\n  MiddlewareSpan.execute,\n  BaseServerSpan.handleRequest,\n  RenderSpan.getServerSideProps,\n  RenderSpan.getStaticProps,\n  AppRenderSpan.fetch,\n  AppRenderSpan.getBodyResult,\n  RenderSpan.renderDocument,\n  NodeSpan.runHandler,\n  AppRouteRouteHandlersSpan.runHandler,\n  ResolveMetadataSpan.generateMetadata,\n  ResolveMetadataSpan.generateViewport,\n  NextNodeServerSpan.createComponentTree,\n  NextNodeServerSpan.findPageComponents,\n  NextNodeServerSpan.getLayoutOrPageModule,\n  NextNodeServerSpan.startResponse,\n  NextNodeServerSpan.clientComponentLoading,\n]\n\n// These Spans are allowed to be always logged\n// when the otel log prefix env is set\nexport const LogSpanAllowList = [\n  NextNodeServerSpan.findPageComponents,\n  NextNodeServerSpan.createComponentTree,\n  NextNodeServerSpan.clientComponentLoading,\n]\n\nexport {\n  BaseServerSpan,\n  LoadComponentsSpan,\n  NextServerSpan,\n  NextNodeServerSpan,\n  StartServerSpan,\n  RenderSpan,\n  RouterSpan,\n  AppRenderSpan,\n  NodeSpan,\n  AppRouteRouteHandlersSpan,\n  ResolveMetadataSpan,\n  MiddlewareSpan,\n}\n\nexport type { SpanTypes }\n","/**\n * Check to see if a value is Thenable.\n *\n * @param promise the maybe-thenable value\n * @returns true if the value is thenable\n */\nexport function isThenable<T = unknown>(\n  promise: Promise<T> | T\n): promise is Promise<T> {\n  return (\n    promise !== null &&\n    typeof promise === 'object' &&\n    'then' in promise &&\n    typeof promise.then === 'function'\n  )\n}\n","import type { FetchEventResult } from '../../web/types'\nimport type { TextMapSetter } from '@opentelemetry/api'\nimport type { SpanTypes } from './constants'\nimport { LogSpanAllowList, NextVanillaSpanAllowlist } from './constants'\n\nimport type {\n  ContextAPI,\n  Span,\n  SpanOptions,\n  Tracer,\n  AttributeValue,\n  TextMapGetter,\n} from 'next/dist/compiled/@opentelemetry/api'\nimport { isThenable } from '../../../shared/lib/is-thenable'\n\nlet api: typeof import('next/dist/compiled/@opentelemetry/api')\n\n// we want to allow users to use their own version of @opentelemetry/api if they\n// want to, so we try to require it first, and if it fails we fall back to the\n// version that is bundled with Next.js\n// this is because @opentelemetry/api has to be synced with the version of\n// @opentelemetry/tracing that is used, and we don't want to force users to use\n// the version that is bundled with Next.js.\n// the API is ~stable, so this should be fine\nif (process.env.NEXT_RUNTIME === 'edge') {\n  api = require('@opentelemetry/api') as typeof import('@opentelemetry/api')\n} else {\n  try {\n    api = require('@opentelemetry/api') as typeof import('@opentelemetry/api')\n  } catch (err) {\n    api =\n      require('next/dist/compiled/@opentelemetry/api') as typeof import('next/dist/compiled/@opentelemetry/api')\n  }\n}\n\nconst { context, propagation, trace, SpanStatusCode, SpanKind, ROOT_CONTEXT } =\n  api\n\nexport class BubbledError extends Error {\n  constructor(\n    public readonly bubble?: boolean,\n    public readonly result?: FetchEventResult\n  ) {\n    super()\n  }\n}\n\nexport function isBubbledError(error: unknown): error is BubbledError {\n  if (typeof error !== 'object' || error === null) return false\n  return error instanceof BubbledError\n}\n\nconst closeSpanWithError = (span: Span, error?: Error) => {\n  if (isBubbledError(error) && error.bubble) {\n    span.setAttribute('next.bubble', true)\n  } else {\n    if (error) {\n      span.recordException(error)\n      span.setAttribute('error.type', error.name)\n    }\n    span.setStatus({ code: SpanStatusCode.ERROR, message: error?.message })\n  }\n  span.end()\n}\n\ntype TracerSpanOptions = Omit<SpanOptions, 'attributes'> & {\n  parentSpan?: Span\n  spanName?: string\n  attributes?: Partial<Record<AttributeNames, AttributeValue | undefined>>\n  hideSpan?: boolean\n}\n\ninterface NextTracer {\n  getContext(): ContextAPI\n\n  /**\n   * Instruments a function by automatically creating a span activated on its\n   * scope.\n   *\n   * The span will automatically be finished when one of these conditions is\n   * met:\n   *\n   * * The function returns a promise, in which case the span will finish when\n   * the promise is resolved or rejected.\n   * * The function takes a callback as its second parameter, in which case the\n   * span will finish when that callback is called.\n   * * The function doesn't accept a callback and doesn't return a promise, in\n   * which case the span will finish at the end of the function execution.\n   *\n   */\n  trace<T>(\n    type: SpanTypes,\n    fn: (span?: Span, done?: (error?: Error) => any) => Promise<T>\n  ): Promise<T>\n  trace<T>(\n    type: SpanTypes,\n    fn: (span?: Span, done?: (error?: Error) => any) => T\n  ): T\n  trace<T>(\n    type: SpanTypes,\n    options: TracerSpanOptions,\n    fn: (span?: Span, done?: (error?: Error) => any) => Promise<T>\n  ): Promise<T>\n  trace<T>(\n    type: SpanTypes,\n    options: TracerSpanOptions,\n    fn: (span?: Span, done?: (error?: Error) => any) => T\n  ): T\n\n  /**\n   * Wrap a function to automatically create a span activated on its\n   * scope when it's called.\n   *\n   * The span will automatically be finished when one of these conditions is\n   * met:\n   *\n   * * The function returns a promise, in which case the span will finish when\n   * the promise is resolved or rejected.\n   * * The function takes a callback as its last parameter, in which case the\n   * span will finish when that callback is called.\n   * * The function doesn't accept a callback and doesn't return a promise, in\n   * which case the span will finish at the end of the function execution.\n   */\n  wrap<T = (...args: Array<any>) => any>(type: SpanTypes, fn: T): T\n  wrap<T = (...args: Array<any>) => any>(\n    type: SpanTypes,\n    options: TracerSpanOptions,\n    fn: T\n  ): T\n  wrap<T = (...args: Array<any>) => any>(\n    type: SpanTypes,\n    options: (...args: any[]) => TracerSpanOptions,\n    fn: T\n  ): T\n\n  /**\n   * Starts and returns a new Span representing a logical unit of work.\n   *\n   * This method do NOT modify the current Context by default. In result, any inner span will not\n   * automatically set its parent context to the span created by this method unless manually activate\n   * context via `tracer.getContext().with`. `trace`, or `wrap` is generally recommended as it gracefully\n   * handles context activation. (ref: https://github.com/open-telemetry/opentelemetry-js/issues/1923)\n   */\n  startSpan(type: SpanTypes): Span\n  startSpan(type: SpanTypes, options: TracerSpanOptions): Span\n\n  /**\n   * Returns currently activated span if current context is in the scope of the span.\n   * Returns undefined otherwise.\n   */\n  getActiveScopeSpan(): Span | undefined\n\n  /**\n   * Returns trace propagation data for the currently active context. The format is equal to data provided\n   * through the OpenTelemetry propagator API.\n   */\n  getTracePropagationData(): ClientTraceDataEntry[]\n}\n\ntype NextAttributeNames =\n  | 'next.route'\n  | 'next.page'\n  | 'next.rsc'\n  | 'next.segment'\n  | 'next.span_name'\n  | 'next.span_type'\n  | 'next.clientComponentLoadCount'\ntype OTELAttributeNames = `http.${string}` | `net.${string}`\ntype AttributeNames = NextAttributeNames | OTELAttributeNames\n\n/** we use this map to propagate attributes from nested spans to the top span */\nconst rootSpanAttributesStore = new Map<\n  number,\n  Map<AttributeNames, AttributeValue | undefined>\n>()\nconst rootSpanIdKey = api.createContextKey('next.rootSpanId')\nlet lastSpanId = 0\nconst getSpanId = () => lastSpanId++\n\nexport interface ClientTraceDataEntry {\n  key: string\n  value: string\n}\n\nconst clientTraceDataSetter: TextMapSetter<ClientTraceDataEntry[]> = {\n  set(carrier, key, value) {\n    carrier.push({\n      key,\n      value,\n    })\n  },\n}\n\nclass NextTracerImpl implements NextTracer {\n  /**\n   * Returns an instance to the trace with configured name.\n   * Since wrap / trace can be defined in any place prior to actual trace subscriber initialization,\n   * This should be lazily evaluated.\n   */\n  private getTracerInstance(): Tracer {\n    return trace.getTracer('next.js', '0.0.1')\n  }\n\n  public getContext(): ContextAPI {\n    return context\n  }\n\n  public getTracePropagationData(): ClientTraceDataEntry[] {\n    const activeContext = context.active()\n    const entries: ClientTraceDataEntry[] = []\n    propagation.inject(activeContext, entries, clientTraceDataSetter)\n    return entries\n  }\n\n  public getActiveScopeSpan(): Span | undefined {\n    return trace.getSpan(context?.active())\n  }\n\n  public withPropagatedContext<T, C>(\n    carrier: C,\n    fn: () => T,\n    getter?: TextMapGetter<C>\n  ): T {\n    const activeContext = context.active()\n    if (trace.getSpanContext(activeContext)) {\n      // Active span is already set, too late to propagate.\n      return fn()\n    }\n    const remoteContext = propagation.extract(activeContext, carrier, getter)\n    return context.with(remoteContext, fn)\n  }\n\n  // Trace, wrap implementation is inspired by datadog trace implementation\n  // (https://datadoghq.dev/dd-trace-js/interfaces/tracer.html#trace).\n  public trace<T>(\n    type: SpanTypes,\n    fn: (span?: Span, done?: (error?: Error) => any) => Promise<T>\n  ): Promise<T>\n  public trace<T>(\n    type: SpanTypes,\n    fn: (span?: Span, done?: (error?: Error) => any) => T\n  ): T\n  public trace<T>(\n    type: SpanTypes,\n    options: TracerSpanOptions,\n    fn: (span?: Span, done?: (error?: Error) => any) => Promise<T>\n  ): Promise<T>\n  public trace<T>(\n    type: SpanTypes,\n    options: TracerSpanOptions,\n    fn: (span?: Span, done?: (error?: Error) => any) => T\n  ): T\n  public trace<T>(...args: Array<any>) {\n    const [type, fnOrOptions, fnOrEmpty] = args\n\n    // coerce options form overload\n    const {\n      fn,\n      options,\n    }: {\n      fn: (span?: Span, done?: (error?: Error) => any) => T | Promise<T>\n      options: TracerSpanOptions\n    } =\n      typeof fnOrOptions === 'function'\n        ? {\n            fn: fnOrOptions,\n            options: {},\n          }\n        : {\n            fn: fnOrEmpty,\n            options: { ...fnOrOptions },\n          }\n\n    const spanName = options.spanName ?? type\n\n    if (\n      (!NextVanillaSpanAllowlist.includes(type) &&\n        process.env.NEXT_OTEL_VERBOSE !== '1') ||\n      options.hideSpan\n    ) {\n      return fn()\n    }\n\n    // Trying to get active scoped span to assign parent. If option specifies parent span manually, will try to use it.\n    let spanContext = this.getSpanContext(\n      options?.parentSpan ?? this.getActiveScopeSpan()\n    )\n    let isRootSpan = false\n\n    if (!spanContext) {\n      spanContext = context?.active() ?? ROOT_CONTEXT\n      isRootSpan = true\n    } else if (trace.getSpanContext(spanContext)?.isRemote) {\n      isRootSpan = true\n    }\n\n    const spanId = getSpanId()\n\n    options.attributes = {\n      'next.span_name': spanName,\n      'next.span_type': type,\n      ...options.attributes,\n    }\n\n    return context.with(spanContext.setValue(rootSpanIdKey, spanId), () =>\n      this.getTracerInstance().startActiveSpan(\n        spanName,\n        options,\n        (span: Span) => {\n          const startTime =\n            'performance' in globalThis && 'measure' in performance\n              ? globalThis.performance.now()\n              : undefined\n\n          const onCleanup = () => {\n            rootSpanAttributesStore.delete(spanId)\n            if (\n              startTime &&\n              process.env.NEXT_OTEL_PERFORMANCE_PREFIX &&\n              LogSpanAllowList.includes(type || ('' as any))\n            ) {\n              performance.measure(\n                `${process.env.NEXT_OTEL_PERFORMANCE_PREFIX}:next-${(\n                  type.split('.').pop() || ''\n                ).replace(\n                  /[A-Z]/g,\n                  (match: string) => '-' + match.toLowerCase()\n                )}`,\n                {\n                  start: startTime,\n                  end: performance.now(),\n                }\n              )\n            }\n          }\n\n          if (isRootSpan) {\n            rootSpanAttributesStore.set(\n              spanId,\n              new Map(\n                Object.entries(options.attributes ?? {}) as [\n                  AttributeNames,\n                  AttributeValue | undefined,\n                ][]\n              )\n            )\n          }\n          try {\n            if (fn.length > 1) {\n              return fn(span, (err) => closeSpanWithError(span, err))\n            }\n\n            const result = fn(span)\n            if (isThenable(result)) {\n              // If there's error make sure it throws\n              return result\n                .then((res) => {\n                  span.end()\n                  // Need to pass down the promise result,\n                  // it could be react stream response with error { error, stream }\n                  return res\n                })\n                .catch((err) => {\n                  closeSpanWithError(span, err)\n                  throw err\n                })\n                .finally(onCleanup)\n            } else {\n              span.end()\n              onCleanup()\n            }\n\n            return result\n          } catch (err: any) {\n            closeSpanWithError(span, err)\n            onCleanup()\n            throw err\n          }\n        }\n      )\n    )\n  }\n\n  public wrap<T = (...args: Array<any>) => any>(type: SpanTypes, fn: T): T\n  public wrap<T = (...args: Array<any>) => any>(\n    type: SpanTypes,\n    options: TracerSpanOptions,\n    fn: T\n  ): T\n  public wrap<T = (...args: Array<any>) => any>(\n    type: SpanTypes,\n    options: (...args: any[]) => TracerSpanOptions,\n    fn: T\n  ): T\n  public wrap(...args: Array<any>) {\n    const tracer = this\n    const [name, options, fn] =\n      args.length === 3 ? args : [args[0], {}, args[1]]\n\n    if (\n      !NextVanillaSpanAllowlist.includes(name) &&\n      process.env.NEXT_OTEL_VERBOSE !== '1'\n    ) {\n      return fn\n    }\n\n    return function (this: any) {\n      let optionsObj = options\n      if (typeof optionsObj === 'function' && typeof fn === 'function') {\n        optionsObj = optionsObj.apply(this, arguments)\n      }\n\n      const lastArgId = arguments.length - 1\n      const cb = arguments[lastArgId]\n\n      if (typeof cb === 'function') {\n        const scopeBoundCb = tracer.getContext().bind(context.active(), cb)\n        return tracer.trace(name, optionsObj, (_span, done) => {\n          arguments[lastArgId] = function (err: any) {\n            done?.(err)\n            return scopeBoundCb.apply(this, arguments)\n          }\n\n          return fn.apply(this, arguments)\n        })\n      } else {\n        return tracer.trace(name, optionsObj, () => fn.apply(this, arguments))\n      }\n    }\n  }\n\n  public startSpan(type: SpanTypes): Span\n  public startSpan(type: SpanTypes, options: TracerSpanOptions): Span\n  public startSpan(...args: Array<any>): Span {\n    const [type, options]: [string, TracerSpanOptions | undefined] = args as any\n\n    const spanContext = this.getSpanContext(\n      options?.parentSpan ?? this.getActiveScopeSpan()\n    )\n    return this.getTracerInstance().startSpan(type, options, spanContext)\n  }\n\n  private getSpanContext(parentSpan?: Span) {\n    const spanContext = parentSpan\n      ? trace.setSpan(context.active(), parentSpan)\n      : undefined\n\n    return spanContext\n  }\n\n  public getRootSpanAttributes() {\n    const spanId = context.active().getValue(rootSpanIdKey) as number\n    return rootSpanAttributesStore.get(spanId)\n  }\n\n  public setRootSpanAttribute(key: AttributeNames, value: AttributeValue) {\n    const spanId = context.active().getValue(rootSpanIdKey) as number\n    const attributes = rootSpanAttributesStore.get(spanId)\n    if (attributes) {\n      attributes.set(key, value)\n    }\n  }\n}\n\nconst getTracer = (() => {\n  const tracer = new NextTracerImpl()\n\n  return () => tracer\n})()\n\nexport { getTracer, SpanStatusCode, SpanKind }\nexport type { NextTracer, Span, SpanOptions, ContextAPI, TracerSpanOptions }\n","const noop = () => {}\n\nlet registry: FinalizationRegistry<WeakRef<ReadableStream>> | undefined\n\nif (globalThis.FinalizationRegistry) {\n  registry = new FinalizationRegistry((weakRef: WeakRef<ReadableStream>) => {\n    const stream = weakRef.deref()\n    if (stream && !stream.locked) {\n      stream.cancel('Response object has been garbage collected').then(noop)\n    }\n  })\n}\n\n/**\n * Clones a response by teeing the body so we can return two independent\n * ReadableStreams from it. This avoids the bug in the undici library around\n * response cloning.\n *\n * After cloning, the original response's body will be consumed and closed.\n *\n * @see https://github.com/vercel/next.js/pull/73274\n *\n * @param original - The original response to clone.\n * @returns A tuple containing two independent clones of the original response.\n */\nexport function cloneResponse(original: Response): [Response, Response] {\n  // If the response has no body, then we can just return the original response\n  // twice because it's immutable.\n  if (!original.body) {\n    return [original, original]\n  }\n\n  const [body1, body2] = original.body.tee()\n\n  const cloned1 = new Response(body1, {\n    status: original.status,\n    statusText: original.statusText,\n    headers: original.headers,\n  })\n\n  Object.defineProperty(cloned1, 'url', {\n    value: original.url,\n    // How the original response.url behaves\n    configurable: true,\n    enumerable: true,\n    writable: false,\n  })\n\n  // The Fetch Standard allows users to skip consuming the response body by\n  // relying on garbage collection to release connection resources.\n  // https://github.com/nodejs/undici?tab=readme-ov-file#garbage-collection\n  //\n  // To cancel the stream you then need to cancel both resulting branches.\n  // Teeing a stream will generally lock it for the duration, preventing other\n  // readers from locking it.\n  // https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/tee\n\n  // cloned2 is stored in a react cache and cloned for subsequent requests.\n  // It is the original request, and is is garbage collected by a\n  // FinalizationRegistry in Undici, but since we're tee-ing the stream\n  // ourselves, we need to cancel clone1's stream (the response returned from\n  // our dedupe fetch) when clone1 is reclaimed, otherwise we leak memory.\n  if (registry && cloned1.body) {\n    registry.register(cloned1, new WeakRef(cloned1.body))\n  }\n\n  const cloned2 = new Response(body2, {\n    status: original.status,\n    statusText: original.statusText,\n    headers: original.headers,\n  })\n\n  Object.defineProperty(cloned2, 'url', {\n    value: original.url,\n    // How the original response.url behaves\n    configurable: true,\n    enumerable: true,\n    writable: false,\n  })\n\n  return [cloned1, cloned2]\n}\n","/**\n * Based on https://github.com/facebook/react/blob/d4e78c42a94be027b4dc7ed2659a5fddfbf9bd4e/packages/react/src/ReactFetch.js\n */\nimport * as React from 'react'\nimport { cloneResponse } from './clone-response'\nimport { InvariantError } from '../../shared/lib/invariant-error'\n\nconst simpleCacheKey = '[\"GET\",[],null,\"follow\",null,null,null,null]' // generateCacheKey(new Request('https://blank'));\n\nfunction generateCacheKey(request: Request): string {\n  // We pick the fields that goes into the key used to dedupe requests.\n  // We don't include the `cache` field, because we end up using whatever\n  // caching resulted from the first request.\n  // Notably we currently don't consider non-standard (or future) options.\n  // This might not be safe. TODO: warn for non-standard extensions differing.\n  // IF YOU CHANGE THIS UPDATE THE simpleCacheKey ABOVE.\n  return JSON.stringify([\n    request.method,\n    Array.from(request.headers.entries()),\n    request.mode,\n    request.redirect,\n    request.credentials,\n    request.referrer,\n    request.referrerPolicy,\n    request.integrity,\n  ])\n}\n\ntype CacheEntry = [\n  key: string,\n  promise: Promise<Response>,\n  response: Response | null,\n]\n\nexport function createDedupeFetch(originalFetch: typeof fetch) {\n  const getCacheEntries = React.cache(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars -- url is the cache key\n    (url: string): CacheEntry[] => []\n  )\n\n  return function dedupeFetch(\n    resource: URL | RequestInfo,\n    options?: RequestInit\n  ): Promise<Response> {\n    if (options && options.signal) {\n      // If we're passed a signal, then we assume that\n      // someone else controls the lifetime of this object and opts out of\n      // caching. It's effectively the opt-out mechanism.\n      // Ideally we should be able to check this on the Request but\n      // it always gets initialized with its own signal so we don't\n      // know if it's supposed to override - unless we also override the\n      // Request constructor.\n      return originalFetch(resource, options)\n    }\n    // Normalize the Request\n    let url: string\n    let cacheKey: string\n    if (typeof resource === 'string' && !options) {\n      // Fast path.\n      cacheKey = simpleCacheKey\n      url = resource\n    } else {\n      // Normalize the request.\n      // if resource is not a string or a URL (its an instance of Request)\n      // then do not instantiate a new Request but instead\n      // reuse the request as to not disturb the body in the event it's a ReadableStream.\n      const request =\n        typeof resource === 'string' || resource instanceof URL\n          ? new Request(resource, options)\n          : resource\n      if (\n        (request.method !== 'GET' && request.method !== 'HEAD') ||\n        request.keepalive\n      ) {\n        // We currently don't dedupe requests that might have side-effects. Those\n        // have to be explicitly cached. We assume that the request doesn't have a\n        // body if it's GET or HEAD.\n        // keepalive gets treated the same as if you passed a custom cache signal.\n        return originalFetch(resource, options)\n      }\n      cacheKey = generateCacheKey(request)\n      url = request.url\n    }\n\n    const cacheEntries = getCacheEntries(url)\n    for (let i = 0, j = cacheEntries.length; i < j; i += 1) {\n      const [key, promise] = cacheEntries[i]\n      if (key === cacheKey) {\n        return promise.then(() => {\n          const response = cacheEntries[i][2]\n          if (!response) throw new InvariantError('No cached response')\n\n          // We're cloning the response using this utility because there exists\n          // a bug in the undici library around response cloning. See the\n          // following pull request for more details:\n          // https://github.com/vercel/next.js/pull/73274\n          const [cloned1, cloned2] = cloneResponse(response)\n          cacheEntries[i][2] = cloned2\n          return cloned1\n        })\n      }\n    }\n\n    // We pass the original arguments here in case normalizing the Request\n    // doesn't include all the options in this environment.\n    const promise = originalFetch(resource, options)\n    const entry: CacheEntry = [cacheKey, promise, null]\n    cacheEntries.push(entry)\n\n    return promise.then((response) => {\n      // We're cloning the response using this utility because there exists\n      // a bug in the undici library around response cloning. See the\n      // following pull request for more details:\n      // https://github.com/vercel/next.js/pull/73274\n      const [cloned1, cloned2] = cloneResponse(response)\n      entry[2] = cloned2\n      return cloned1\n    })\n  }\n}\n","import type { OutgoingHttpHeaders } from 'http'\nimport type RenderResult from '../render-result'\nimport type { CacheControl, Revalidate } from '../lib/cache-control'\nimport type { RouteKind } from '../route-kind'\n\nexport interface ResponseCacheBase {\n  get(\n    key: string | null,\n    responseGenerator: ResponseGenerator,\n    context: {\n      isOnDemandRevalidate?: boolean\n      isPrefetch?: boolean\n      incrementalCache: IncrementalCache\n      /**\n       * This is a hint to the cache to help it determine what kind of route\n       * this is so it knows where to look up the cache entry from. If not\n       * provided it will test the filesystem to check.\n       */\n      routeKind: RouteKind\n\n      /**\n       * True if this is a fallback request.\n       */\n      isFallback?: boolean\n\n      /**\n       * True if the route is enabled for PPR.\n       */\n      isRoutePPREnabled?: boolean\n    }\n  ): Promise<ResponseCacheEntry | null>\n}\n\n// The server components HMR cache might store other data as well in the future,\n// at which point this should be refactored to a discriminated union type.\nexport interface ServerComponentsHmrCache {\n  get(key: string): CachedFetchData | undefined\n  set(key: string, data: CachedFetchData): void\n}\n\nexport type CachedFetchData = {\n  headers: Record<string, string>\n  body: string\n  url: string\n  status?: number\n}\n\nexport const enum CachedRouteKind {\n  APP_PAGE = 'APP_PAGE',\n  APP_ROUTE = 'APP_ROUTE',\n  PAGES = 'PAGES',\n  FETCH = 'FETCH',\n  REDIRECT = 'REDIRECT',\n  IMAGE = 'IMAGE',\n}\n\nexport interface CachedFetchValue {\n  kind: CachedRouteKind.FETCH\n  data: CachedFetchData\n  // tags are only present with file-system-cache\n  // fetch cache stores tags outside of cache entry\n  tags?: string[]\n  revalidate: number\n}\n\nexport interface CachedRedirectValue {\n  kind: CachedRouteKind.REDIRECT\n  props: Object\n}\n\nexport interface CachedAppPageValue {\n  kind: CachedRouteKind.APP_PAGE\n  // this needs to be a RenderResult so since renderResponse\n  // expects that type instead of a string\n  html: RenderResult\n  rscData: Buffer | undefined\n  status: number | undefined\n  postponed: string | undefined\n  headers: OutgoingHttpHeaders | undefined\n  segmentData: Map<string, Buffer> | undefined\n}\n\nexport interface CachedPageValue {\n  kind: CachedRouteKind.PAGES\n  // this needs to be a RenderResult so since renderResponse\n  // expects that type instead of a string\n  html: RenderResult\n  pageData: Object\n  status: number | undefined\n  headers: OutgoingHttpHeaders | undefined\n}\n\nexport interface CachedRouteValue {\n  kind: CachedRouteKind.APP_ROUTE\n  // this needs to be a RenderResult so since renderResponse\n  // expects that type instead of a string\n  body: Buffer\n  status: number\n  headers: OutgoingHttpHeaders\n}\n\nexport interface CachedImageValue {\n  kind: CachedRouteKind.IMAGE\n  etag: string\n  upstreamEtag: string\n  buffer: Buffer\n  extension: string\n  isMiss?: boolean\n  isStale?: boolean\n}\n\nexport interface IncrementalCachedAppPageValue {\n  kind: CachedRouteKind.APP_PAGE\n  // this needs to be a string since the cache expects to store\n  // the string value\n  html: string\n  rscData: Buffer | undefined\n  headers: OutgoingHttpHeaders | undefined\n  postponed: string | undefined\n  status: number | undefined\n  segmentData: Map<string, Buffer> | undefined\n}\n\nexport interface IncrementalCachedPageValue {\n  kind: CachedRouteKind.PAGES\n  // this needs to be a string since the cache expects to store\n  // the string value\n  html: string\n  pageData: Object\n  headers: OutgoingHttpHeaders | undefined\n  status: number | undefined\n}\n\nexport interface IncrementalResponseCacheEntry {\n  cacheControl?: CacheControl\n  /**\n   * timestamp in milliseconds to revalidate after\n   */\n  revalidateAfter?: Revalidate\n  /**\n   * `-1` here dictates a blocking revalidate should be used\n   */\n  isStale?: boolean | -1\n  isMiss?: boolean\n  value: Exclude<IncrementalCacheValue, CachedFetchValue> | null\n}\n\nexport interface IncrementalFetchCacheEntry {\n  /**\n   * `-1` here dictates a blocking revalidate should be used\n   */\n  isStale?: boolean | -1\n  value: CachedFetchValue\n}\n\nexport type IncrementalCacheEntry =\n  | IncrementalResponseCacheEntry\n  | IncrementalFetchCacheEntry\n\nexport type IncrementalCacheValue =\n  | CachedRedirectValue\n  | IncrementalCachedPageValue\n  | IncrementalCachedAppPageValue\n  | CachedImageValue\n  | CachedFetchValue\n  | CachedRouteValue\n\nexport type ResponseCacheValue =\n  | CachedRedirectValue\n  | CachedPageValue\n  | CachedAppPageValue\n  | CachedImageValue\n  | CachedRouteValue\n\nexport type ResponseCacheEntry = {\n  cacheControl?: CacheControl\n  value: ResponseCacheValue | null\n  isStale?: boolean | -1\n  isMiss?: boolean\n}\n\n/**\n * @param hasResolved whether the responseGenerator has resolved it's promise\n * @param previousCacheEntry the previous cache entry if it exists or the current\n */\nexport type ResponseGenerator = (state: {\n  hasResolved: boolean\n  previousCacheEntry?: IncrementalResponseCacheEntry | null\n  isRevalidating?: boolean\n  span?: any\n}) => Promise<ResponseCacheEntry | null>\n\nexport const enum IncrementalCacheKind {\n  APP_PAGE = 'APP_PAGE',\n  APP_ROUTE = 'APP_ROUTE',\n  PAGES = 'PAGES',\n  FETCH = 'FETCH',\n  IMAGE = 'IMAGE',\n}\n\nexport interface GetIncrementalFetchCacheContext {\n  kind: IncrementalCacheKind.FETCH\n  revalidate?: Revalidate\n  fetchUrl?: string\n  fetchIdx?: number\n  tags?: string[]\n  softTags?: string[]\n}\n\nexport interface GetIncrementalResponseCacheContext {\n  kind: Exclude<IncrementalCacheKind, IncrementalCacheKind.FETCH>\n\n  /**\n   * True if the route is enabled for PPR.\n   */\n  isRoutePPREnabled?: boolean\n\n  /**\n   * True if this is a fallback request.\n   */\n  isFallback: boolean\n}\n\nexport interface SetIncrementalFetchCacheContext {\n  fetchCache: true\n  fetchUrl?: string\n  fetchIdx?: number\n  tags?: string[]\n  isImplicitBuildTimeCache?: boolean\n}\n\nexport interface SetIncrementalResponseCacheContext {\n  fetchCache?: false\n  cacheControl?: CacheControl\n\n  /**\n   * True if the route is enabled for PPR.\n   */\n  isRoutePPREnabled?: boolean\n\n  /**\n   * True if this is a fallback request.\n   */\n  isFallback?: boolean\n}\n\nexport interface IncrementalResponseCache {\n  get(\n    cacheKey: string,\n    ctx: GetIncrementalResponseCacheContext\n  ): Promise<IncrementalResponseCacheEntry | null>\n  set(\n    key: string,\n    data: Exclude<IncrementalCacheValue, CachedFetchValue> | null,\n    ctx: SetIncrementalResponseCacheContext\n  ): Promise<void>\n}\n\nexport interface IncrementalCache extends IncrementalResponseCache {\n  get(\n    cacheKey: string,\n    ctx: GetIncrementalFetchCacheContext\n  ): Promise<IncrementalFetchCacheEntry | null>\n  get(\n    cacheKey: string,\n    ctx: GetIncrementalResponseCacheContext\n  ): Promise<IncrementalResponseCacheEntry | null>\n  set(\n    key: string,\n    data: CachedFetchValue | null,\n    ctx: SetIncrementalFetchCacheContext\n  ): Promise<void>\n  set(\n    key: string,\n    data: Exclude<IncrementalCacheValue, CachedFetchValue> | null,\n    ctx: SetIncrementalResponseCacheContext\n  ): Promise<void>\n}\n","/**\n * A `Promise.withResolvers` implementation that exposes the `resolve` and\n * `reject` functions on a `Promise`.\n *\n * @see https://tc39.es/proposal-promise-with-resolvers/\n */\nexport class DetachedPromise<T = any> {\n  public readonly resolve: (value: T | PromiseLike<T>) => void\n  public readonly reject: (reason: any) => void\n  public readonly promise: Promise<T>\n\n  constructor() {\n    let resolve: (value: T | PromiseLike<T>) => void\n    let reject: (reason: any) => void\n\n    // Create the promise and assign the resolvers to the object.\n    this.promise = new Promise<T>((res, rej) => {\n      resolve = res\n      reject = rej\n    })\n\n    // We know that resolvers is defined because the Promise constructor runs\n    // synchronously.\n    this.resolve = resolve!\n    this.reject = reject!\n  }\n}\n","import type { SchedulerFn } from './scheduler'\n\nimport { DetachedPromise } from './detached-promise'\n\ntype CacheKeyFn<K, C extends string | number | null> = (\n  key: K\n) => PromiseLike<C> | C\n\ntype BatcherOptions<K, C extends string | number | null> = {\n  cacheKeyFn?: CacheKeyFn<K, C>\n  schedulerFn?: SchedulerFn<void>\n}\n\ntype WorkFn<V, C> = (\n  key: C,\n  resolve: (value: V | PromiseLike<V>) => void\n) => Promise<V>\n\n/**\n * A wrapper for a function that will only allow one call to the function to\n * execute at a time.\n */\nexport class Batcher<K, V, C extends string | number | null> {\n  private readonly pending = new Map<C, Promise<V>>()\n\n  protected constructor(\n    private readonly cacheKeyFn?: CacheKeyFn<K, C>,\n    /**\n     * A function that will be called to schedule the wrapped function to be\n     * executed. This defaults to a function that will execute the function\n     * immediately.\n     */\n    private readonly schedulerFn: SchedulerFn<void> = (fn) => fn()\n  ) {}\n\n  /**\n   * Creates a new instance of PendingWrapper. If the key extends a string or\n   * number, the key will be used as the cache key. If the key is an object, a\n   * cache key function must be provided.\n   */\n  public static create<K extends string | number | null, V>(\n    options?: BatcherOptions<K, K>\n  ): Batcher<K, V, K>\n  public static create<K, V, C extends string | number | null>(\n    options: BatcherOptions<K, C> &\n      Required<Pick<BatcherOptions<K, C>, 'cacheKeyFn'>>\n  ): Batcher<K, V, C>\n  public static create<K, V, C extends string | number | null>(\n    options?: BatcherOptions<K, C>\n  ): Batcher<K, V, C> {\n    return new Batcher<K, V, C>(options?.cacheKeyFn, options?.schedulerFn)\n  }\n\n  /**\n   * Wraps a function in a promise that will be resolved or rejected only once\n   * for a given key. This will allow multiple calls to the function to be\n   * made, but only one will be executed at a time. The result of the first\n   * call will be returned to all callers.\n   *\n   * @param key the key to use for the cache\n   * @param fn the function to wrap\n   * @returns a promise that resolves to the result of the function\n   */\n  public async batch(key: K, fn: WorkFn<V, C>): Promise<V> {\n    const cacheKey = (this.cacheKeyFn ? await this.cacheKeyFn(key) : key) as C\n    if (cacheKey === null) {\n      return fn(cacheKey, Promise.resolve)\n    }\n\n    const pending = this.pending.get(cacheKey)\n    if (pending) return pending\n\n    const { promise, resolve, reject } = new DetachedPromise<V>()\n    this.pending.set(cacheKey, promise)\n\n    this.schedulerFn(async () => {\n      try {\n        const result = await fn(cacheKey, resolve)\n\n        // Resolving a promise multiple times is a no-op, so we can safely\n        // resolve all pending promises with the same result.\n        resolve(result)\n      } catch (err) {\n        reject(err)\n      } finally {\n        this.pending.delete(cacheKey)\n      }\n    })\n\n    return promise\n  }\n}\n","export const ENCODED_TAGS = {\n  // opening tags do not have the closing `>` since they can contain other attributes such as `<body className=''>`\n  OPENING: {\n    // <html\n    HTML: new Uint8Array([60, 104, 116, 109, 108]),\n    // <body\n    BODY: new Uint8Array([60, 98, 111, 100, 121]),\n  },\n  CLOSED: {\n    // </head>\n    HEAD: new Uint8Array([60, 47, 104, 101, 97, 100, 62]),\n    // </body>\n    BODY: new Uint8Array([60, 47, 98, 111, 100, 121, 62]),\n    // </html>\n    HTML: new Uint8Array([60, 47, 104, 116, 109, 108, 62]),\n    // </body></html>\n    BODY_AND_HTML: new Uint8Array([\n      60, 47, 98, 111, 100, 121, 62, 60, 47, 104, 116, 109, 108, 62,\n    ]),\n  },\n  META: {\n    // Only the match the prefix cause the suffix can be different wether it's xml compatible or not \">\" or \"/>\"\n    // <meta name=\"«nxt-icon»\"\n    // This is a special mark that will be replaced by the icon insertion script tag.\n    ICON_MARK: new Uint8Array([\n      60, 109, 101, 116, 97, 32, 110, 97, 109, 101, 61, 34, 194, 171, 110, 120,\n      116, 45, 105, 99, 111, 110, 194, 187, 34,\n    ]),\n  },\n} as const\n","/**\n * Find the starting index of Uint8Array `b` within Uint8Array `a`.\n */\nexport function indexOfUint8Array(a: Uint8Array, b: Uint8Array) {\n  if (b.length === 0) return 0\n  if (a.length === 0 || b.length > a.length) return -1\n\n  // start iterating through `a`\n  for (let i = 0; i <= a.length - b.length; i++) {\n    let completeMatch = true\n    // from index `i`, iterate through `b` and check for mismatch\n    for (let j = 0; j < b.length; j++) {\n      // if the values do not match, then this isn't a complete match, exit `b` iteration early and iterate to next index of `a`.\n      if (a[i + j] !== b[j]) {\n        completeMatch = false\n        break\n      }\n    }\n\n    if (completeMatch) {\n      return i\n    }\n  }\n\n  return -1\n}\n\n/**\n * Check if two Uint8Arrays are strictly equivalent.\n */\nexport function isEquivalentUint8Arrays(a: Uint8Array, b: Uint8Array) {\n  if (a.length !== b.length) return false\n\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) return false\n  }\n\n  return true\n}\n\n/**\n * Remove Uint8Array `b` from Uint8Array `a`.\n *\n * If `b` is not in `a`, `a` is returned unchanged.\n *\n * Otherwise, the function returns a new Uint8Array instance with size `a.length - b.length`\n */\nexport function removeFromUint8Array(a: Uint8Array, b: Uint8Array) {\n  const tagIndex = indexOfUint8Array(a, b)\n  if (tagIndex === 0) return a.subarray(b.length)\n  if (tagIndex > -1) {\n    const removed = new Uint8Array(a.length - b.length)\n    removed.set(a.slice(0, tagIndex))\n    removed.set(a.slice(tagIndex + b.length), tagIndex)\n    return removed\n  } else {\n    return a\n  }\n}\n","export const MISSING_ROOT_TAGS_ERROR = 'NEXT_MISSING_ROOT_TAGS'\n","// In output: export mode, the build id is added to the start of the HTML\n// document, directly after the doctype declaration. During a prefetch, the\n// client performs a range request to get the build id, so it can check whether\n// the target page belongs to the same build.\n//\n// The first 64 bytes of the document are requested. The exact number isn't\n// too important; it must be larger than the build id + doctype + closing and\n// ending comment markers, but it doesn't need to match the end of the\n// comment exactly.\n//\n// Build ids are 21 bytes long in the default implementation, though this\n// can be overridden in the Next.js config. For the purposes of this check,\n// it's OK to only match the start of the id, so we'll truncate it if exceeds\n// a certain length.\n\nconst DOCTYPE_PREFIX = '<!DOCTYPE html>' // 15 bytes\nconst MAX_BUILD_ID_LENGTH = 24\n\n// Request the first 64 bytes. The Range header is inclusive of the end value.\nexport const DOC_PREFETCH_RANGE_HEADER_VALUE = 'bytes=0-63'\n\nfunction escapeBuildId(buildId: string) {\n  // If the build id is longer than the given limit, it's OK for our purposes\n  // to only match the beginning.\n  const truncated = buildId.slice(0, MAX_BUILD_ID_LENGTH)\n  // Replace hyphens with underscores so it doesn't break the HTML comment.\n  // (Unlikely, but if this did happen it would break the whole document.)\n  return truncated.replace(/-/g, '_')\n}\n\nexport function insertBuildIdComment(originalHtml: string, buildId: string) {\n  if (\n    // Skip if the build id contains a closing comment marker.\n    buildId.includes('-->') ||\n    // React always inserts a doctype at the start of the document. Skip if it\n    // isn't present. Shouldn't happen; suggests an issue elsewhere.\n    !originalHtml.startsWith(DOCTYPE_PREFIX)\n  ) {\n    // Return the original HTML unchanged. This means the document will not\n    // be prefetched.\n    // TODO: The build id comment is currently only used during prefetches, but\n    // if we eventually use this mechanism for regular navigations, we may need\n    // to error during build if we fail to insert it for some reason.\n    return originalHtml\n  }\n  // The comment must be inserted after the doctype.\n  return originalHtml.replace(\n    DOCTYPE_PREFIX,\n    DOCTYPE_PREFIX + '<!--' + escapeBuildId(buildId) + '-->'\n  )\n}\n\nexport function doesExportedHtmlMatchBuildId(\n  partialHtmlDocument: string,\n  buildId: string\n) {\n  // Check whether the document starts with the expected buildId.\n  return partialHtmlDocument.startsWith(\n    DOCTYPE_PREFIX + '<!--' + escapeBuildId(buildId) + '-->'\n  )\n}\n","import type { ReactDOMServerReadableStream } from 'react-dom/server'\nimport { getTracer } from '../lib/trace/tracer'\nimport { AppRenderSpan } from '../lib/trace/constants'\nimport { DetachedPromise } from '../../lib/detached-promise'\nimport { scheduleImmediate, atLeastOneTask } from '../../lib/scheduler'\nimport { ENCODED_TAGS } from './encoded-tags'\nimport {\n  indexOfUint8Array,\n  isEquivalentUint8Arrays,\n  removeFromUint8Array,\n} from './uint8array-helpers'\nimport { MISSING_ROOT_TAGS_ERROR } from '../../shared/lib/errors/constants'\nimport { insertBuildIdComment } from '../../shared/lib/segment-cache/output-export-prefetch-encoding'\n\nfunction voidCatch() {\n  // this catcher is designed to be used with pipeTo where we expect the underlying\n  // pipe implementation to forward errors but we don't want the pipeTo promise to reject\n  // and be unhandled\n}\n\n// We can share the same encoder instance everywhere\n// Notably we cannot do the same for TextDecoder because it is stateful\n// when handling streaming data\nconst encoder = new TextEncoder()\n\nexport function chainStreams<T>(\n  ...streams: ReadableStream<T>[]\n): ReadableStream<T> {\n  // If we have no streams, return an empty stream. This behavior is\n  // intentional as we're now providing the `RenderResult.EMPTY` value.\n  if (streams.length === 0) {\n    return new ReadableStream<T>({\n      start(controller) {\n        controller.close()\n      },\n    })\n  }\n\n  // If we only have 1 stream we fast path it by returning just this stream\n  if (streams.length === 1) {\n    return streams[0]\n  }\n\n  const { readable, writable } = new TransformStream()\n\n  // We always initiate pipeTo immediately. We know we have at least 2 streams\n  // so we need to avoid closing the writable when this one finishes.\n  let promise = streams[0].pipeTo(writable, { preventClose: true })\n\n  let i = 1\n  for (; i < streams.length - 1; i++) {\n    const nextStream = streams[i]\n    promise = promise.then(() =>\n      nextStream.pipeTo(writable, { preventClose: true })\n    )\n  }\n\n  // We can omit the length check because we halted before the last stream and there\n  // is at least two streams so the lastStream here will always be defined\n  const lastStream = streams[i]\n  promise = promise.then(() => lastStream.pipeTo(writable))\n\n  // Catch any errors from the streams and ignore them, they will be handled\n  // by whatever is consuming the readable stream.\n  promise.catch(voidCatch)\n\n  return readable\n}\n\nexport function streamFromString(str: string): ReadableStream<Uint8Array> {\n  return new ReadableStream({\n    start(controller) {\n      controller.enqueue(encoder.encode(str))\n      controller.close()\n    },\n  })\n}\n\nexport function streamFromBuffer(chunk: Buffer): ReadableStream<Uint8Array> {\n  return new ReadableStream({\n    start(controller) {\n      controller.enqueue(chunk)\n      controller.close()\n    },\n  })\n}\n\nexport async function streamToBuffer(\n  stream: ReadableStream<Uint8Array>\n): Promise<Buffer> {\n  const reader = stream.getReader()\n  const chunks: Uint8Array[] = []\n\n  while (true) {\n    const { done, value } = await reader.read()\n    if (done) {\n      break\n    }\n\n    chunks.push(value)\n  }\n\n  return Buffer.concat(chunks)\n}\n\nexport async function streamToString(\n  stream: ReadableStream<Uint8Array>,\n  signal?: AbortSignal\n): Promise<string> {\n  const decoder = new TextDecoder('utf-8', { fatal: true })\n  let string = ''\n\n  for await (const chunk of stream) {\n    if (signal?.aborted) {\n      return string\n    }\n\n    string += decoder.decode(chunk, { stream: true })\n  }\n\n  string += decoder.decode()\n\n  return string\n}\n\nexport function createBufferedTransformStream(): TransformStream<\n  Uint8Array,\n  Uint8Array\n> {\n  let bufferedChunks: Array<Uint8Array> = []\n  let bufferByteLength: number = 0\n  let pending: DetachedPromise<void> | undefined\n\n  const flush = (controller: TransformStreamDefaultController) => {\n    // If we already have a pending flush, then return early.\n    if (pending) return\n\n    const detached = new DetachedPromise<void>()\n    pending = detached\n\n    scheduleImmediate(() => {\n      try {\n        const chunk = new Uint8Array(bufferByteLength)\n        let copiedBytes = 0\n\n        for (let i = 0; i < bufferedChunks.length; i++) {\n          const bufferedChunk = bufferedChunks[i]\n          chunk.set(bufferedChunk, copiedBytes)\n          copiedBytes += bufferedChunk.byteLength\n        }\n        // We just wrote all the buffered chunks so we need to reset the bufferedChunks array\n        // and our bufferByteLength to prepare for the next round of buffered chunks\n        bufferedChunks.length = 0\n        bufferByteLength = 0\n        controller.enqueue(chunk)\n      } catch {\n        // If an error occurs while enqueuing it can't be due to this\n        // transformers fault. It's likely due to the controller being\n        // errored due to the stream being cancelled.\n      } finally {\n        pending = undefined\n        detached.resolve()\n      }\n    })\n  }\n\n  return new TransformStream({\n    transform(chunk, controller) {\n      // Combine the previous buffer with the new chunk.\n      bufferedChunks.push(chunk)\n      bufferByteLength += chunk.byteLength\n\n      // Flush the buffer to the controller.\n      flush(controller)\n    },\n    flush() {\n      if (!pending) return\n\n      return pending.promise\n    },\n  })\n}\n\nfunction createPrefetchCommentStream(\n  isBuildTimePrerendering: boolean,\n  buildId: string\n): TransformStream<Uint8Array, Uint8Array> {\n  // Insert an extra comment at the beginning of the HTML document. This must\n  // come after the DOCTYPE, which is inserted by React.\n  //\n  // The first chunk sent by React will contain the doctype. After that, we can\n  // pass through the rest of the chunks as-is.\n  let didTransformFirstChunk = false\n  return new TransformStream({\n    transform(chunk, controller) {\n      if (isBuildTimePrerendering && !didTransformFirstChunk) {\n        didTransformFirstChunk = true\n        const decoder = new TextDecoder('utf-8', { fatal: true })\n        const chunkStr = decoder.decode(chunk, {\n          stream: true,\n        })\n        const updatedChunkStr = insertBuildIdComment(chunkStr, buildId)\n        controller.enqueue(encoder.encode(updatedChunkStr))\n        return\n      }\n      controller.enqueue(chunk)\n    },\n  })\n}\n\nexport function renderToInitialFizzStream({\n  ReactDOMServer,\n  element,\n  streamOptions,\n}: {\n  ReactDOMServer: {\n    renderToReadableStream: typeof import('react-dom/server').renderToReadableStream\n  }\n  element: React.ReactElement\n  streamOptions?: Parameters<typeof ReactDOMServer.renderToReadableStream>[1]\n}): Promise<ReactDOMServerReadableStream> {\n  return getTracer().trace(AppRenderSpan.renderToReadableStream, async () =>\n    ReactDOMServer.renderToReadableStream(element, streamOptions)\n  )\n}\n\nfunction createMetadataTransformStream(\n  insert: () => Promise<string> | string\n): TransformStream<Uint8Array, Uint8Array> {\n  let chunkIndex = -1\n  let isMarkRemoved = false\n\n  return new TransformStream({\n    async transform(chunk, controller) {\n      let iconMarkIndex = -1\n      let closedHeadIndex = -1\n      chunkIndex++\n\n      if (isMarkRemoved) {\n        controller.enqueue(chunk)\n        return\n      }\n      let iconMarkLength = 0\n      // Only search for the closed head tag once\n      if (iconMarkIndex === -1) {\n        iconMarkIndex = indexOfUint8Array(chunk, ENCODED_TAGS.META.ICON_MARK)\n        if (iconMarkIndex === -1) {\n          controller.enqueue(chunk)\n          return\n        } else {\n          // When we found the `<meta name=\"«nxt-icon»\"` tag prefix, we will remove it from the chunk.\n          // Its close tag could either be `/>` or `>`, checking the next char to ensure we cover both cases.\n          iconMarkLength = ENCODED_TAGS.META.ICON_MARK.length\n          // Check if next char is /, this is for xml mode.\n          if (chunk[iconMarkIndex + iconMarkLength] === 47) {\n            iconMarkLength += 2\n          } else {\n            // The last char is `>`\n            iconMarkLength++\n          }\n        }\n      }\n\n      // Check if icon mark is inside <head> tag in the first chunk.\n      if (chunkIndex === 0) {\n        closedHeadIndex = indexOfUint8Array(chunk, ENCODED_TAGS.CLOSED.HEAD)\n        if (iconMarkIndex !== -1) {\n          // The mark icon is located in the 1st chunk before the head tag.\n          // We do not need to insert the script tag in this case because it's in the head.\n          // Just remove the icon mark from the chunk.\n          if (iconMarkIndex < closedHeadIndex) {\n            const replaced = new Uint8Array(chunk.length - iconMarkLength)\n\n            // Remove the icon mark from the chunk.\n            replaced.set(chunk.subarray(0, iconMarkIndex))\n            replaced.set(\n              chunk.subarray(iconMarkIndex + iconMarkLength),\n              iconMarkIndex\n            )\n            chunk = replaced\n          } else {\n            // The icon mark is after the head tag, replace and insert the script tag at that position.\n            const insertion = await insert()\n            const encodedInsertion = encoder.encode(insertion)\n            const insertionLength = encodedInsertion.length\n            const replaced = new Uint8Array(\n              chunk.length - iconMarkLength + insertionLength\n            )\n            replaced.set(chunk.subarray(0, iconMarkIndex))\n            replaced.set(encodedInsertion, iconMarkIndex)\n            replaced.set(\n              chunk.subarray(iconMarkIndex + iconMarkLength),\n              iconMarkIndex + insertionLength\n            )\n            chunk = replaced\n          }\n          isMarkRemoved = true\n        }\n        // If there's no icon mark located, it will be handled later when if present in the following chunks.\n      } else {\n        // When it's appeared in the following chunks, we'll need to\n        // remove the mark and then insert the script tag at that position.\n        const insertion = await insert()\n        const encodedInsertion = encoder.encode(insertion)\n        const insertionLength = encodedInsertion.length\n        // Replace the icon mark with the hoist script or empty string.\n        const replaced = new Uint8Array(\n          chunk.length - iconMarkLength + insertionLength\n        )\n        // Set the first part of the chunk, before the icon mark.\n        replaced.set(chunk.subarray(0, iconMarkIndex))\n        // Set the insertion after the icon mark.\n        replaced.set(encodedInsertion, iconMarkIndex)\n\n        // Set the rest of the chunk after the icon mark.\n        replaced.set(\n          chunk.subarray(iconMarkIndex + iconMarkLength),\n          iconMarkIndex + insertionLength\n        )\n        chunk = replaced\n        isMarkRemoved = true\n      }\n      controller.enqueue(chunk)\n    },\n  })\n}\n\nfunction createHeadInsertionTransformStream(\n  insert: () => Promise<string>\n): TransformStream<Uint8Array, Uint8Array> {\n  let inserted = false\n\n  // We need to track if this transform saw any bytes because if it didn't\n  // we won't want to insert any server HTML at all\n  let hasBytes = false\n\n  return new TransformStream({\n    async transform(chunk, controller) {\n      hasBytes = true\n\n      const insertion = await insert()\n      if (inserted) {\n        if (insertion) {\n          const encodedInsertion = encoder.encode(insertion)\n          controller.enqueue(encodedInsertion)\n        }\n        controller.enqueue(chunk)\n      } else {\n        // TODO (@Ethan-Arrowood): Replace the generic `indexOfUint8Array` method with something finely tuned for the subset of things actually being checked for.\n        const index = indexOfUint8Array(chunk, ENCODED_TAGS.CLOSED.HEAD)\n        // In fully static rendering or non PPR rendering cases:\n        // `/head>` will always be found in the chunk in first chunk rendering.\n        if (index !== -1) {\n          if (insertion) {\n            const encodedInsertion = encoder.encode(insertion)\n            // Get the total count of the bytes in the chunk and the insertion\n            // e.g.\n            // chunk = <head><meta charset=\"utf-8\"></head>\n            // insertion = <script>...</script>\n            // output = <head><meta charset=\"utf-8\"> [ <script>...</script> ] </head>\n            const insertedHeadContent = new Uint8Array(\n              chunk.length + encodedInsertion.length\n            )\n            // Append the first part of the chunk, before the head tag\n            insertedHeadContent.set(chunk.slice(0, index))\n            // Append the server inserted content\n            insertedHeadContent.set(encodedInsertion, index)\n            // Append the rest of the chunk\n            insertedHeadContent.set(\n              chunk.slice(index),\n              index + encodedInsertion.length\n            )\n            controller.enqueue(insertedHeadContent)\n          } else {\n            controller.enqueue(chunk)\n          }\n          inserted = true\n        } else {\n          // This will happens in PPR rendering during next start, when the page is partially rendered.\n          // When the page resumes, the head tag will be found in the middle of the chunk.\n          // Where we just need to append the insertion and chunk to the current stream.\n          // e.g.\n          // PPR-static: <head>...</head><body> [ resume content ] </body>\n          // PPR-resume: [ insertion ] [ rest content ]\n          if (insertion) {\n            controller.enqueue(encoder.encode(insertion))\n          }\n          controller.enqueue(chunk)\n          inserted = true\n        }\n      }\n    },\n    async flush(controller) {\n      // Check before closing if there's anything remaining to insert.\n      if (hasBytes) {\n        const insertion = await insert()\n        if (insertion) {\n          controller.enqueue(encoder.encode(insertion))\n        }\n      }\n    },\n  })\n}\n\n// Suffix after main body content - scripts before </body>,\n// but wait for the major chunks to be enqueued.\nfunction createDeferredSuffixStream(\n  suffix: string\n): TransformStream<Uint8Array, Uint8Array> {\n  let flushed = false\n  let pending: DetachedPromise<void> | undefined\n\n  const flush = (controller: TransformStreamDefaultController) => {\n    const detached = new DetachedPromise<void>()\n    pending = detached\n\n    scheduleImmediate(() => {\n      try {\n        controller.enqueue(encoder.encode(suffix))\n      } catch {\n        // If an error occurs while enqueuing it can't be due to this\n        // transformers fault. It's likely due to the controller being\n        // errored due to the stream being cancelled.\n      } finally {\n        pending = undefined\n        detached.resolve()\n      }\n    })\n  }\n\n  return new TransformStream({\n    transform(chunk, controller) {\n      controller.enqueue(chunk)\n\n      // If we've already flushed, we're done.\n      if (flushed) return\n\n      // Schedule the flush to happen.\n      flushed = true\n      flush(controller)\n    },\n    flush(controller) {\n      if (pending) return pending.promise\n      if (flushed) return\n\n      // Flush now.\n      controller.enqueue(encoder.encode(suffix))\n    },\n  })\n}\n\nfunction createFlightDataInjectionTransformStream(\n  stream: ReadableStream<Uint8Array>,\n  delayDataUntilFirstHtmlChunk: boolean\n): TransformStream<Uint8Array, Uint8Array> {\n  let htmlStreamFinished = false\n\n  let pull: Promise<void> | null = null\n  let donePulling = false\n\n  function startOrContinuePulling(\n    controller: TransformStreamDefaultController\n  ) {\n    if (!pull) {\n      pull = startPulling(controller)\n    }\n    return pull\n  }\n\n  async function startPulling(controller: TransformStreamDefaultController) {\n    const reader = stream.getReader()\n\n    if (delayDataUntilFirstHtmlChunk) {\n      // NOTE: streaming flush\n      // We are buffering here for the inlined data stream because the\n      // \"shell\" stream might be chunkenized again by the underlying stream\n      // implementation, e.g. with a specific high-water mark. To ensure it's\n      // the safe timing to pipe the data stream, this extra tick is\n      // necessary.\n\n      // We don't start reading until we've left the current Task to ensure\n      // that it's inserted after flushing the shell. Note that this implementation\n      // might get stale if impl details of Fizz change in the future.\n      await atLeastOneTask()\n    }\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read()\n        if (done) {\n          donePulling = true\n          return\n        }\n\n        // We want to prioritize HTML over RSC data.\n        // The SSR render is based on the same RSC stream, so when we get a new RSC chunk,\n        // we're likely to produce an HTML chunk as well, so give it a chance to flush first.\n        if (!delayDataUntilFirstHtmlChunk && !htmlStreamFinished) {\n          await atLeastOneTask()\n        }\n        controller.enqueue(value)\n      }\n    } catch (err) {\n      controller.error(err)\n    }\n  }\n\n  return new TransformStream({\n    start(controller) {\n      if (!delayDataUntilFirstHtmlChunk) {\n        startOrContinuePulling(controller)\n      }\n    },\n    transform(chunk, controller) {\n      controller.enqueue(chunk)\n\n      // Start the streaming if it hasn't already been started yet.\n      if (delayDataUntilFirstHtmlChunk) {\n        startOrContinuePulling(controller)\n      }\n    },\n    flush(controller) {\n      htmlStreamFinished = true\n      if (donePulling) {\n        return\n      }\n      return startOrContinuePulling(controller)\n    },\n  })\n}\n\nconst CLOSE_TAG = '</body></html>'\n\n/**\n * This transform stream moves the suffix to the end of the stream, so results\n * like `</body></html><script>...</script>` will be transformed to\n * `<script>...</script></body></html>`.\n */\nfunction createMoveSuffixStream(): TransformStream<Uint8Array, Uint8Array> {\n  let foundSuffix = false\n\n  return new TransformStream({\n    transform(chunk, controller) {\n      if (foundSuffix) {\n        return controller.enqueue(chunk)\n      }\n\n      const index = indexOfUint8Array(chunk, ENCODED_TAGS.CLOSED.BODY_AND_HTML)\n      if (index > -1) {\n        foundSuffix = true\n\n        // If the whole chunk is the suffix, then don't write anything, it will\n        // be written in the flush.\n        if (chunk.length === ENCODED_TAGS.CLOSED.BODY_AND_HTML.length) {\n          return\n        }\n\n        // Write out the part before the suffix.\n        const before = chunk.slice(0, index)\n        controller.enqueue(before)\n\n        // In the case where the suffix is in the middle of the chunk, we need\n        // to split the chunk into two parts.\n        if (chunk.length > ENCODED_TAGS.CLOSED.BODY_AND_HTML.length + index) {\n          // Write out the part after the suffix.\n          const after = chunk.slice(\n            index + ENCODED_TAGS.CLOSED.BODY_AND_HTML.length\n          )\n          controller.enqueue(after)\n        }\n      } else {\n        controller.enqueue(chunk)\n      }\n    },\n    flush(controller) {\n      // Even if we didn't find the suffix, the HTML is not valid if we don't\n      // add it, so insert it at the end.\n      controller.enqueue(ENCODED_TAGS.CLOSED.BODY_AND_HTML)\n    },\n  })\n}\n\nfunction createStripDocumentClosingTagsTransform(): TransformStream<\n  Uint8Array,\n  Uint8Array\n> {\n  return new TransformStream({\n    transform(chunk, controller) {\n      // We rely on the assumption that chunks will never break across a code unit.\n      // This is reasonable because we currently concat all of React's output from a single\n      // flush into one chunk before streaming it forward which means the chunk will represent\n      // a single coherent utf-8 string. This is not safe to use if we change our streaming to no\n      // longer do this large buffered chunk\n      if (\n        isEquivalentUint8Arrays(chunk, ENCODED_TAGS.CLOSED.BODY_AND_HTML) ||\n        isEquivalentUint8Arrays(chunk, ENCODED_TAGS.CLOSED.BODY) ||\n        isEquivalentUint8Arrays(chunk, ENCODED_TAGS.CLOSED.HTML)\n      ) {\n        // the entire chunk is the closing tags; return without enqueueing anything.\n        return\n      }\n\n      // We assume these tags will go at together at the end of the document and that\n      // they won't appear anywhere else in the document. This is not really a safe assumption\n      // but until we revamp our streaming infra this is a performant way to string the tags\n      chunk = removeFromUint8Array(chunk, ENCODED_TAGS.CLOSED.BODY)\n      chunk = removeFromUint8Array(chunk, ENCODED_TAGS.CLOSED.HTML)\n\n      controller.enqueue(chunk)\n    },\n  })\n}\n\n/*\n * Checks if the root layout is missing the html or body tags\n * and if so, it will inject a script tag to throw an error in the browser, showing the user\n * the error message in the error overlay.\n */\nexport function createRootLayoutValidatorStream(): TransformStream<\n  Uint8Array,\n  Uint8Array\n> {\n  let foundHtml = false\n  let foundBody = false\n  return new TransformStream({\n    async transform(chunk, controller) {\n      // Peek into the streamed chunk to see if the tags are present.\n      if (\n        !foundHtml &&\n        indexOfUint8Array(chunk, ENCODED_TAGS.OPENING.HTML) > -1\n      ) {\n        foundHtml = true\n      }\n\n      if (\n        !foundBody &&\n        indexOfUint8Array(chunk, ENCODED_TAGS.OPENING.BODY) > -1\n      ) {\n        foundBody = true\n      }\n\n      controller.enqueue(chunk)\n    },\n    flush(controller) {\n      const missingTags: ('html' | 'body')[] = []\n      if (!foundHtml) missingTags.push('html')\n      if (!foundBody) missingTags.push('body')\n\n      if (!missingTags.length) return\n\n      controller.enqueue(\n        encoder.encode(\n          `<html id=\"__next_error__\">\n            <template\n              data-next-error-message=\"Missing ${missingTags\n                .map((c) => `<${c}>`)\n                .join(\n                  missingTags.length > 1 ? ' and ' : ''\n                )} tags in the root layout.\\nRead more at https://nextjs.org/docs/messages/missing-root-layout-tags\"\n              data-next-error-digest=\"${MISSING_ROOT_TAGS_ERROR}\"\n              data-next-error-stack=\"\"\n            ></template>\n          `\n        )\n      )\n    },\n  })\n}\n\nfunction chainTransformers<T>(\n  readable: ReadableStream<T>,\n  transformers: ReadonlyArray<TransformStream<T, T> | null>\n): ReadableStream<T> {\n  let stream = readable\n  for (const transformer of transformers) {\n    if (!transformer) continue\n\n    stream = stream.pipeThrough(transformer)\n  }\n  return stream\n}\n\nexport type ContinueStreamOptions = {\n  inlinedDataStream: ReadableStream<Uint8Array> | undefined\n  isStaticGeneration: boolean\n  isBuildTimePrerendering: boolean\n  buildId: string\n  getServerInsertedHTML: () => Promise<string>\n  getServerInsertedMetadata: () => Promise<string>\n  validateRootLayout?: boolean\n  /**\n   * Suffix to inject after the buffered data, but before the close tags.\n   */\n  suffix?: string | undefined\n}\n\nexport async function continueFizzStream(\n  renderStream: ReactDOMServerReadableStream,\n  {\n    suffix,\n    inlinedDataStream,\n    isStaticGeneration,\n    isBuildTimePrerendering,\n    buildId,\n    getServerInsertedHTML,\n    getServerInsertedMetadata,\n    validateRootLayout,\n  }: ContinueStreamOptions\n): Promise<ReadableStream<Uint8Array>> {\n  // Suffix itself might contain close tags at the end, so we need to split it.\n  const suffixUnclosed = suffix ? suffix.split(CLOSE_TAG, 1)[0] : null\n\n  // If we're generating static HTML we need to wait for it to resolve before continuing.\n  if (isStaticGeneration) {\n    await renderStream.allReady\n  }\n\n  return chainTransformers(renderStream, [\n    // Buffer everything to avoid flushing too frequently\n    createBufferedTransformStream(),\n\n    // Add build id comment to start of the HTML document (in export mode)\n    createPrefetchCommentStream(isBuildTimePrerendering, buildId),\n\n    // Transform metadata\n    createMetadataTransformStream(getServerInsertedMetadata),\n\n    // Insert suffix content\n    suffixUnclosed != null && suffixUnclosed.length > 0\n      ? createDeferredSuffixStream(suffixUnclosed)\n      : null,\n\n    // Insert the inlined data (Flight data, form state, etc.) stream into the HTML\n    inlinedDataStream\n      ? createFlightDataInjectionTransformStream(inlinedDataStream, true)\n      : null,\n\n    // Validate the root layout for missing html or body tags\n    validateRootLayout ? createRootLayoutValidatorStream() : null,\n\n    // Close tags should always be deferred to the end\n    createMoveSuffixStream(),\n\n    // Special head insertions\n    // TODO-APP: Insert server side html to end of head in app layout rendering, to avoid\n    // hydration errors. Remove this once it's ready to be handled by react itself.\n    createHeadInsertionTransformStream(getServerInsertedHTML),\n  ])\n}\n\ntype ContinueDynamicPrerenderOptions = {\n  getServerInsertedHTML: () => Promise<string>\n  getServerInsertedMetadata: () => Promise<string>\n}\n\nexport async function continueDynamicPrerender(\n  prerenderStream: ReadableStream<Uint8Array>,\n  {\n    getServerInsertedHTML,\n    getServerInsertedMetadata,\n  }: ContinueDynamicPrerenderOptions\n) {\n  return (\n    prerenderStream\n      // Buffer everything to avoid flushing too frequently\n      .pipeThrough(createBufferedTransformStream())\n      .pipeThrough(createStripDocumentClosingTagsTransform())\n      // Insert generated tags to head\n      .pipeThrough(createHeadInsertionTransformStream(getServerInsertedHTML))\n      // Transform metadata\n      .pipeThrough(createMetadataTransformStream(getServerInsertedMetadata))\n  )\n}\n\ntype ContinueStaticPrerenderOptions = {\n  inlinedDataStream: ReadableStream<Uint8Array>\n  getServerInsertedHTML: () => Promise<string>\n  getServerInsertedMetadata: () => Promise<string>\n  isBuildTimePrerendering: boolean\n  buildId: string\n}\n\nexport async function continueStaticPrerender(\n  prerenderStream: ReadableStream<Uint8Array>,\n  {\n    inlinedDataStream,\n    getServerInsertedHTML,\n    getServerInsertedMetadata,\n    isBuildTimePrerendering,\n    buildId,\n  }: ContinueStaticPrerenderOptions\n) {\n  return (\n    prerenderStream\n      // Buffer everything to avoid flushing too frequently\n      .pipeThrough(createBufferedTransformStream())\n      // Add build id comment to start of the HTML document (in export mode)\n      .pipeThrough(\n        createPrefetchCommentStream(isBuildTimePrerendering, buildId)\n      )\n      // Insert generated tags to head\n      .pipeThrough(createHeadInsertionTransformStream(getServerInsertedHTML))\n      // Transform metadata\n      .pipeThrough(createMetadataTransformStream(getServerInsertedMetadata))\n      // Insert the inlined data (Flight data, form state, etc.) stream into the HTML\n      .pipeThrough(\n        createFlightDataInjectionTransformStream(inlinedDataStream, true)\n      )\n      // Close tags should always be deferred to the end\n      .pipeThrough(createMoveSuffixStream())\n  )\n}\n\ntype ContinueResumeOptions = {\n  inlinedDataStream: ReadableStream<Uint8Array>\n  getServerInsertedHTML: () => Promise<string>\n  getServerInsertedMetadata: () => Promise<string>\n  delayDataUntilFirstHtmlChunk: boolean\n}\n\nexport async function continueDynamicHTMLResume(\n  renderStream: ReadableStream<Uint8Array>,\n  {\n    delayDataUntilFirstHtmlChunk,\n    inlinedDataStream,\n    getServerInsertedHTML,\n    getServerInsertedMetadata,\n  }: ContinueResumeOptions\n) {\n  return (\n    renderStream\n      // Buffer everything to avoid flushing too frequently\n      .pipeThrough(createBufferedTransformStream())\n      // Insert generated tags to head\n      .pipeThrough(createHeadInsertionTransformStream(getServerInsertedHTML))\n      // Transform metadata\n      .pipeThrough(createMetadataTransformStream(getServerInsertedMetadata))\n      // Insert the inlined data (Flight data, form state, etc.) stream into the HTML\n      .pipeThrough(\n        createFlightDataInjectionTransformStream(\n          inlinedDataStream,\n          delayDataUntilFirstHtmlChunk\n        )\n      )\n      // Close tags should always be deferred to the end\n      .pipeThrough(createMoveSuffixStream())\n  )\n}\n\nexport function createDocumentClosingStream(): ReadableStream<Uint8Array> {\n  return streamFromString(CLOSE_TAG)\n}\n","/* eslint-disable no-redeclare */\nimport type { IncomingMessage } from 'http'\nimport type { ParsedUrlQuery } from 'querystring'\nimport type { UrlWithParsedQuery } from 'url'\nimport type { BaseNextRequest } from './base-http'\nimport type { CloneableBody } from './body-streams'\nimport type { RouteMatch } from './route-matches/route-match'\nimport type { NEXT_RSC_UNION_QUERY } from '../client/components/app-router-headers'\nimport type { ServerComponentsHmrCache } from './response-cache'\nimport type { PagesDevOverlayBridgeType } from '../next-devtools/userspace/pages/pages-dev-overlay-setup'\n\n// FIXME: (wyattjoh) this is a temporary solution to allow us to pass data between bundled modules\nexport const NEXT_REQUEST_META = Symbol.for('NextInternalRequestMeta')\n\nexport type NextIncomingMessage = (BaseNextRequest | IncomingMessage) & {\n  [NEXT_REQUEST_META]?: RequestMeta\n}\n\nexport interface RequestMeta {\n  /**\n   * The query that was used to make the request.\n   */\n  initQuery?: ParsedUrlQuery\n\n  /**\n   * The URL that was used to make the request.\n   */\n  initURL?: string\n\n  /**\n   * The protocol that was used to make the request.\n   */\n  initProtocol?: string\n\n  /**\n   * The body that was read from the request. This is used to allow the body to\n   * be read multiple times.\n   */\n  clonableBody?: CloneableBody\n\n  /**\n   * True when the request matched a locale domain that was configured in the\n   * next.config.js file.\n   */\n  isLocaleDomain?: boolean\n\n  /**\n   * True when the request had locale information stripped from the pathname\n   * part of the URL.\n   */\n  didStripLocale?: boolean\n\n  /**\n   * If the request had it's URL rewritten, this is the URL it was rewritten to.\n   */\n  rewroteURL?: string\n\n  /**\n   * The cookies that were added by middleware and were added to the response.\n   */\n  middlewareCookie?: string[]\n\n  /**\n   * The match on the request for a given route.\n   */\n  match?: RouteMatch\n\n  /**\n   * The incremental cache to use for the request.\n   */\n  incrementalCache?: any\n\n  /**\n   * The server components HMR cache, only for dev.\n   */\n  serverComponentsHmrCache?: ServerComponentsHmrCache\n\n  /**\n   * Equals the segment path that was used for the prefetch RSC request.\n   */\n  segmentPrefetchRSCRequest?: string\n\n  /**\n   * True when the request is for the prefetch flight data.\n   */\n  isPrefetchRSCRequest?: true\n\n  /**\n   * True when the request is for the flight data.\n   */\n  isRSCRequest?: true\n\n  /**\n   * A search param set by the Next.js client when performing RSC requests.\n   * Because some CDNs do not vary their cache entries on our custom headers,\n   * this search param represents a hash of the header values. For any cached\n   * RSC request, we should verify that the hash matches before responding.\n   * Otherwise this can lead to cache poisoning.\n   * TODO: Consider not using custom request headers at all, and instead encode\n   * everything into the search param.\n   */\n  cacheBustingSearchParam?: string\n\n  /**\n   * True when the request is for the `/_next/data` route using the pages\n   * router.\n   */\n  isNextDataReq?: true\n\n  /**\n   * Postponed state to use for resumption. If present it's assumed that the\n   * request is for a page that has postponed (there are no guarantees that the\n   * page actually has postponed though as it would incur an additional cache\n   * lookup).\n   */\n  postponed?: string\n\n  /**\n   * If provided, this will be called when a response cache entry was generated\n   * or looked up in the cache.\n   */\n  onCacheEntry?: (\n    cacheEntry: any,\n    requestMeta: any\n  ) => Promise<boolean | void> | boolean | void\n\n  /**\n   * The previous revalidate before rendering 404 page for notFound: true\n   */\n  notFoundRevalidate?: number | false\n\n  /**\n   * In development, the original source page that returned a 404.\n   */\n  developmentNotFoundSourcePage?: string\n\n  /**\n   * The path we routed to and should be invoked\n   */\n  invokePath?: string\n\n  /**\n   * The specific page output we should be matching\n   */\n  invokeOutput?: string\n\n  /**\n   * The status we are invoking the request with from routing\n   */\n  invokeStatus?: number\n\n  /**\n   * The routing error we are invoking with\n   */\n  invokeError?: Error\n\n  /**\n   * The query parsed for the invocation\n   */\n  invokeQuery?: Record<string, undefined | string | string[]>\n\n  /**\n   * Whether the request is a middleware invocation\n   */\n  middlewareInvoke?: boolean\n\n  /**\n   * Whether the request should render the fallback shell or not.\n   */\n  renderFallbackShell?: boolean\n\n  /**\n   * Whether the request is for the custom error page.\n   */\n  customErrorRender?: true\n\n  /**\n   * Whether to bubble up the NoFallbackError to the caller when a 404 is\n   * returned.\n   */\n  bubbleNoFallback?: true\n\n  /**\n   * True when the request had locale information inferred from the default\n   * locale.\n   */\n  localeInferredFromDefault?: true\n\n  /**\n   * The locale that was inferred or explicitly set for the request.\n   */\n  locale?: string\n\n  /**\n   * The default locale that was inferred or explicitly set for the request.\n   */\n  defaultLocale?: string\n\n  /**\n   * The relative project dir the server is running in from project root\n   */\n  relativeProjectDir?: string\n\n  /**\n   * The dist directory the server is currently using\n   */\n  distDir?: string\n\n  /**\n   * The query after resolving routes\n   */\n  query?: ParsedUrlQuery\n\n  /**\n   * The params after resolving routes\n   */\n  params?: ParsedUrlQuery\n\n  /**\n   * The AMP validator to use in development\n   */\n  ampValidator?: (html: string, pathname: string) => Promise<void>\n\n  /**\n   * ErrorOverlay component to use in development for pages router\n   */\n  PagesErrorDebug?: PagesDevOverlayBridgeType\n\n  /**\n   * Whether server is in minimal mode (this will be replaced with more\n   * specific flags in future)\n   */\n  minimalMode?: boolean\n\n  /**\n   * DEV only: The fallback params that should be used when validating prerenders during dev\n   */\n  devValidatingFallbackParams?: Map<string, string>\n}\n\n/**\n * Gets the request metadata. If no key is provided, the entire metadata object\n * is returned.\n *\n * @param req the request to get the metadata from\n * @param key the key to get from the metadata (optional)\n * @returns the value for the key or the entire metadata object\n */\nexport function getRequestMeta(\n  req: NextIncomingMessage,\n  key?: undefined\n): RequestMeta\nexport function getRequestMeta<K extends keyof RequestMeta>(\n  req: NextIncomingMessage,\n  key: K\n): RequestMeta[K]\nexport function getRequestMeta<K extends keyof RequestMeta>(\n  req: NextIncomingMessage,\n  key?: K\n): RequestMeta | RequestMeta[K] {\n  const meta = req[NEXT_REQUEST_META] || {}\n  return typeof key === 'string' ? meta[key] : meta\n}\n\n/**\n * Sets the request metadata.\n *\n * @param req the request to set the metadata on\n * @param meta the metadata to set\n * @returns the mutated request metadata\n */\nexport function setRequestMeta(req: NextIncomingMessage, meta: RequestMeta) {\n  req[NEXT_REQUEST_META] = meta\n  return meta\n}\n\n/**\n * Adds a value to the request metadata.\n *\n * @param request the request to mutate\n * @param key the key to set\n * @param value the value to set\n * @returns the mutated request metadata\n */\nexport function addRequestMeta<K extends keyof RequestMeta>(\n  request: NextIncomingMessage,\n  key: K,\n  value: RequestMeta[K]\n) {\n  const meta = getRequestMeta(request)\n  meta[key] = value\n  return setRequestMeta(request, meta)\n}\n\n/**\n * Removes a key from the request metadata.\n *\n * @param request the request to mutate\n * @param key the key to remove\n * @returns the mutated request metadata\n */\nexport function removeRequestMeta<K extends keyof RequestMeta>(\n  request: NextIncomingMessage,\n  key: K\n) {\n  const meta = getRequestMeta(request)\n  delete meta[key]\n  return setRequestMeta(request, meta)\n}\n\ntype NextQueryMetadata = {\n  /**\n   * The `_rsc` query parameter used for cache busting to ensure that the RSC\n   * requests do not get cached by the browser explicitly.\n   */\n  [NEXT_RSC_UNION_QUERY]?: string\n}\n\nexport type NextParsedUrlQuery = ParsedUrlQuery &\n  NextQueryMetadata & {\n    amp?: '1'\n  }\n\nexport interface NextUrlWithParsedQuery extends UrlWithParsedQuery {\n  query: NextParsedUrlQuery\n}\n","import type { BaseNextRequest, BaseNextResponse } from './'\nimport type { NodeNextRequest, NodeNextResponse } from './node'\nimport type { WebNextRequest, WebNextResponse } from './web'\n\n/**\n * This file provides some helpers that should be used in conjunction with\n * explicit environment checks. When combined with the environment checks, it\n * will ensure that the correct typings are used as well as enable code\n * elimination.\n */\n\n/**\n * Type guard to determine if a request is a WebNextRequest. This does not\n * actually check the type of the request, but rather the runtime environment.\n * It's expected that when the runtime environment is the edge runtime, that any\n * base request is a WebNextRequest.\n */\nexport const isWebNextRequest = (req: BaseNextRequest): req is WebNextRequest =>\n  process.env.NEXT_RUNTIME === 'edge'\n\n/**\n * Type guard to determine if a response is a WebNextResponse. This does not\n * actually check the type of the response, but rather the runtime environment.\n * It's expected that when the runtime environment is the edge runtime, that any\n * base response is a WebNextResponse.\n */\nexport const isWebNextResponse = (\n  res: BaseNextResponse\n): res is WebNextResponse => process.env.NEXT_RUNTIME === 'edge'\n\n/**\n * Type guard to determine if a request is a NodeNextRequest. This does not\n * actually check the type of the request, but rather the runtime environment.\n * It's expected that when the runtime environment is the node runtime, that any\n * base request is a NodeNextRequest.\n */\nexport const isNodeNextRequest = (\n  req: BaseNextRequest\n): req is NodeNextRequest => process.env.NEXT_RUNTIME !== 'edge'\n\n/**\n * Type guard to determine if a response is a NodeNextResponse. This does not\n * actually check the type of the response, but rather the runtime environment.\n * It's expected that when the runtime environment is the node runtime, that any\n * base response is a NodeNextResponse.\n */\nexport const isNodeNextResponse = (\n  res: BaseNextResponse\n): res is NodeNextResponse => process.env.NEXT_RUNTIME !== 'edge'\n","import type { BaseNextRequest } from '../../../base-http'\nimport type { NodeNextRequest } from '../../../base-http/node'\nimport type { WebNextRequest } from '../../../base-http/web'\nimport type { Writable } from 'node:stream'\n\nimport { getRequestMeta } from '../../../request-meta'\nimport { fromNodeOutgoingHttpHeaders } from '../../utils'\nimport { NextRequest } from '../request'\nimport { isNodeNextRequest, isWebNextRequest } from '../../../base-http/helpers'\n\nexport const ResponseAbortedName = 'ResponseAborted'\nexport class ResponseAborted extends Error {\n  public readonly name = ResponseAbortedName\n}\n\n/**\n * Creates an AbortController tied to the closing of a ServerResponse (or other\n * appropriate Writable).\n *\n * If the `close` event is fired before the `finish` event, then we'll send the\n * `abort` signal.\n */\nexport function createAbortController(response: Writable): AbortController {\n  const controller = new AbortController()\n\n  // If `finish` fires first, then `res.end()` has been called and the close is\n  // just us finishing the stream on our side. If `close` fires first, then we\n  // know the client disconnected before we finished.\n  response.once('close', () => {\n    if (response.writableFinished) return\n\n    controller.abort(new ResponseAborted())\n  })\n\n  return controller\n}\n\n/**\n * Creates an AbortSignal tied to the closing of a ServerResponse (or other\n * appropriate Writable).\n *\n * This cannot be done with the request (IncomingMessage or Readable) because\n * the `abort` event will not fire if to data has been fully read (because that\n * will \"close\" the readable stream and nothing fires after that).\n */\nexport function signalFromNodeResponse(response: Writable): AbortSignal {\n  const { errored, destroyed } = response\n  if (errored || destroyed) {\n    return AbortSignal.abort(errored ?? new ResponseAborted())\n  }\n\n  const { signal } = createAbortController(response)\n  return signal\n}\n\nexport class NextRequestAdapter {\n  public static fromBaseNextRequest(\n    request: BaseNextRequest,\n    signal: AbortSignal\n  ): NextRequest {\n    if (\n      // The type check here ensures that `req` is correctly typed, and the\n      // environment variable check provides dead code elimination.\n      process.env.NEXT_RUNTIME === 'edge' &&\n      isWebNextRequest(request)\n    ) {\n      return NextRequestAdapter.fromWebNextRequest(request)\n    } else if (\n      // The type check here ensures that `req` is correctly typed, and the\n      // environment variable check provides dead code elimination.\n      process.env.NEXT_RUNTIME !== 'edge' &&\n      isNodeNextRequest(request)\n    ) {\n      return NextRequestAdapter.fromNodeNextRequest(request, signal)\n    } else {\n      throw new Error('Invariant: Unsupported NextRequest type')\n    }\n  }\n\n  public static fromNodeNextRequest(\n    request: NodeNextRequest,\n    signal: AbortSignal\n  ): NextRequest {\n    // HEAD and GET requests can not have a body.\n    let body: BodyInit | null = null\n    if (request.method !== 'GET' && request.method !== 'HEAD' && request.body) {\n      // @ts-expect-error - this is handled by undici, when streams/web land use it instead\n      body = request.body\n    }\n\n    let url: URL\n    if (request.url.startsWith('http')) {\n      url = new URL(request.url)\n    } else {\n      // Grab the full URL from the request metadata.\n      const base = getRequestMeta(request, 'initURL')\n      if (!base || !base.startsWith('http')) {\n        // Because the URL construction relies on the fact that the URL provided\n        // is absolute, we need to provide a base URL. We can't use the request\n        // URL because it's relative, so we use a dummy URL instead.\n        url = new URL(request.url, 'http://n')\n      } else {\n        url = new URL(request.url, base)\n      }\n    }\n\n    return new NextRequest(url, {\n      method: request.method,\n      headers: fromNodeOutgoingHttpHeaders(request.headers),\n      duplex: 'half',\n      signal,\n      // geo\n      // ip\n      // nextConfig\n\n      // body can not be passed if request was aborted\n      // or we get a Request body was disturbed error\n      ...(signal.aborted\n        ? {}\n        : {\n            body,\n          }),\n    })\n  }\n\n  public static fromWebNextRequest(request: WebNextRequest): NextRequest {\n    // HEAD and GET requests can not have a body.\n    let body: ReadableStream | null = null\n    if (request.method !== 'GET' && request.method !== 'HEAD') {\n      body = request.body\n    }\n\n    return new NextRequest(request.url, {\n      method: request.method,\n      headers: fromNodeOutgoingHttpHeaders(request.headers),\n      duplex: 'half',\n      signal: request.request.signal,\n      // geo\n      // ip\n      // nextConfig\n\n      // body can not be passed if request was aborted\n      // or we get a Request body was disturbed error\n      ...(request.request.signal.aborted\n        ? {}\n        : {\n            body,\n          }),\n    })\n  }\n}\n","import type { AppPageModule } from './route-modules/app-page/module'\n\n// Combined load times for loading client components\nlet clientComponentLoadStart = 0\nlet clientComponentLoadTimes = 0\nlet clientComponentLoadCount = 0\n\nexport function wrapClientComponentLoader(\n  ComponentMod: AppPageModule\n): AppPageModule['__next_app__'] {\n  if (!('performance' in globalThis)) {\n    return ComponentMod.__next_app__\n  }\n\n  return {\n    require: (...args) => {\n      const startTime = performance.now()\n\n      if (clientComponentLoadStart === 0) {\n        clientComponentLoadStart = startTime\n      }\n\n      try {\n        clientComponentLoadCount += 1\n        return ComponentMod.__next_app__.require(...args)\n      } finally {\n        clientComponentLoadTimes += performance.now() - startTime\n      }\n    },\n    loadChunk: (...args) => {\n      const startTime = performance.now()\n      const result = ComponentMod.__next_app__.loadChunk(...args)\n      // Avoid wrapping `loadChunk`'s result in an extra promise in case something like React depends on its identity.\n      // We only need to know when it's settled.\n      result.finally(() => {\n        clientComponentLoadTimes += performance.now() - startTime\n      })\n      return result\n    },\n  }\n}\n\nexport function getClientComponentLoaderMetrics(\n  options: { reset?: boolean } = {}\n) {\n  const metrics =\n    clientComponentLoadStart === 0\n      ? undefined\n      : {\n          clientComponentLoadStart,\n          clientComponentLoadTimes,\n          clientComponentLoadCount,\n        }\n\n  if (options.reset) {\n    clientComponentLoadStart = 0\n    clientComponentLoadTimes = 0\n    clientComponentLoadCount = 0\n  }\n\n  return metrics\n}\n","import type { ServerResponse } from 'node:http'\n\nimport {\n  ResponseAbortedName,\n  createAbortController,\n} from './web/spec-extension/adapters/next-request'\nimport { DetachedPromise } from '../lib/detached-promise'\nimport { getTracer } from './lib/trace/tracer'\nimport { NextNodeServerSpan } from './lib/trace/constants'\nimport { getClientComponentLoaderMetrics } from './client-component-renderer-logger'\n\nexport function isAbortError(e: any): e is Error & { name: 'AbortError' } {\n  return e?.name === 'AbortError' || e?.name === ResponseAbortedName\n}\n\nfunction createWriterFromResponse(\n  res: ServerResponse,\n  waitUntilForEnd?: Promise<unknown>\n): WritableStream<Uint8Array> {\n  let started = false\n\n  // Create a promise that will resolve once the response has drained. See\n  // https://nodejs.org/api/stream.html#stream_event_drain\n  let drained = new DetachedPromise<void>()\n  function onDrain() {\n    drained.resolve()\n  }\n  res.on('drain', onDrain)\n\n  // If the finish event fires, it means we shouldn't block and wait for the\n  // drain event.\n  res.once('close', () => {\n    res.off('drain', onDrain)\n    drained.resolve()\n  })\n\n  // Create a promise that will resolve once the response has finished. See\n  // https://nodejs.org/api/http.html#event-finish_1\n  const finished = new DetachedPromise<void>()\n  res.once('finish', () => {\n    finished.resolve()\n  })\n\n  // Create a writable stream that will write to the response.\n  return new WritableStream<Uint8Array>({\n    write: async (chunk) => {\n      // You'd think we'd want to use `start` instead of placing this in `write`\n      // but this ensures that we don't actually flush the headers until we've\n      // started writing chunks.\n      if (!started) {\n        started = true\n\n        if (\n          'performance' in globalThis &&\n          process.env.NEXT_OTEL_PERFORMANCE_PREFIX\n        ) {\n          const metrics = getClientComponentLoaderMetrics()\n          if (metrics) {\n            performance.measure(\n              `${process.env.NEXT_OTEL_PERFORMANCE_PREFIX}:next-client-component-loading`,\n              {\n                start: metrics.clientComponentLoadStart,\n                end:\n                  metrics.clientComponentLoadStart +\n                  metrics.clientComponentLoadTimes,\n              }\n            )\n          }\n        }\n\n        res.flushHeaders()\n        getTracer().trace(\n          NextNodeServerSpan.startResponse,\n          {\n            spanName: 'start response',\n          },\n          () => undefined\n        )\n      }\n\n      try {\n        const ok = res.write(chunk)\n\n        // Added by the `compression` middleware, this is a function that will\n        // flush the partially-compressed response to the client.\n        if ('flush' in res && typeof res.flush === 'function') {\n          res.flush()\n        }\n\n        // If the write returns false, it means there's some backpressure, so\n        // wait until it's streamed before continuing.\n        if (!ok) {\n          await drained.promise\n\n          // Reset the drained promise so that we can wait for the next drain event.\n          drained = new DetachedPromise<void>()\n        }\n      } catch (err) {\n        res.end()\n        throw new Error('failed to write chunk to response', { cause: err })\n      }\n    },\n    abort: (err) => {\n      if (res.writableFinished) return\n\n      res.destroy(err)\n    },\n    close: async () => {\n      // if a waitUntil promise was passed, wait for it to resolve before\n      // ending the response.\n      if (waitUntilForEnd) {\n        await waitUntilForEnd\n      }\n\n      if (res.writableFinished) return\n\n      res.end()\n      return finished.promise\n    },\n  })\n}\n\nexport async function pipeToNodeResponse(\n  readable: ReadableStream<Uint8Array>,\n  res: ServerResponse,\n  waitUntilForEnd?: Promise<unknown>\n) {\n  try {\n    // If the response has already errored, then just return now.\n    const { errored, destroyed } = res\n    if (errored || destroyed) return\n\n    // Create a new AbortController so that we can abort the readable if the\n    // client disconnects.\n    const controller = createAbortController(res)\n\n    const writer = createWriterFromResponse(res, waitUntilForEnd)\n\n    await readable.pipeTo(writer, { signal: controller.signal })\n  } catch (err: any) {\n    // If this isn't related to an abort error, re-throw it.\n    if (isAbortError(err)) return\n\n    throw new Error('failed to pipe response', { cause: err })\n  }\n}\n","import type { OutgoingHttpHeaders, ServerResponse } from 'http'\nimport type { CacheControl } from './lib/cache-control'\nimport type { FetchMetrics } from './base-http'\n\nimport {\n  chainStreams,\n  streamFromBuffer,\n  streamFromString,\n  streamToString,\n} from './stream-utils/node-web-streams-helper'\nimport { isAbortError, pipeToNodeResponse } from './pipe-readable'\nimport type { RenderResumeDataCache } from './resume-data-cache/resume-data-cache'\nimport { InvariantError } from '../shared/lib/invariant-error'\nimport type {\n  HTML_CONTENT_TYPE_HEADER,\n  JSON_CONTENT_TYPE_HEADER,\n  TEXT_PLAIN_CONTENT_TYPE_HEADER,\n} from '../lib/constants'\nimport type { RSC_CONTENT_TYPE_HEADER } from '../client/components/app-router-headers'\n\ntype ContentTypeOption =\n  | typeof RSC_CONTENT_TYPE_HEADER // For App Page RSC responses\n  | typeof HTML_CONTENT_TYPE_HEADER // For App Page, Pages HTML responses\n  | typeof JSON_CONTENT_TYPE_HEADER // For API routes, Next.js data requests\n  | typeof TEXT_PLAIN_CONTENT_TYPE_HEADER // For simplified errors\n\nexport type AppPageRenderResultMetadata = {\n  flightData?: Buffer\n  cacheControl?: CacheControl\n  staticBailoutInfo?: {\n    stack?: string\n    description?: string\n  }\n\n  /**\n   * The postponed state if the render had postponed and needs to be resumed.\n   */\n  postponed?: string\n\n  /**\n   * The headers to set on the response that were added by the render.\n   */\n  headers?: OutgoingHttpHeaders\n  statusCode?: number\n  fetchTags?: string\n  fetchMetrics?: FetchMetrics\n\n  segmentData?: Map<string, Buffer>\n\n  /**\n   * In development, the resume data cache is warmed up before the render. This\n   * is attached to the metadata so that it can be used during the render. When\n   * prerendering, the filled resume data cache is also attached to the metadata\n   * so that it can be used when prerendering matching fallback shells.\n   */\n  renderResumeDataCache?: RenderResumeDataCache\n}\n\nexport type PagesRenderResultMetadata = {\n  pageData?: any\n  cacheControl?: CacheControl\n  assetQueryString?: string\n  isNotFound?: boolean\n  isRedirect?: boolean\n}\n\nexport type StaticRenderResultMetadata = {}\n\nexport type RenderResultMetadata = AppPageRenderResultMetadata &\n  PagesRenderResultMetadata &\n  StaticRenderResultMetadata\n\nexport type RenderResultResponse =\n  | ReadableStream<Uint8Array>[]\n  | ReadableStream<Uint8Array>\n  | string\n  | Buffer\n  | null\n\nexport type RenderResultOptions<\n  Metadata extends RenderResultMetadata = RenderResultMetadata,\n> = {\n  contentType: ContentTypeOption | null\n  waitUntil?: Promise<unknown>\n  metadata: Metadata\n}\n\nexport default class RenderResult<\n  Metadata extends RenderResultMetadata = RenderResultMetadata,\n> {\n  /**\n   * The detected content type for the response. This is used to set the\n   * `Content-Type` header.\n   */\n  public readonly contentType: ContentTypeOption | null\n\n  /**\n   * The metadata for the response. This is used to set the revalidation times\n   * and other metadata.\n   */\n  public readonly metadata: Readonly<Metadata>\n\n  /**\n   * The response itself. This can be a string, a stream, or null. If it's a\n   * string, then it's a static response. If it's a stream, then it's a\n   * dynamic response. If it's null, then the response was not found or was\n   * already sent.\n   */\n  private response: RenderResultResponse\n\n  /**\n   * A render result that represents an empty response. This is used to\n   * represent a response that was not found or was already sent.\n   */\n  public static readonly EMPTY = new RenderResult<StaticRenderResultMetadata>(\n    null,\n    { metadata: {}, contentType: null }\n  )\n\n  /**\n   * Creates a new RenderResult instance from a static response.\n   *\n   * @param value the static response value\n   * @param contentType the content type of the response\n   * @returns a new RenderResult instance\n   */\n  public static fromStatic(\n    value: string | Buffer,\n    contentType: ContentTypeOption\n  ) {\n    return new RenderResult<StaticRenderResultMetadata>(value, {\n      metadata: {},\n      contentType,\n    })\n  }\n\n  private readonly waitUntil?: Promise<unknown>\n\n  constructor(\n    response: RenderResultResponse,\n    { contentType, waitUntil, metadata }: RenderResultOptions<Metadata>\n  ) {\n    this.response = response\n    this.contentType = contentType\n    this.metadata = metadata\n    this.waitUntil = waitUntil\n  }\n\n  public assignMetadata(metadata: Metadata) {\n    Object.assign(this.metadata, metadata)\n  }\n\n  /**\n   * Returns true if the response is null. It can be null if the response was\n   * not found or was already sent.\n   */\n  public get isNull(): boolean {\n    return this.response === null\n  }\n\n  /**\n   * Returns false if the response is a string. It can be a string if the page\n   * was prerendered. If it's not, then it was generated dynamically.\n   */\n  public get isDynamic(): boolean {\n    return typeof this.response !== 'string'\n  }\n\n  /**\n   * Returns the response if it is a string. If the page was dynamic, this will\n   * return a promise if the `stream` option is true, or it will throw an error.\n   *\n   * @param stream Whether or not to return a promise if the response is dynamic\n   * @returns The response as a string\n   */\n  public toUnchunkedString(stream?: false): string\n  public toUnchunkedString(stream: true): Promise<string>\n  public toUnchunkedString(stream = false): Promise<string> | string {\n    if (this.response === null) {\n      // If the response is null, return an empty string. This behavior is\n      // intentional as we're now providing the `RenderResult.EMPTY` value.\n      return ''\n    }\n\n    if (typeof this.response !== 'string') {\n      if (!stream) {\n        throw new InvariantError(\n          'dynamic responses cannot be unchunked. This is a bug in Next.js'\n        )\n      }\n\n      return streamToString(this.readable)\n    }\n\n    return this.response\n  }\n\n  /**\n   * Returns a readable stream of the response.\n   */\n  private get readable(): ReadableStream<Uint8Array> {\n    if (this.response === null) {\n      // If the response is null, return an empty stream. This behavior is\n      // intentional as we're now providing the `RenderResult.EMPTY` value.\n      return new ReadableStream<Uint8Array>({\n        start(controller) {\n          controller.close()\n        },\n      })\n    }\n\n    if (typeof this.response === 'string') {\n      return streamFromString(this.response)\n    }\n\n    if (Buffer.isBuffer(this.response)) {\n      return streamFromBuffer(this.response)\n    }\n\n    // If the response is an array of streams, then chain them together.\n    if (Array.isArray(this.response)) {\n      return chainStreams(...this.response)\n    }\n\n    return this.response\n  }\n\n  /**\n   * Coerces the response to an array of streams. This will convert the response\n   * to an array of streams if it is not already one.\n   *\n   * @returns An array of streams\n   */\n  private coerce(): ReadableStream<Uint8Array>[] {\n    if (this.response === null) {\n      // If the response is null, return an empty stream. This behavior is\n      // intentional as we're now providing the `RenderResult.EMPTY` value.\n      return []\n    }\n\n    if (typeof this.response === 'string') {\n      return [streamFromString(this.response)]\n    } else if (Array.isArray(this.response)) {\n      return this.response\n    } else if (Buffer.isBuffer(this.response)) {\n      return [streamFromBuffer(this.response)]\n    } else {\n      return [this.response]\n    }\n  }\n\n  /**\n   * Unshifts a new stream to the response. This will convert the response to an\n   * array of streams if it is not already one and will add the new stream to\n   * the start of the array. When this response is piped, all of the streams\n   * will be piped one after the other.\n   *\n   * @param readable The new stream to unshift\n   */\n  public unshift(readable: ReadableStream<Uint8Array>): void {\n    // Coerce the response to an array of streams.\n    this.response = this.coerce()\n\n    // Add the new stream to the start of the array.\n    this.response.unshift(readable)\n  }\n\n  /**\n   * Chains a new stream to the response. This will convert the response to an\n   * array of streams if it is not already one and will add the new stream to\n   * the end. When this response is piped, all of the streams will be piped\n   * one after the other.\n   *\n   * @param readable The new stream to chain\n   */\n  public push(readable: ReadableStream<Uint8Array>): void {\n    // Coerce the response to an array of streams.\n    this.response = this.coerce()\n\n    // Add the new stream to the end of the array.\n    this.response.push(readable)\n  }\n\n  /**\n   * Pipes the response to a writable stream. This will close/cancel the\n   * writable stream if an error is encountered. If this doesn't throw, then\n   * the writable stream will be closed or aborted.\n   *\n   * @param writable Writable stream to pipe the response to\n   */\n  public async pipeTo(writable: WritableStream<Uint8Array>): Promise<void> {\n    try {\n      await this.readable.pipeTo(writable, {\n        // We want to close the writable stream ourselves so that we can wait\n        // for the waitUntil promise to resolve before closing it. If an error\n        // is encountered, we'll abort the writable stream if we swallowed the\n        // error.\n        preventClose: true,\n      })\n\n      // If there is a waitUntil promise, wait for it to resolve before\n      // closing the writable stream.\n      if (this.waitUntil) await this.waitUntil\n\n      // Close the writable stream.\n      await writable.close()\n    } catch (err) {\n      // If this is an abort error, we should abort the writable stream (as we\n      // took ownership of it when we started piping). We don't need to re-throw\n      // because we handled the error.\n      if (isAbortError(err)) {\n        // Abort the writable stream if an error is encountered.\n        await writable.abort(err)\n\n        return\n      }\n\n      // We're not aborting the writer here as when this method throws it's not\n      // clear as to how so the caller should assume it's their responsibility\n      // to clean up the writer.\n      throw err\n    }\n  }\n\n  /**\n   * Pipes the response to a node response. This will close/cancel the node\n   * response if an error is encountered.\n   *\n   * @param res\n   */\n  public async pipeToNodeResponse(res: ServerResponse) {\n    await pipeToNodeResponse(this.readable, res, this.waitUntil)\n  }\n}\n","export const enum RouteKind {\n  /**\n   * `PAGES` represents all the React pages that are under `pages/`.\n   */\n  PAGES = 'PAGES',\n  /**\n   * `PAGES_API` represents all the API routes under `pages/api/`.\n   */\n  PAGES_API = 'PAGES_API',\n  /**\n   * `APP_PAGE` represents all the React pages that are under `app/` with the\n   * filename of `page.{j,t}s{,x}`.\n   */\n  APP_PAGE = 'APP_PAGE',\n  /**\n   * `APP_ROUTE` represents all the API routes and metadata routes that are under `app/` with the\n   * filename of `route.{j,t}s{,x}`.\n   */\n  APP_ROUTE = 'APP_ROUTE',\n\n  /**\n   * `IMAGE` represents all the images that are generated by `next/image`.\n   */\n  IMAGE = 'IMAGE',\n}\n","import {\n  CachedRouteKind,\n  IncrementalCacheKind,\n  type CachedAppPageValue,\n  type CachedPageValue,\n  type IncrementalResponseCacheEntry,\n  type ResponseCacheEntry,\n} from './types'\n\nimport RenderResult from '../render-result'\nimport { RouteKind } from '../route-kind'\nimport { HTML_CONTENT_TYPE_HEADER } from '../../lib/constants'\n\nexport async function fromResponseCacheEntry(\n  cacheEntry: ResponseCacheEntry\n): Promise<IncrementalResponseCacheEntry> {\n  return {\n    ...cacheEntry,\n    value:\n      cacheEntry.value?.kind === CachedRouteKind.PAGES\n        ? {\n            kind: CachedRouteKind.PAGES,\n            html: await cacheEntry.value.html.toUnchunkedString(true),\n            pageData: cacheEntry.value.pageData,\n            headers: cacheEntry.value.headers,\n            status: cacheEntry.value.status,\n          }\n        : cacheEntry.value?.kind === CachedRouteKind.APP_PAGE\n          ? {\n              kind: CachedRouteKind.APP_PAGE,\n              html: await cacheEntry.value.html.toUnchunkedString(true),\n              postponed: cacheEntry.value.postponed,\n              rscData: cacheEntry.value.rscData,\n              headers: cacheEntry.value.headers,\n              status: cacheEntry.value.status,\n              segmentData: cacheEntry.value.segmentData,\n            }\n          : cacheEntry.value,\n  }\n}\n\nexport async function toResponseCacheEntry(\n  response: IncrementalResponseCacheEntry | null\n): Promise<ResponseCacheEntry | null> {\n  if (!response) return null\n\n  return {\n    isMiss: response.isMiss,\n    isStale: response.isStale,\n    cacheControl: response.cacheControl,\n    value:\n      response.value?.kind === CachedRouteKind.PAGES\n        ? ({\n            kind: CachedRouteKind.PAGES,\n            html: RenderResult.fromStatic(\n              response.value.html,\n              HTML_CONTENT_TYPE_HEADER\n            ),\n            pageData: response.value.pageData,\n            headers: response.value.headers,\n            status: response.value.status,\n          } satisfies CachedPageValue)\n        : response.value?.kind === CachedRouteKind.APP_PAGE\n          ? ({\n              kind: CachedRouteKind.APP_PAGE,\n              html: RenderResult.fromStatic(\n                response.value.html,\n                HTML_CONTENT_TYPE_HEADER\n              ),\n              rscData: response.value.rscData,\n              headers: response.value.headers,\n              status: response.value.status,\n              postponed: response.value.postponed,\n              segmentData: response.value.segmentData,\n            } satisfies CachedAppPageValue)\n          : response.value,\n  }\n}\n\nexport function routeKindToIncrementalCacheKind(\n  routeKind: RouteKind\n): Exclude<IncrementalCacheKind, IncrementalCacheKind.FETCH> {\n  switch (routeKind) {\n    case RouteKind.PAGES:\n      return IncrementalCacheKind.PAGES\n    case RouteKind.APP_PAGE:\n      return IncrementalCacheKind.APP_PAGE\n    case RouteKind.IMAGE:\n      return IncrementalCacheKind.IMAGE\n    case RouteKind.APP_ROUTE:\n      return IncrementalCacheKind.APP_ROUTE\n    case RouteKind.PAGES_API:\n      // Pages Router API routes are not cached in the incremental cache.\n      throw new Error(`Unexpected route kind ${routeKind}`)\n    default:\n      return routeKind satisfies never\n  }\n}\n","import type {\n  ResponseCacheEntry,\n  ResponseGenerator,\n  ResponseCacheBase,\n  IncrementalResponseCacheEntry,\n  IncrementalResponseCache,\n} from './types'\n\nimport { Batcher } from '../../lib/batcher'\nimport { scheduleOnNextTick } from '../../lib/scheduler'\nimport {\n  fromResponseCacheEntry,\n  routeKindToIncrementalCacheKind,\n  toResponseCacheEntry,\n} from './utils'\nimport type { RouteKind } from '../route-kind'\n\nexport * from './types'\n\nexport default class ResponseCache implements ResponseCacheBase {\n  private readonly batcher = Batcher.create<\n    { key: string; isOnDemandRevalidate: boolean },\n    IncrementalResponseCacheEntry | null,\n    string\n  >({\n    // Ensure on-demand revalidate doesn't block normal requests, it should be\n    // safe to run an on-demand revalidate for the same key as a normal request.\n    cacheKeyFn: ({ key, isOnDemandRevalidate }) =>\n      `${key}-${isOnDemandRevalidate ? '1' : '0'}`,\n    // We wait to do any async work until after we've added our promise to\n    // `pendingResponses` to ensure that any any other calls will reuse the\n    // same promise until we've fully finished our work.\n    schedulerFn: scheduleOnNextTick,\n  })\n\n  private previousCacheItem?: {\n    key: string\n    entry: IncrementalResponseCacheEntry | null\n    expiresAt: number\n  }\n\n  // we don't use minimal_mode name here as this.minimal_mode is\n  // statically replace for server runtimes but we need it to\n  // be dynamic here\n  private minimal_mode?: boolean\n\n  constructor(minimal_mode: boolean) {\n    this.minimal_mode = minimal_mode\n  }\n\n  public async get(\n    key: string | null,\n    responseGenerator: ResponseGenerator,\n    context: {\n      routeKind: RouteKind\n      isOnDemandRevalidate?: boolean\n      isPrefetch?: boolean\n      incrementalCache: IncrementalResponseCache\n      isRoutePPREnabled?: boolean\n      isFallback?: boolean\n      waitUntil?: (prom: Promise<any>) => void\n    }\n  ): Promise<ResponseCacheEntry | null> {\n    // If there is no key for the cache, we can't possibly look this up in the\n    // cache so just return the result of the response generator.\n    if (!key) {\n      return responseGenerator({ hasResolved: false, previousCacheEntry: null })\n    }\n\n    const {\n      incrementalCache,\n      isOnDemandRevalidate = false,\n      isFallback = false,\n      isRoutePPREnabled = false,\n      waitUntil,\n    } = context\n\n    const response = await this.batcher.batch(\n      { key, isOnDemandRevalidate },\n      (cacheKey, resolve) => {\n        const prom = (async () => {\n          // We keep the previous cache entry around to leverage when the\n          // incremental cache is disabled in minimal mode.\n          if (\n            this.minimal_mode &&\n            this.previousCacheItem?.key === cacheKey &&\n            this.previousCacheItem.expiresAt > Date.now()\n          ) {\n            return this.previousCacheItem.entry\n          }\n\n          // Coerce the kindHint into a given kind for the incremental cache.\n          const kind = routeKindToIncrementalCacheKind(context.routeKind)\n\n          let resolved = false\n          let cachedResponse: IncrementalResponseCacheEntry | null = null\n          try {\n            cachedResponse = !this.minimal_mode\n              ? await incrementalCache.get(key, {\n                  kind,\n                  isRoutePPREnabled: context.isRoutePPREnabled,\n                  isFallback,\n                })\n              : null\n\n            if (cachedResponse && !isOnDemandRevalidate) {\n              resolve(cachedResponse)\n              resolved = true\n\n              if (!cachedResponse.isStale || context.isPrefetch) {\n                // The cached value is still valid, so we don't need\n                // to update it yet.\n                return null\n              }\n            }\n\n            const cacheEntry = await responseGenerator({\n              hasResolved: resolved,\n              previousCacheEntry: cachedResponse,\n              isRevalidating: true,\n            })\n\n            // If the cache entry couldn't be generated, we don't want to cache\n            // the result.\n            if (!cacheEntry) {\n              // Unset the previous cache item if it was set.\n              if (this.minimal_mode) this.previousCacheItem = undefined\n              return null\n            }\n\n            const resolveValue = await fromResponseCacheEntry({\n              ...cacheEntry,\n              isMiss: !cachedResponse,\n            })\n            if (!resolveValue) {\n              // Unset the previous cache item if it was set.\n              if (this.minimal_mode) this.previousCacheItem = undefined\n              return null\n            }\n\n            // For on-demand revalidate wait to resolve until cache is set.\n            // Otherwise resolve now.\n            if (!isOnDemandRevalidate && !resolved) {\n              resolve(resolveValue)\n              resolved = true\n            }\n\n            // We want to persist the result only if it has a cache control value\n            // defined.\n            if (resolveValue.cacheControl) {\n              if (this.minimal_mode) {\n                this.previousCacheItem = {\n                  key: cacheKey,\n                  entry: resolveValue,\n                  expiresAt: Date.now() + 1000,\n                }\n              } else {\n                await incrementalCache.set(key, resolveValue.value, {\n                  cacheControl: resolveValue.cacheControl,\n                  isRoutePPREnabled,\n                  isFallback,\n                })\n              }\n            }\n\n            return resolveValue\n          } catch (err) {\n            // When a path is erroring we automatically re-set the existing cache\n            // with new revalidate and expire times to prevent non-stop retrying.\n            if (cachedResponse?.cacheControl) {\n              const newRevalidate = Math.min(\n                Math.max(cachedResponse.cacheControl.revalidate || 3, 3),\n                30\n              )\n\n              const newExpire =\n                cachedResponse.cacheControl.expire === undefined\n                  ? undefined\n                  : Math.max(\n                      newRevalidate + 3,\n                      cachedResponse.cacheControl.expire\n                    )\n\n              await incrementalCache.set(key, cachedResponse.value, {\n                cacheControl: { revalidate: newRevalidate, expire: newExpire },\n                isRoutePPREnabled,\n                isFallback,\n              })\n            }\n\n            // While revalidating in the background we can't reject as we already\n            // resolved the cache entry so log the error here.\n            if (resolved) {\n              console.error(err)\n              return null\n            }\n\n            // We haven't resolved yet, so let's throw to indicate an error.\n            throw err\n          }\n        })()\n\n        // we need to ensure background revalidates are\n        // passed to waitUntil\n        if (waitUntil) {\n          waitUntil(prom)\n        }\n        return prom\n      }\n    )\n\n    return toResponseCacheEntry(response)\n  }\n}\n","import type {\n  WorkAsyncStorage,\n  WorkStore,\n} from '../app-render/work-async-storage.external'\n\nimport { AppRenderSpan, NextNodeServerSpan } from './trace/constants'\nimport { getTracer, SpanKind } from './trace/tracer'\nimport {\n  CACHE_ONE_YEAR,\n  INFINITE_CACHE,\n  NEXT_CACHE_TAG_MAX_ITEMS,\n  NEXT_CACHE_TAG_MAX_LENGTH,\n} from '../../lib/constants'\nimport { markCurrentScopeAsDynamic } from '../app-render/dynamic-rendering'\nimport { makeHangingPromise } from '../dynamic-rendering-utils'\nimport type { FetchMetric } from '../base-http'\nimport { createDedupeFetch } from './dedupe-fetch'\nimport {\n  getCacheSignal,\n  type RevalidateStore,\n  type WorkUnitAsyncStorage,\n} from '../app-render/work-unit-async-storage.external'\nimport {\n  CachedRouteKind,\n  IncrementalCacheKind,\n  type CachedFetchData,\n  type ServerComponentsHmrCache,\n  type SetIncrementalFetchCacheContext,\n} from '../response-cache'\nimport { waitAtLeastOneReactRenderTask } from '../../lib/scheduler'\nimport { cloneResponse } from './clone-response'\nimport type { IncrementalCache } from './incremental-cache'\n\nconst isEdgeRuntime = process.env.NEXT_RUNTIME === 'edge'\n\ntype Fetcher = typeof fetch\n\ntype PatchedFetcher = Fetcher & {\n  readonly __nextPatched: true\n  readonly __nextGetStaticStore: () => WorkAsyncStorage\n  readonly _nextOriginalFetch: Fetcher\n}\n\nexport const NEXT_PATCH_SYMBOL = Symbol.for('next-patch')\n\nfunction isFetchPatched() {\n  return (globalThis as Record<symbol, unknown>)[NEXT_PATCH_SYMBOL] === true\n}\n\nexport function validateRevalidate(\n  revalidateVal: unknown,\n  route: string\n): undefined | number {\n  try {\n    let normalizedRevalidate: number | undefined = undefined\n\n    if (revalidateVal === false) {\n      normalizedRevalidate = INFINITE_CACHE\n    } else if (\n      typeof revalidateVal === 'number' &&\n      !isNaN(revalidateVal) &&\n      revalidateVal > -1\n    ) {\n      normalizedRevalidate = revalidateVal\n    } else if (typeof revalidateVal !== 'undefined') {\n      throw new Error(\n        `Invalid revalidate value \"${revalidateVal}\" on \"${route}\", must be a non-negative number or false`\n      )\n    }\n    return normalizedRevalidate\n  } catch (err: any) {\n    // handle client component error from attempting to check revalidate value\n    if (err instanceof Error && err.message.includes('Invalid revalidate')) {\n      throw err\n    }\n    return undefined\n  }\n}\n\nexport function validateTags(tags: any[], description: string) {\n  const validTags: string[] = []\n  const invalidTags: Array<{\n    tag: any\n    reason: string\n  }> = []\n\n  for (let i = 0; i < tags.length; i++) {\n    const tag = tags[i]\n\n    if (typeof tag !== 'string') {\n      invalidTags.push({ tag, reason: 'invalid type, must be a string' })\n    } else if (tag.length > NEXT_CACHE_TAG_MAX_LENGTH) {\n      invalidTags.push({\n        tag,\n        reason: `exceeded max length of ${NEXT_CACHE_TAG_MAX_LENGTH}`,\n      })\n    } else {\n      validTags.push(tag)\n    }\n\n    if (validTags.length > NEXT_CACHE_TAG_MAX_ITEMS) {\n      console.warn(\n        `Warning: exceeded max tag count for ${description}, dropped tags:`,\n        tags.slice(i).join(', ')\n      )\n      break\n    }\n  }\n\n  if (invalidTags.length > 0) {\n    console.warn(`Warning: invalid tags passed to ${description}: `)\n\n    for (const { tag, reason } of invalidTags) {\n      console.log(`tag: \"${tag}\" ${reason}`)\n    }\n  }\n  return validTags\n}\n\nfunction trackFetchMetric(\n  workStore: WorkStore,\n  ctx: Omit<FetchMetric, 'end' | 'idx'>\n) {\n  if (!workStore.shouldTrackFetchMetrics) {\n    return\n  }\n\n  workStore.fetchMetrics ??= []\n\n  workStore.fetchMetrics.push({\n    ...ctx,\n    end: performance.timeOrigin + performance.now(),\n    idx: workStore.nextFetchId || 0,\n  })\n}\n\nasync function createCachedPrerenderResponse(\n  res: Response,\n  cacheKey: string,\n  incrementalCacheContext: SetIncrementalFetchCacheContext | undefined,\n  incrementalCache: IncrementalCache,\n  revalidate: number,\n  handleUnlock: () => Promise<void> | void\n): Promise<Response> {\n  // We are prerendering at build time or revalidate time with cacheComponents so we\n  // need to buffer the response so we can guarantee it can be read in a\n  // microtask.\n  const bodyBuffer = await res.arrayBuffer()\n\n  const fetchedData = {\n    headers: Object.fromEntries(res.headers.entries()),\n    body: Buffer.from(bodyBuffer).toString('base64'),\n    status: res.status,\n    url: res.url,\n  }\n\n  // We can skip setting the serverComponentsHmrCache because we aren't in dev\n  // mode.\n\n  if (incrementalCacheContext) {\n    await incrementalCache.set(\n      cacheKey,\n      { kind: CachedRouteKind.FETCH, data: fetchedData, revalidate },\n      incrementalCacheContext\n    )\n  }\n\n  await handleUnlock()\n\n  // We return a new Response to the caller.\n  return new Response(bodyBuffer, {\n    headers: res.headers,\n    status: res.status,\n    statusText: res.statusText,\n  })\n}\n\nasync function createCachedDynamicResponse(\n  workStore: WorkStore,\n  res: Response,\n  cacheKey: string,\n  incrementalCacheContext: SetIncrementalFetchCacheContext | undefined,\n  incrementalCache: IncrementalCache,\n  serverComponentsHmrCache: ServerComponentsHmrCache | undefined,\n  revalidate: number,\n  input: RequestInfo | URL,\n  handleUnlock: () => Promise<void> | void\n): Promise<Response> {\n  // We're cloning the response using this utility because there exists a bug in\n  // the undici library around response cloning. See the following pull request\n  // for more details: https://github.com/vercel/next.js/pull/73274\n  const [cloned1, cloned2] = cloneResponse(res)\n\n  // We are dynamically rendering including dev mode. We want to return the\n  // response to the caller as soon as possible because it might stream over a\n  // very long time.\n  const cacheSetPromise = cloned1\n    .arrayBuffer()\n    .then(async (arrayBuffer) => {\n      const bodyBuffer = Buffer.from(arrayBuffer)\n\n      const fetchedData = {\n        headers: Object.fromEntries(cloned1.headers.entries()),\n        body: bodyBuffer.toString('base64'),\n        status: cloned1.status,\n        url: cloned1.url,\n      }\n\n      serverComponentsHmrCache?.set(cacheKey, fetchedData)\n\n      if (incrementalCacheContext) {\n        await incrementalCache.set(\n          cacheKey,\n          { kind: CachedRouteKind.FETCH, data: fetchedData, revalidate },\n          incrementalCacheContext\n        )\n      }\n    })\n    .catch((error) => console.warn(`Failed to set fetch cache`, input, error))\n    .finally(handleUnlock)\n\n  const pendingRevalidateKey = `cache-set-${cacheKey}`\n  workStore.pendingRevalidates ??= {}\n\n  if (pendingRevalidateKey in workStore.pendingRevalidates) {\n    // there is already a pending revalidate entry that we need to await to\n    // avoid race conditions\n    await workStore.pendingRevalidates[pendingRevalidateKey]\n  }\n\n  workStore.pendingRevalidates[pendingRevalidateKey] = cacheSetPromise.finally(\n    () => {\n      // If the pending revalidate is not present in the store, then we have\n      // nothing to delete.\n      if (!workStore.pendingRevalidates?.[pendingRevalidateKey]) {\n        return\n      }\n\n      delete workStore.pendingRevalidates[pendingRevalidateKey]\n    }\n  )\n\n  return cloned2\n}\n\ninterface PatchableModule {\n  workAsyncStorage: WorkAsyncStorage\n  workUnitAsyncStorage: WorkUnitAsyncStorage\n}\n\nexport function createPatchedFetcher(\n  originFetch: Fetcher,\n  { workAsyncStorage, workUnitAsyncStorage }: PatchableModule\n): PatchedFetcher {\n  // Create the patched fetch function.\n  const patched = async function fetch(\n    input: RequestInfo | URL,\n    init: RequestInit | undefined\n  ): Promise<Response> {\n    let url: URL | undefined\n    try {\n      url = new URL(input instanceof Request ? input.url : input)\n      url.username = ''\n      url.password = ''\n    } catch {\n      // Error caused by malformed URL should be handled by native fetch\n      url = undefined\n    }\n    const fetchUrl = url?.href ?? ''\n    const method = init?.method?.toUpperCase() || 'GET'\n\n    // Do create a new span trace for internal fetches in the\n    // non-verbose mode.\n    const isInternal = (init?.next as any)?.internal === true\n    const hideSpan = process.env.NEXT_OTEL_FETCH_DISABLED === '1'\n    // We don't track fetch metrics for internal fetches\n    // so it's not critical that we have a start time, as it won't be recorded.\n    // This is to workaround a flaky issue where performance APIs might\n    // not be available and will require follow-up investigation.\n    const fetchStart: number | undefined = isInternal\n      ? undefined\n      : performance.timeOrigin + performance.now()\n\n    const workStore = workAsyncStorage.getStore()\n    const workUnitStore = workUnitAsyncStorage.getStore()\n\n    // During static generation we track cache reads so we can reason about when they fill\n    let cacheSignal = workUnitStore ? getCacheSignal(workUnitStore) : null\n    if (cacheSignal) {\n      cacheSignal.beginRead()\n    }\n\n    const result = getTracer().trace(\n      isInternal ? NextNodeServerSpan.internalFetch : AppRenderSpan.fetch,\n      {\n        hideSpan,\n        kind: SpanKind.CLIENT,\n        spanName: ['fetch', method, fetchUrl].filter(Boolean).join(' '),\n        attributes: {\n          'http.url': fetchUrl,\n          'http.method': method,\n          'net.peer.name': url?.hostname,\n          'net.peer.port': url?.port || undefined,\n        },\n      },\n      async () => {\n        // If this is an internal fetch, we should not do any special treatment.\n        if (isInternal) {\n          return originFetch(input, init)\n        }\n\n        // If the workStore is not available, we can't do any\n        // special treatment of fetch, therefore fallback to the original\n        // fetch implementation.\n        if (!workStore) {\n          return originFetch(input, init)\n        }\n\n        // We should also fallback to the original fetch implementation if we\n        // are in draft mode, it does not constitute a static generation.\n        if (workStore.isDraftMode) {\n          return originFetch(input, init)\n        }\n\n        const isRequestInput =\n          input &&\n          typeof input === 'object' &&\n          typeof (input as Request).method === 'string'\n\n        const getRequestMeta = (field: string) => {\n          // If request input is present but init is not, retrieve from input first.\n          const value = (init as any)?.[field]\n          return value || (isRequestInput ? (input as any)[field] : null)\n        }\n\n        let finalRevalidate: number | undefined = undefined\n        const getNextField = (field: 'revalidate' | 'tags') => {\n          return typeof init?.next?.[field] !== 'undefined'\n            ? init?.next?.[field]\n            : isRequestInput\n              ? (input as any).next?.[field]\n              : undefined\n        }\n        // RequestInit doesn't keep extra fields e.g. next so it's\n        // only available if init is used separate\n        const originalFetchRevalidate = getNextField('revalidate')\n        let currentFetchRevalidate = originalFetchRevalidate\n        const tags: string[] = validateTags(\n          getNextField('tags') || [],\n          `fetch ${input.toString()}`\n        )\n\n        let revalidateStore: RevalidateStore | undefined\n\n        if (workUnitStore) {\n          switch (workUnitStore.type) {\n            case 'prerender':\n            case 'prerender-runtime':\n            // TODO: Stop accumulating tags in client prerender. (fallthrough)\n            case 'prerender-client':\n            case 'prerender-ppr':\n            case 'prerender-legacy':\n            case 'cache':\n            case 'private-cache':\n              revalidateStore = workUnitStore\n              break\n            case 'request':\n            case 'unstable-cache':\n              break\n            default:\n              workUnitStore satisfies never\n          }\n        }\n\n        if (revalidateStore) {\n          if (Array.isArray(tags)) {\n            // Collect tags onto parent caches or parent prerenders.\n            const collectedTags =\n              revalidateStore.tags ?? (revalidateStore.tags = [])\n            for (const tag of tags) {\n              if (!collectedTags.includes(tag)) {\n                collectedTags.push(tag)\n              }\n            }\n          }\n        }\n\n        const implicitTags = workUnitStore?.implicitTags\n\n        let pageFetchCacheMode = workStore.fetchCache\n\n        if (workUnitStore) {\n          switch (workUnitStore.type) {\n            case 'unstable-cache':\n              // Inside unstable-cache we treat it the same as force-no-store on\n              // the page.\n              pageFetchCacheMode = 'force-no-store'\n              break\n            case 'prerender':\n            case 'prerender-client':\n            case 'prerender-runtime':\n            case 'prerender-ppr':\n            case 'prerender-legacy':\n            case 'request':\n            case 'cache':\n            case 'private-cache':\n              break\n            default:\n              workUnitStore satisfies never\n          }\n        }\n\n        const isUsingNoStore = !!workStore.isUnstableNoStore\n\n        let currentFetchCacheConfig = getRequestMeta('cache')\n        let cacheReason = ''\n        let cacheWarning: string | undefined\n\n        if (\n          typeof currentFetchCacheConfig === 'string' &&\n          typeof currentFetchRevalidate !== 'undefined'\n        ) {\n          // If the revalidate value conflicts with the cache value, we should warn the user and unset the conflicting values.\n          const isConflictingRevalidate =\n            // revalidate: 0 and cache: force-cache\n            (currentFetchCacheConfig === 'force-cache' &&\n              currentFetchRevalidate === 0) ||\n            // revalidate: >0 or revalidate: false and cache: no-store\n            (currentFetchCacheConfig === 'no-store' &&\n              (currentFetchRevalidate > 0 || currentFetchRevalidate === false))\n\n          if (isConflictingRevalidate) {\n            cacheWarning = `Specified \"cache: ${currentFetchCacheConfig}\" and \"revalidate: ${currentFetchRevalidate}\", only one should be specified.`\n            currentFetchCacheConfig = undefined\n            currentFetchRevalidate = undefined\n          }\n        }\n\n        const hasExplicitFetchCacheOptOut =\n          // fetch config itself signals not to cache\n          currentFetchCacheConfig === 'no-cache' ||\n          currentFetchCacheConfig === 'no-store' ||\n          // the fetch isn't explicitly caching and the segment level cache config signals not to cache\n          // note: `pageFetchCacheMode` is also set by being in an unstable_cache context.\n          pageFetchCacheMode === 'force-no-store' ||\n          pageFetchCacheMode === 'only-no-store'\n\n        // If no explicit fetch cache mode is set, but dynamic = `force-dynamic` is set,\n        // we shouldn't consider caching the fetch. This is because the `dynamic` cache\n        // is considered a \"top-level\" cache mode, whereas something like `fetchCache` is more\n        // fine-grained. Top-level modes are responsible for setting reasonable defaults for the\n        // other configurations.\n        const noFetchConfigAndForceDynamic =\n          !pageFetchCacheMode &&\n          !currentFetchCacheConfig &&\n          !currentFetchRevalidate &&\n          workStore.forceDynamic\n\n        if (\n          // force-cache was specified without a revalidate value. We set the revalidate value to false\n          // which will signal the cache to not revalidate\n          currentFetchCacheConfig === 'force-cache' &&\n          typeof currentFetchRevalidate === 'undefined'\n        ) {\n          currentFetchRevalidate = false\n        } else if (\n          hasExplicitFetchCacheOptOut ||\n          noFetchConfigAndForceDynamic\n        ) {\n          currentFetchRevalidate = 0\n        }\n\n        if (\n          currentFetchCacheConfig === 'no-cache' ||\n          currentFetchCacheConfig === 'no-store'\n        ) {\n          cacheReason = `cache: ${currentFetchCacheConfig}`\n        }\n\n        finalRevalidate = validateRevalidate(\n          currentFetchRevalidate,\n          workStore.route\n        )\n\n        const _headers = getRequestMeta('headers')\n        const initHeaders: Headers =\n          typeof _headers?.get === 'function'\n            ? _headers\n            : new Headers(_headers || {})\n\n        const hasUnCacheableHeader =\n          initHeaders.get('authorization') || initHeaders.get('cookie')\n\n        const isUnCacheableMethod = !['get', 'head'].includes(\n          getRequestMeta('method')?.toLowerCase() || 'get'\n        )\n\n        /**\n         * We automatically disable fetch caching under the following conditions:\n         * - Fetch cache configs are not set. Specifically:\n         *    - A page fetch cache mode is not set (export const fetchCache=...)\n         *    - A fetch cache mode is not set in the fetch call (fetch(url, { cache: ... }))\n         *      or the fetch cache mode is set to 'default'\n         *    - A fetch revalidate value is not set in the fetch call (fetch(url, { revalidate: ... }))\n         * - OR the fetch comes after a configuration that triggered dynamic rendering (e.g., reading cookies())\n         *   and the fetch was considered uncacheable (e.g., POST method or has authorization headers)\n         */\n        const hasNoExplicitCacheConfig =\n          // eslint-disable-next-line eqeqeq\n          pageFetchCacheMode == undefined &&\n          // eslint-disable-next-line eqeqeq\n          (currentFetchCacheConfig == undefined ||\n            // when considering whether to opt into the default \"no-cache\" fetch semantics,\n            // a \"default\" cache config should be treated the same as no cache config\n            currentFetchCacheConfig === 'default') &&\n          // eslint-disable-next-line eqeqeq\n          currentFetchRevalidate == undefined\n\n        let autoNoCache = Boolean(\n          (hasUnCacheableHeader || isUnCacheableMethod) &&\n            revalidateStore?.revalidate === 0\n        )\n\n        let isImplicitBuildTimeCache = false\n\n        if (!autoNoCache && hasNoExplicitCacheConfig) {\n          // We don't enable automatic no-cache behavior during build-time\n          // prerendering so that we can still leverage the fetch cache between\n          // export workers.\n          if (workStore.isBuildTimePrerendering) {\n            isImplicitBuildTimeCache = true\n          } else {\n            autoNoCache = true\n          }\n        }\n\n        // If we have no cache config, and we're in Dynamic I/O prerendering,\n        // it'll be a dynamic call. We don't have to issue that dynamic call.\n        if (hasNoExplicitCacheConfig && workUnitStore !== undefined) {\n          switch (workUnitStore.type) {\n            case 'prerender':\n            case 'prerender-runtime':\n            // While we don't want to do caching in the client scope we know the\n            // fetch will be dynamic for cacheComponents so we may as well avoid the\n            // call here. (fallthrough)\n            case 'prerender-client':\n              if (cacheSignal) {\n                cacheSignal.endRead()\n                cacheSignal = null\n              }\n\n              return makeHangingPromise<Response>(\n                workUnitStore.renderSignal,\n                workStore.route,\n                'fetch()'\n              )\n            case 'prerender-ppr':\n            case 'prerender-legacy':\n            case 'request':\n            case 'cache':\n            case 'private-cache':\n            case 'unstable-cache':\n              break\n            default:\n              workUnitStore satisfies never\n          }\n        }\n\n        switch (pageFetchCacheMode) {\n          case 'force-no-store': {\n            cacheReason = 'fetchCache = force-no-store'\n            break\n          }\n          case 'only-no-store': {\n            if (\n              currentFetchCacheConfig === 'force-cache' ||\n              (typeof finalRevalidate !== 'undefined' && finalRevalidate > 0)\n            ) {\n              throw new Error(\n                `cache: 'force-cache' used on fetch for ${fetchUrl} with 'export const fetchCache = 'only-no-store'`\n              )\n            }\n            cacheReason = 'fetchCache = only-no-store'\n            break\n          }\n          case 'only-cache': {\n            if (currentFetchCacheConfig === 'no-store') {\n              throw new Error(\n                `cache: 'no-store' used on fetch for ${fetchUrl} with 'export const fetchCache = 'only-cache'`\n              )\n            }\n            break\n          }\n          case 'force-cache': {\n            if (\n              typeof currentFetchRevalidate === 'undefined' ||\n              currentFetchRevalidate === 0\n            ) {\n              cacheReason = 'fetchCache = force-cache'\n              finalRevalidate = INFINITE_CACHE\n            }\n            break\n          }\n          case 'default-cache':\n          case 'default-no-store':\n          case 'auto':\n          case undefined:\n            // sometimes we won't match the above cases. the reason we don't move\n            // everything to this switch is the use of autoNoCache which is not a fetchCacheMode\n            // I suspect this could be unified with fetchCacheMode however in which case we could\n            // simplify the switch case and ensure we have an exhaustive switch handling all modes\n            break\n          default:\n            pageFetchCacheMode satisfies never\n        }\n\n        if (typeof finalRevalidate === 'undefined') {\n          if (pageFetchCacheMode === 'default-cache' && !isUsingNoStore) {\n            finalRevalidate = INFINITE_CACHE\n            cacheReason = 'fetchCache = default-cache'\n          } else if (pageFetchCacheMode === 'default-no-store') {\n            finalRevalidate = 0\n            cacheReason = 'fetchCache = default-no-store'\n          } else if (isUsingNoStore) {\n            finalRevalidate = 0\n            cacheReason = 'noStore call'\n          } else if (autoNoCache) {\n            finalRevalidate = 0\n            cacheReason = 'auto no cache'\n          } else {\n            // TODO: should we consider this case an invariant?\n            cacheReason = 'auto cache'\n            finalRevalidate = revalidateStore\n              ? revalidateStore.revalidate\n              : INFINITE_CACHE\n          }\n        } else if (!cacheReason) {\n          cacheReason = `revalidate: ${finalRevalidate}`\n        }\n\n        if (\n          // when force static is configured we don't bail from\n          // `revalidate: 0` values\n          !(workStore.forceStatic && finalRevalidate === 0) &&\n          // we don't consider autoNoCache to switch to dynamic for ISR\n          !autoNoCache &&\n          // If the revalidate value isn't currently set or the value is less\n          // than the current revalidate value, we should update the revalidate\n          // value.\n          revalidateStore &&\n          finalRevalidate < revalidateStore.revalidate\n        ) {\n          // If we were setting the revalidate value to 0, we should try to\n          // postpone instead first.\n          if (finalRevalidate === 0) {\n            if (workUnitStore) {\n              switch (workUnitStore.type) {\n                case 'prerender':\n                case 'prerender-client':\n                case 'prerender-runtime':\n                  if (cacheSignal) {\n                    cacheSignal.endRead()\n                    cacheSignal = null\n                  }\n                  return makeHangingPromise<Response>(\n                    workUnitStore.renderSignal,\n                    workStore.route,\n                    'fetch()'\n                  )\n                case 'prerender-ppr':\n                case 'prerender-legacy':\n                case 'request':\n                case 'cache':\n                case 'private-cache':\n                case 'unstable-cache':\n                  break\n                default:\n                  workUnitStore satisfies never\n              }\n            }\n\n            markCurrentScopeAsDynamic(\n              workStore,\n              workUnitStore,\n              `revalidate: 0 fetch ${input} ${workStore.route}`\n            )\n          }\n\n          // We only want to set the revalidate store's revalidate time if it\n          // was explicitly set for the fetch call, i.e.\n          // originalFetchRevalidate.\n          if (revalidateStore && originalFetchRevalidate === finalRevalidate) {\n            revalidateStore.revalidate = finalRevalidate\n          }\n        }\n\n        const isCacheableRevalidate =\n          typeof finalRevalidate === 'number' && finalRevalidate > 0\n\n        let cacheKey: string | undefined\n        const { incrementalCache } = workStore\n        let isHmrRefresh = false\n        let serverComponentsHmrCache: ServerComponentsHmrCache | undefined\n\n        if (workUnitStore) {\n          switch (workUnitStore.type) {\n            case 'request':\n            case 'cache':\n            case 'private-cache':\n              isHmrRefresh = workUnitStore.isHmrRefresh ?? false\n              serverComponentsHmrCache = workUnitStore.serverComponentsHmrCache\n              break\n            case 'prerender':\n            case 'prerender-client':\n            case 'prerender-runtime':\n            case 'prerender-ppr':\n            case 'prerender-legacy':\n            case 'unstable-cache':\n              break\n            default:\n              workUnitStore satisfies never\n          }\n        }\n\n        if (\n          incrementalCache &&\n          (isCacheableRevalidate || serverComponentsHmrCache)\n        ) {\n          try {\n            cacheKey = await incrementalCache.generateCacheKey(\n              fetchUrl,\n              isRequestInput ? (input as RequestInit) : init\n            )\n          } catch (err) {\n            console.error(`Failed to generate cache key for`, input)\n          }\n        }\n\n        const fetchIdx = workStore.nextFetchId ?? 1\n        workStore.nextFetchId = fetchIdx + 1\n\n        let handleUnlock: () => Promise<void> | void = () => {}\n\n        const doOriginalFetch = async (\n          isStale?: boolean,\n          cacheReasonOverride?: string\n        ) => {\n          const requestInputFields = [\n            'cache',\n            'credentials',\n            'headers',\n            'integrity',\n            'keepalive',\n            'method',\n            'mode',\n            'redirect',\n            'referrer',\n            'referrerPolicy',\n            'window',\n            'duplex',\n\n            // don't pass through signal when revalidating\n            ...(isStale ? [] : ['signal']),\n          ]\n\n          if (isRequestInput) {\n            const reqInput: Request = input as any\n            const reqOptions: RequestInit = {\n              body: (reqInput as any)._ogBody || reqInput.body,\n            }\n\n            for (const field of requestInputFields) {\n              // @ts-expect-error custom fields\n              reqOptions[field] = reqInput[field]\n            }\n            input = new Request(reqInput.url, reqOptions)\n          } else if (init) {\n            const { _ogBody, body, signal, ...otherInput } =\n              init as RequestInit & { _ogBody?: any }\n            init = {\n              ...otherInput,\n              body: _ogBody || body,\n              signal: isStale ? undefined : signal,\n            }\n          }\n\n          // add metadata to init without editing the original\n          const clonedInit = {\n            ...init,\n            next: { ...init?.next, fetchType: 'origin', fetchIdx },\n          }\n\n          return originFetch(input, clonedInit)\n            .then(async (res) => {\n              if (!isStale && fetchStart) {\n                trackFetchMetric(workStore, {\n                  start: fetchStart,\n                  url: fetchUrl,\n                  cacheReason: cacheReasonOverride || cacheReason,\n                  cacheStatus:\n                    finalRevalidate === 0 || cacheReasonOverride\n                      ? 'skip'\n                      : 'miss',\n                  cacheWarning,\n                  status: res.status,\n                  method: clonedInit.method || 'GET',\n                })\n              }\n              if (\n                res.status === 200 &&\n                incrementalCache &&\n                cacheKey &&\n                (isCacheableRevalidate || serverComponentsHmrCache)\n              ) {\n                const normalizedRevalidate =\n                  finalRevalidate >= INFINITE_CACHE\n                    ? CACHE_ONE_YEAR\n                    : finalRevalidate\n\n                const incrementalCacheConfig:\n                  | SetIncrementalFetchCacheContext\n                  | undefined = isCacheableRevalidate\n                  ? {\n                      fetchCache: true,\n                      fetchUrl,\n                      fetchIdx,\n                      tags,\n                      isImplicitBuildTimeCache,\n                    }\n                  : undefined\n\n                switch (workUnitStore?.type) {\n                  case 'prerender':\n                  case 'prerender-client':\n                  case 'prerender-runtime':\n                    return createCachedPrerenderResponse(\n                      res,\n                      cacheKey,\n                      incrementalCacheConfig,\n                      incrementalCache,\n                      normalizedRevalidate,\n                      handleUnlock\n                    )\n                  case 'prerender-ppr':\n                  case 'prerender-legacy':\n                  case 'request':\n                  case 'cache':\n                  case 'private-cache':\n                  case 'unstable-cache':\n                  case undefined:\n                    return createCachedDynamicResponse(\n                      workStore,\n                      res,\n                      cacheKey,\n                      incrementalCacheConfig,\n                      incrementalCache,\n                      serverComponentsHmrCache,\n                      normalizedRevalidate,\n                      input,\n                      handleUnlock\n                    )\n                  default:\n                    workUnitStore satisfies never\n                }\n              }\n\n              // we had response that we determined shouldn't be cached so we return it\n              // and don't cache it. This also needs to unlock the cache lock we acquired.\n              await handleUnlock()\n\n              return res\n            })\n            .catch((error) => {\n              handleUnlock()\n              throw error\n            })\n        }\n\n        let cacheReasonOverride\n        let isForegroundRevalidate = false\n        let isHmrRefreshCache = false\n\n        if (cacheKey && incrementalCache) {\n          let cachedFetchData: CachedFetchData | undefined\n\n          if (isHmrRefresh && serverComponentsHmrCache) {\n            cachedFetchData = serverComponentsHmrCache.get(cacheKey)\n            isHmrRefreshCache = true\n          }\n\n          if (isCacheableRevalidate && !cachedFetchData) {\n            handleUnlock = await incrementalCache.lock(cacheKey)\n            const entry = workStore.isOnDemandRevalidate\n              ? null\n              : await incrementalCache.get(cacheKey, {\n                  kind: IncrementalCacheKind.FETCH,\n                  revalidate: finalRevalidate,\n                  fetchUrl,\n                  fetchIdx,\n                  tags,\n                  softTags: implicitTags?.tags,\n                })\n\n            if (hasNoExplicitCacheConfig && workUnitStore) {\n              switch (workUnitStore.type) {\n                case 'prerender':\n                case 'prerender-client':\n                case 'prerender-runtime':\n                  // We sometimes use the cache to dedupe fetches that do not\n                  // specify a cache configuration. In these cases we want to\n                  // make sure we still exclude them from prerenders if\n                  // cacheComponents is on so we introduce an artificial task boundary\n                  // here.\n                  await waitAtLeastOneReactRenderTask()\n                  break\n                case 'prerender-ppr':\n                case 'prerender-legacy':\n                case 'request':\n                case 'cache':\n                case 'private-cache':\n                case 'unstable-cache':\n                  break\n                default:\n                  workUnitStore satisfies never\n              }\n            }\n\n            if (entry) {\n              await handleUnlock()\n            } else {\n              // in dev, incremental cache response will be null in case the browser adds `cache-control: no-cache` in the request headers\n              cacheReasonOverride = 'cache-control: no-cache (hard refresh)'\n            }\n\n            if (entry?.value && entry.value.kind === CachedRouteKind.FETCH) {\n              // when stale and is revalidating we wait for fresh data\n              // so the revalidated entry has the updated data\n              if (workStore.isRevalidate && entry.isStale) {\n                isForegroundRevalidate = true\n              } else {\n                if (entry.isStale) {\n                  workStore.pendingRevalidates ??= {}\n                  if (!workStore.pendingRevalidates[cacheKey]) {\n                    const pendingRevalidate = doOriginalFetch(true)\n                      .then(async (response) => ({\n                        body: await response.arrayBuffer(),\n                        headers: response.headers,\n                        status: response.status,\n                        statusText: response.statusText,\n                      }))\n                      .finally(() => {\n                        workStore.pendingRevalidates ??= {}\n                        delete workStore.pendingRevalidates[cacheKey || '']\n                      })\n\n                    // Attach the empty catch here so we don't get a \"unhandled\n                    // promise rejection\" warning.\n                    pendingRevalidate.catch(console.error)\n\n                    workStore.pendingRevalidates[cacheKey] = pendingRevalidate\n                  }\n                }\n\n                cachedFetchData = entry.value.data\n              }\n            }\n          }\n\n          if (cachedFetchData) {\n            if (fetchStart) {\n              trackFetchMetric(workStore, {\n                start: fetchStart,\n                url: fetchUrl,\n                cacheReason,\n                cacheStatus: isHmrRefreshCache ? 'hmr' : 'hit',\n                cacheWarning,\n                status: cachedFetchData.status || 200,\n                method: init?.method || 'GET',\n              })\n            }\n\n            const response = new Response(\n              Buffer.from(cachedFetchData.body, 'base64'),\n              {\n                headers: cachedFetchData.headers,\n                status: cachedFetchData.status,\n              }\n            )\n\n            Object.defineProperty(response, 'url', {\n              value: cachedFetchData.url,\n            })\n\n            return response\n          }\n        }\n\n        if (workStore.isStaticGeneration && init && typeof init === 'object') {\n          const { cache } = init\n\n          // Delete `cache` property as Cloudflare Workers will throw an error\n          if (isEdgeRuntime) delete init.cache\n\n          if (cache === 'no-store') {\n            // If enabled, we should bail out of static generation.\n            if (workUnitStore) {\n              switch (workUnitStore.type) {\n                case 'prerender':\n                case 'prerender-client':\n                case 'prerender-runtime':\n                  if (cacheSignal) {\n                    cacheSignal.endRead()\n                    cacheSignal = null\n                  }\n                  return makeHangingPromise<Response>(\n                    workUnitStore.renderSignal,\n                    workStore.route,\n                    'fetch()'\n                  )\n                case 'prerender-ppr':\n                case 'prerender-legacy':\n                case 'request':\n                case 'cache':\n                case 'private-cache':\n                case 'unstable-cache':\n                  break\n                default:\n                  workUnitStore satisfies never\n              }\n            }\n            markCurrentScopeAsDynamic(\n              workStore,\n              workUnitStore,\n              `no-store fetch ${input} ${workStore.route}`\n            )\n          }\n\n          const hasNextConfig = 'next' in init\n          const { next = {} } = init\n          if (\n            typeof next.revalidate === 'number' &&\n            revalidateStore &&\n            next.revalidate < revalidateStore.revalidate\n          ) {\n            if (next.revalidate === 0) {\n              // If enabled, we should bail out of static generation.\n              if (workUnitStore) {\n                switch (workUnitStore.type) {\n                  case 'prerender':\n                  case 'prerender-client':\n                  case 'prerender-runtime':\n                    return makeHangingPromise<Response>(\n                      workUnitStore.renderSignal,\n                      workStore.route,\n                      'fetch()'\n                    )\n                  case 'request':\n                  case 'cache':\n                  case 'private-cache':\n                  case 'unstable-cache':\n                  case 'prerender-legacy':\n                  case 'prerender-ppr':\n                    break\n                  default:\n                    workUnitStore satisfies never\n                }\n              }\n              markCurrentScopeAsDynamic(\n                workStore,\n                workUnitStore,\n                `revalidate: 0 fetch ${input} ${workStore.route}`\n              )\n            }\n\n            if (!workStore.forceStatic || next.revalidate !== 0) {\n              revalidateStore.revalidate = next.revalidate\n            }\n          }\n          if (hasNextConfig) delete init.next\n        }\n\n        // if we are revalidating the whole page via time or on-demand and\n        // the fetch cache entry is stale we should still de-dupe the\n        // origin hit if it's a cache-able entry\n        if (cacheKey && isForegroundRevalidate) {\n          const pendingRevalidateKey = cacheKey\n          workStore.pendingRevalidates ??= {}\n          let pendingRevalidate =\n            workStore.pendingRevalidates[pendingRevalidateKey]\n\n          if (pendingRevalidate) {\n            const revalidatedResult: {\n              body: ArrayBuffer\n              headers: Headers\n              status: number\n              statusText: string\n            } = await pendingRevalidate\n            return new Response(revalidatedResult.body, {\n              headers: revalidatedResult.headers,\n              status: revalidatedResult.status,\n              statusText: revalidatedResult.statusText,\n            })\n          }\n\n          // We used to just resolve the Response and clone it however for\n          // static generation with cacheComponents we need the response to be able to\n          // be resolved in a microtask and cloning the response will never have\n          // a body that can resolve in a microtask in node (as observed through\n          // experimentation) So instead we await the body and then when it is\n          // available we construct manually cloned Response objects with the\n          // body as an ArrayBuffer. This will be resolvable in a microtask\n          // making it compatible with cacheComponents.\n          const pendingResponse = doOriginalFetch(true, cacheReasonOverride)\n            // We're cloning the response using this utility because there\n            // exists a bug in the undici library around response cloning.\n            // See the following pull request for more details:\n            // https://github.com/vercel/next.js/pull/73274\n            .then(cloneResponse)\n\n          pendingRevalidate = pendingResponse\n            .then(async (responses) => {\n              const response = responses[0]\n              return {\n                body: await response.arrayBuffer(),\n                headers: response.headers,\n                status: response.status,\n                statusText: response.statusText,\n              }\n            })\n            .finally(() => {\n              // If the pending revalidate is not present in the store, then\n              // we have nothing to delete.\n              if (!workStore.pendingRevalidates?.[pendingRevalidateKey]) {\n                return\n              }\n\n              delete workStore.pendingRevalidates[pendingRevalidateKey]\n            })\n\n          // Attach the empty catch here so we don't get a \"unhandled promise\n          // rejection\" warning\n          pendingRevalidate.catch(() => {})\n\n          workStore.pendingRevalidates[pendingRevalidateKey] = pendingRevalidate\n\n          return pendingResponse.then((responses) => responses[1])\n        } else {\n          return doOriginalFetch(false, cacheReasonOverride)\n        }\n      }\n    )\n\n    if (cacheSignal) {\n      try {\n        return await result\n      } finally {\n        if (cacheSignal) {\n          cacheSignal.endRead()\n        }\n      }\n    }\n    return result\n  }\n\n  // Attach the necessary properties to the patched fetch function.\n  // We don't use this to determine if the fetch function has been patched,\n  // but for external consumers to determine if the fetch function has been\n  // patched.\n  patched.__nextPatched = true as const\n  patched.__nextGetStaticStore = () => workAsyncStorage\n  patched._nextOriginalFetch = originFetch\n  ;(globalThis as Record<symbol, unknown>)[NEXT_PATCH_SYMBOL] = true\n\n  // Assign the function name also as a name property, so that it's preserved\n  // even when mangling is enabled.\n  Object.defineProperty(patched, 'name', { value: 'fetch', writable: false })\n\n  return patched\n}\n\n// we patch fetch to collect cache information used for\n// determining if a page is static or not\nexport function patchFetch(options: PatchableModule) {\n  // If we've already patched fetch, we should not patch it again.\n  if (isFetchPatched()) return\n\n  // Grab the original fetch function. We'll attach this so we can use it in\n  // the patched fetch function.\n  const original = createDedupeFetch(globalThis.fetch)\n\n  // Set the global fetch to the patched fetch.\n  globalThis.fetch = createPatchedFetcher(original, options)\n}\n","import type { IncrementalCache } from '../../lib/incremental-cache'\n\nimport { CACHE_ONE_YEAR } from '../../../lib/constants'\nimport { validateRevalidate, validateTags } from '../../lib/patch-fetch'\nimport {\n  workAsyncStorage,\n  type WorkStore,\n} from '../../app-render/work-async-storage.external'\nimport {\n  getCacheSignal,\n  getDraftModeProviderForCacheScope,\n  workUnitAsyncStorage,\n} from '../../app-render/work-unit-async-storage.external'\nimport {\n  CachedRouteKind,\n  IncrementalCacheKind,\n  type CachedFetchData,\n} from '../../response-cache'\nimport type {\n  UnstableCacheStore,\n  WorkUnitStore,\n} from '../../app-render/work-unit-async-storage.external'\n\ntype Callback = (...args: any[]) => Promise<any>\n\nlet noStoreFetchIdx = 0\n\nasync function cacheNewResult<T>(\n  result: T,\n  incrementalCache: IncrementalCache,\n  cacheKey: string,\n  tags: string[],\n  revalidate: number | false | undefined,\n  fetchIdx: number,\n  fetchUrl: string\n): Promise<unknown> {\n  await incrementalCache.set(\n    cacheKey,\n    {\n      kind: CachedRouteKind.FETCH,\n      data: {\n        headers: {},\n        // TODO: handle non-JSON values?\n        body: JSON.stringify(result),\n        status: 200,\n        url: '',\n      } satisfies CachedFetchData,\n      revalidate: typeof revalidate !== 'number' ? CACHE_ONE_YEAR : revalidate,\n    },\n    { fetchCache: true, tags, fetchIdx, fetchUrl }\n  )\n  return\n}\n\n/**\n * This function allows you to cache the results of expensive operations, like database queries, and reuse them across multiple requests.\n *\n * Read more: [Next.js Docs: `unstable_cache`](https://nextjs.org/docs/app/api-reference/functions/unstable_cache)\n */\nexport function unstable_cache<T extends Callback>(\n  cb: T,\n  keyParts?: string[],\n  options: {\n    /**\n     * The revalidation interval in seconds.\n     */\n    revalidate?: number | false\n    tags?: string[]\n  } = {}\n): T {\n  if (options.revalidate === 0) {\n    throw new Error(\n      `Invariant revalidate: 0 can not be passed to unstable_cache(), must be \"false\" or \"> 0\" ${cb.toString()}`\n    )\n  }\n\n  // Validate the tags provided are valid\n  const tags = options.tags\n    ? validateTags(options.tags, `unstable_cache ${cb.toString()}`)\n    : []\n\n  // Validate the revalidate options\n  validateRevalidate(\n    options.revalidate,\n    `unstable_cache ${cb.name || cb.toString()}`\n  )\n\n  // Stash the fixed part of the key at construction time. The invocation key will combine\n  // the fixed key with the arguments when actually called\n  // @TODO if cb.toString() is long we should hash it\n  // @TODO come up with a collision-free way to combine keyParts\n  // @TODO consider validating the keyParts are all strings. TS can't provide runtime guarantees\n  // and the error produced by accidentally using something that cannot be safely coerced is likely\n  // hard to debug\n  const fixedKey = `${cb.toString()}-${\n    Array.isArray(keyParts) && keyParts.join(',')\n  }`\n\n  const cachedCb = async (...args: any[]) => {\n    const workStore = workAsyncStorage.getStore()\n    const workUnitStore = workUnitAsyncStorage.getStore()\n\n    // We must be able to find the incremental cache otherwise we throw\n    const maybeIncrementalCache:\n      | import('../../lib/incremental-cache').IncrementalCache\n      | undefined =\n      workStore?.incrementalCache || (globalThis as any).__incrementalCache\n\n    if (!maybeIncrementalCache) {\n      throw new Error(\n        `Invariant: incrementalCache missing in unstable_cache ${cb.toString()}`\n      )\n    }\n    const incrementalCache = maybeIncrementalCache\n\n    const cacheSignal = workUnitStore ? getCacheSignal(workUnitStore) : null\n    if (cacheSignal) {\n      cacheSignal.beginRead()\n    }\n    try {\n      // If there's no request store, we aren't in a request (or we're not in\n      // app router) and if there's no static generation store, we aren't in app\n      // router. Default to an empty pathname and search params when there's no\n      // request store or static generation store available.\n      const fetchUrlPrefix =\n        workStore && workUnitStore\n          ? getFetchUrlPrefix(workStore, workUnitStore)\n          : ''\n\n      // Construct the complete cache key for this function invocation\n      // @TODO stringify is likely not safe here. We will coerce undefined to null which will make\n      // the keyspace smaller than the execution space\n      const invocationKey = `${fixedKey}-${JSON.stringify(args)}`\n      const cacheKey = await incrementalCache.generateCacheKey(invocationKey)\n      // $urlWithPath,$sortedQueryStringKeys,$hashOfEveryThingElse\n      const fetchUrl = `unstable_cache ${fetchUrlPrefix} ${cb.name ? ` ${cb.name}` : cacheKey}`\n      const fetchIdx =\n        (workStore ? workStore.nextFetchId : noStoreFetchIdx) ?? 1\n\n      const implicitTags = workUnitStore?.implicitTags\n\n      const innerCacheStore: UnstableCacheStore = {\n        type: 'unstable-cache',\n        phase: 'render',\n        implicitTags,\n        draftMode:\n          workUnitStore &&\n          workStore &&\n          getDraftModeProviderForCacheScope(workStore, workUnitStore),\n      }\n\n      if (workStore) {\n        workStore.nextFetchId = fetchIdx + 1\n\n        // We are in an App Router context. We try to return the cached entry if it exists and is valid\n        // If the entry is fresh we return it. If the entry is stale we return it but revalidate the entry in\n        // the background. If the entry is missing or invalid we generate a new entry and return it.\n\n        let isNestedUnstableCache = false\n\n        if (workUnitStore) {\n          switch (workUnitStore.type) {\n            case 'cache':\n            case 'private-cache':\n            case 'prerender':\n            case 'prerender-runtime':\n            case 'prerender-ppr':\n            case 'prerender-legacy':\n              // We update the store's revalidate property if the option.revalidate is a higher precedence\n              // options.revalidate === undefined doesn't affect timing.\n              // options.revalidate === false doesn't shrink timing. it stays at the maximum.\n              if (typeof options.revalidate === 'number') {\n                if (workUnitStore.revalidate < options.revalidate) {\n                  // The store is already revalidating on a shorter time interval, leave it alone\n                } else {\n                  workUnitStore.revalidate = options.revalidate\n                }\n              }\n\n              // We need to accumulate the tags for this invocation within the store\n              const collectedTags = workUnitStore.tags\n              if (collectedTags === null) {\n                workUnitStore.tags = tags.slice()\n              } else {\n                for (const tag of tags) {\n                  // @TODO refactor tags to be a set to avoid this O(n) lookup\n                  if (!collectedTags.includes(tag)) {\n                    collectedTags.push(tag)\n                  }\n                }\n              }\n              break\n            case 'unstable-cache':\n              isNestedUnstableCache = true\n              break\n            case 'prerender-client':\n            case 'request':\n              break\n            default:\n              workUnitStore satisfies never\n          }\n        }\n\n        if (\n          // when we are nested inside of other unstable_cache's\n          // we should bypass cache similar to fetches\n          !isNestedUnstableCache &&\n          workStore.fetchCache !== 'force-no-store' &&\n          !workStore.isOnDemandRevalidate &&\n          !incrementalCache.isOnDemandRevalidate &&\n          !workStore.isDraftMode\n        ) {\n          // We attempt to get the current cache entry from the incremental cache.\n          const cacheEntry = await incrementalCache.get(cacheKey, {\n            kind: IncrementalCacheKind.FETCH,\n            revalidate: options.revalidate,\n            tags,\n            softTags: implicitTags?.tags,\n            fetchIdx,\n            fetchUrl,\n          })\n\n          if (cacheEntry && cacheEntry.value) {\n            // The entry exists and has a value\n            if (cacheEntry.value.kind !== CachedRouteKind.FETCH) {\n              // The entry is invalid and we need a special warning\n              // @TODO why do we warn this way? Should this just be an error? How are these errors surfaced\n              // so bugs can be reported\n              // @TODO the invocation key can have sensitive data in it. we should not log this entire object\n              console.error(\n                `Invariant invalid cacheEntry returned for ${invocationKey}`\n              )\n              // will fall through to generating a new cache entry below\n            } else {\n              // We have a valid cache entry so we will be returning it. We also check to see if we need\n              // to background revalidate it by checking if it is stale.\n              const cachedResponse =\n                cacheEntry.value.data.body !== undefined\n                  ? JSON.parse(cacheEntry.value.data.body)\n                  : undefined\n              if (cacheEntry.isStale) {\n                // In App Router we return the stale result and revalidate in the background\n                if (!workStore.pendingRevalidates) {\n                  workStore.pendingRevalidates = {}\n                }\n\n                // We run the cache function asynchronously and save the result when it completes\n                workStore.pendingRevalidates[invocationKey] =\n                  workUnitAsyncStorage\n                    .run(innerCacheStore, cb, ...args)\n                    .then((result) => {\n                      return cacheNewResult(\n                        result,\n                        incrementalCache,\n                        cacheKey,\n                        tags,\n                        options.revalidate,\n                        fetchIdx,\n                        fetchUrl\n                      )\n                    })\n                    // @TODO This error handling seems wrong. We swallow the error?\n                    .catch((err) =>\n                      console.error(\n                        `revalidating cache with key: ${invocationKey}`,\n                        err\n                      )\n                    )\n              }\n              // We had a valid cache entry so we return it here\n              return cachedResponse\n            }\n          }\n        }\n\n        // If we got this far then we had an invalid cache entry and need to generate a new one\n        const result = await workUnitAsyncStorage.run(\n          innerCacheStore,\n          cb,\n          ...args\n        )\n\n        if (!workStore.isDraftMode) {\n          if (!workStore.pendingRevalidates) {\n            workStore.pendingRevalidates = {}\n          }\n\n          // We need to push the cache result promise to pending\n          // revalidates otherwise it won't be awaited and is just\n          // dangling\n          workStore.pendingRevalidates[invocationKey] = cacheNewResult(\n            result,\n            incrementalCache,\n            cacheKey,\n            tags,\n            options.revalidate,\n            fetchIdx,\n            fetchUrl\n          )\n        }\n\n        return result\n      } else {\n        noStoreFetchIdx += 1\n        // We are in Pages Router or were called outside of a render. We don't have a store\n        // so we just call the callback directly when it needs to run.\n        // If the entry is fresh we return it. If the entry is stale we return it but revalidate the entry in\n        // the background. If the entry is missing or invalid we generate a new entry and return it.\n\n        if (!incrementalCache.isOnDemandRevalidate) {\n          // We aren't doing an on demand revalidation so we check use the cache if valid\n          const cacheEntry = await incrementalCache.get(cacheKey, {\n            kind: IncrementalCacheKind.FETCH,\n            revalidate: options.revalidate,\n            tags,\n            fetchIdx,\n            fetchUrl,\n            softTags: implicitTags?.tags,\n          })\n\n          if (cacheEntry && cacheEntry.value) {\n            // The entry exists and has a value\n            if (cacheEntry.value.kind !== CachedRouteKind.FETCH) {\n              // The entry is invalid and we need a special warning\n              // @TODO why do we warn this way? Should this just be an error? How are these errors surfaced\n              // so bugs can be reported\n              console.error(\n                `Invariant invalid cacheEntry returned for ${invocationKey}`\n              )\n              // will fall through to generating a new cache entry below\n            } else if (!cacheEntry.isStale) {\n              // We have a valid cache entry and it is fresh so we return it\n              return cacheEntry.value.data.body !== undefined\n                ? JSON.parse(cacheEntry.value.data.body)\n                : undefined\n            }\n          }\n        }\n\n        // If we got this far then we had an invalid cache entry and need to generate a new one\n        const result = await workUnitAsyncStorage.run(\n          innerCacheStore,\n          cb,\n          ...args\n        )\n\n        // we need to wait setting the new cache result here as\n        // we don't have pending revalidates on workStore to\n        // push to and we can't have a dangling promise\n        await cacheNewResult(\n          result,\n          incrementalCache,\n          cacheKey,\n          tags,\n          options.revalidate,\n          fetchIdx,\n          fetchUrl\n        )\n        return result\n      }\n    } finally {\n      if (cacheSignal) {\n        cacheSignal.endRead()\n      }\n    }\n  }\n  // TODO: once AsyncLocalStorage.run() returns the correct types this override will no longer be necessary\n  return cachedCb as unknown as T\n}\n\nfunction getFetchUrlPrefix(\n  workStore: WorkStore,\n  workUnitStore: WorkUnitStore\n): string {\n  switch (workUnitStore.type) {\n    case 'request':\n      const pathname = workUnitStore.url.pathname\n      const searchParams = new URLSearchParams(workUnitStore.url.search)\n\n      const sortedSearch = [...searchParams.keys()]\n        .sort((a, b) => a.localeCompare(b))\n        .map((key) => `${key}=${searchParams.get(key)}`)\n        .join('&')\n\n      return `${pathname}${sortedSearch.length ? '?' : ''}${sortedSearch}`\n    case 'prerender':\n    case 'prerender-client':\n    case 'prerender-runtime':\n    case 'prerender-ppr':\n    case 'prerender-legacy':\n    case 'cache':\n    case 'private-cache':\n    case 'unstable-cache':\n      return workStore.route\n    default:\n      return workUnitStore satisfies never\n  }\n}\n","class UrlNode {\n  placeholder: boolean = true\n  children: Map<string, UrlNode> = new Map()\n  slugName: string | null = null\n  restSlugName: string | null = null\n  optionalRestSlugName: string | null = null\n\n  insert(urlPath: string): void {\n    this._insert(urlPath.split('/').filter(Boolean), [], false)\n  }\n\n  smoosh(): string[] {\n    return this._smoosh()\n  }\n\n  private _smoosh(prefix: string = '/'): string[] {\n    const childrenPaths = [...this.children.keys()].sort()\n    if (this.slugName !== null) {\n      childrenPaths.splice(childrenPaths.indexOf('[]'), 1)\n    }\n    if (this.restSlugName !== null) {\n      childrenPaths.splice(childrenPaths.indexOf('[...]'), 1)\n    }\n    if (this.optionalRestSlugName !== null) {\n      childrenPaths.splice(childrenPaths.indexOf('[[...]]'), 1)\n    }\n\n    const routes = childrenPaths\n      .map((c) => this.children.get(c)!._smoosh(`${prefix}${c}/`))\n      .reduce((prev, curr) => [...prev, ...curr], [])\n\n    if (this.slugName !== null) {\n      routes.push(\n        ...this.children.get('[]')!._smoosh(`${prefix}[${this.slugName}]/`)\n      )\n    }\n\n    if (!this.placeholder) {\n      const r = prefix === '/' ? '/' : prefix.slice(0, -1)\n      if (this.optionalRestSlugName != null) {\n        throw new Error(\n          `You cannot define a route with the same specificity as a optional catch-all route (\"${r}\" and \"${r}[[...${this.optionalRestSlugName}]]\").`\n        )\n      }\n\n      routes.unshift(r)\n    }\n\n    if (this.restSlugName !== null) {\n      routes.push(\n        ...this.children\n          .get('[...]')!\n          ._smoosh(`${prefix}[...${this.restSlugName}]/`)\n      )\n    }\n\n    if (this.optionalRestSlugName !== null) {\n      routes.push(\n        ...this.children\n          .get('[[...]]')!\n          ._smoosh(`${prefix}[[...${this.optionalRestSlugName}]]/`)\n      )\n    }\n\n    return routes\n  }\n\n  private _insert(\n    urlPaths: string[],\n    slugNames: string[],\n    isCatchAll: boolean\n  ): void {\n    if (urlPaths.length === 0) {\n      this.placeholder = false\n      return\n    }\n\n    if (isCatchAll) {\n      throw new Error(`Catch-all must be the last part of the URL.`)\n    }\n\n    // The next segment in the urlPaths list\n    let nextSegment = urlPaths[0]\n\n    // Check if the segment matches `[something]`\n    if (nextSegment.startsWith('[') && nextSegment.endsWith(']')) {\n      // Strip `[` and `]`, leaving only `something`\n      let segmentName = nextSegment.slice(1, -1)\n\n      let isOptional = false\n      if (segmentName.startsWith('[') && segmentName.endsWith(']')) {\n        // Strip optional `[` and `]`, leaving only `something`\n        segmentName = segmentName.slice(1, -1)\n        isOptional = true\n      }\n\n      if (segmentName.startsWith('…')) {\n        throw new Error(\n          `Detected a three-dot character ('…') at ('${segmentName}'). Did you mean ('...')?`\n        )\n      }\n\n      if (segmentName.startsWith('...')) {\n        // Strip `...`, leaving only `something`\n        segmentName = segmentName.substring(3)\n        isCatchAll = true\n      }\n\n      if (segmentName.startsWith('[') || segmentName.endsWith(']')) {\n        throw new Error(\n          `Segment names may not start or end with extra brackets ('${segmentName}').`\n        )\n      }\n\n      if (segmentName.startsWith('.')) {\n        throw new Error(\n          `Segment names may not start with erroneous periods ('${segmentName}').`\n        )\n      }\n\n      function handleSlug(previousSlug: string | null, nextSlug: string) {\n        if (previousSlug !== null) {\n          // If the specific segment already has a slug but the slug is not `something`\n          // This prevents collisions like:\n          // pages/[post]/index.js\n          // pages/[id]/index.js\n          // Because currently multiple dynamic params on the same segment level are not supported\n          if (previousSlug !== nextSlug) {\n            // TODO: This error seems to be confusing for users, needs an error link, the description can be based on above comment.\n            throw new Error(\n              `You cannot use different slug names for the same dynamic path ('${previousSlug}' !== '${nextSlug}').`\n            )\n          }\n        }\n\n        slugNames.forEach((slug) => {\n          if (slug === nextSlug) {\n            throw new Error(\n              `You cannot have the same slug name \"${nextSlug}\" repeat within a single dynamic path`\n            )\n          }\n\n          if (slug.replace(/\\W/g, '') === nextSegment.replace(/\\W/g, '')) {\n            throw new Error(\n              `You cannot have the slug names \"${slug}\" and \"${nextSlug}\" differ only by non-word symbols within a single dynamic path`\n            )\n          }\n        })\n\n        slugNames.push(nextSlug)\n      }\n\n      if (isCatchAll) {\n        if (isOptional) {\n          if (this.restSlugName != null) {\n            throw new Error(\n              `You cannot use both an required and optional catch-all route at the same level (\"[...${this.restSlugName}]\" and \"${urlPaths[0]}\" ).`\n            )\n          }\n\n          handleSlug(this.optionalRestSlugName, segmentName)\n          // slugName is kept as it can only be one particular slugName\n          this.optionalRestSlugName = segmentName\n          // nextSegment is overwritten to [[...]] so that it can later be sorted specifically\n          nextSegment = '[[...]]'\n        } else {\n          if (this.optionalRestSlugName != null) {\n            throw new Error(\n              `You cannot use both an optional and required catch-all route at the same level (\"[[...${this.optionalRestSlugName}]]\" and \"${urlPaths[0]}\").`\n            )\n          }\n\n          handleSlug(this.restSlugName, segmentName)\n          // slugName is kept as it can only be one particular slugName\n          this.restSlugName = segmentName\n          // nextSegment is overwritten to [...] so that it can later be sorted specifically\n          nextSegment = '[...]'\n        }\n      } else {\n        if (isOptional) {\n          throw new Error(\n            `Optional route parameters are not yet supported (\"${urlPaths[0]}\").`\n          )\n        }\n        handleSlug(this.slugName, segmentName)\n        // slugName is kept as it can only be one particular slugName\n        this.slugName = segmentName\n        // nextSegment is overwritten to [] so that it can later be sorted specifically\n        nextSegment = '[]'\n      }\n    }\n\n    // If this UrlNode doesn't have the nextSegment yet we create a new child UrlNode\n    if (!this.children.has(nextSegment)) {\n      this.children.set(nextSegment, new UrlNode())\n    }\n\n    this.children\n      .get(nextSegment)!\n      ._insert(urlPaths.slice(1), slugNames, isCatchAll)\n  }\n}\n\n/**\n * @deprecated Use `sortSortableRoutes` or `sortPages` instead.\n */\nexport function getSortedRoutes(\n  normalizedPages: ReadonlyArray<string>\n): string[] {\n  // First the UrlNode is created, and every UrlNode can have only 1 dynamic segment\n  // Eg you can't have pages/[post]/abc.js and pages/[hello]/something-else.js\n  // Only 1 dynamic segment per nesting level\n\n  // So in the case that is test/integration/dynamic-routing it'll be this:\n  // pages/[post]/comments.js\n  // pages/blog/[post]/comment/[id].js\n  // Both are fine because `pages/[post]` and `pages/blog` are on the same level\n  // So in this case `UrlNode` created here has `this.slugName === 'post'`\n  // And since your PR passed through `slugName` as an array basically it'd including it in too many possibilities\n  // Instead what has to be passed through is the upwards path's dynamic names\n  const root = new UrlNode()\n\n  // Here the `root` gets injected multiple paths, and insert will break them up into sublevels\n  normalizedPages.forEach((pagePath) => root.insert(pagePath))\n  // Smoosh will then sort those sublevels up to the point where you get the correct route definition priority\n  return root.smoosh()\n}\n\n/**\n * @deprecated Use `sortSortableRouteObjects` or `sortPageObjects` instead.\n */\nexport function getSortedRouteObjects<T>(\n  objects: T[],\n  getter: (obj: T) => string\n): T[] {\n  // We're assuming here that all the pathnames are unique, that way we can\n  // sort the list and use the index as the key.\n  const indexes: Record<string, number> = {}\n  const pathnames: string[] = []\n  for (let i = 0; i < objects.length; i++) {\n    const pathname = getter(objects[i])\n    indexes[pathname] = i\n    pathnames[i] = pathname\n  }\n\n  // Sort the pathnames.\n  const sorted = getSortedRoutes(pathnames)\n\n  // Map the sorted pathnames back to the original objects using the new sorted\n  // index.\n  return sorted.map((pathname) => objects[indexes[pathname]])\n}\n","import {\n  extractInterceptionRouteInformation,\n  isInterceptionRouteAppPath,\n} from './interception-routes'\n\n// Identify /.*[param].*/ in route string\nconst TEST_ROUTE = /\\/[^/]*\\[[^/]+\\][^/]*(?=\\/|$)/\n\n// Identify /[param]/ in route string\nconst TEST_STRICT_ROUTE = /\\/\\[[^/]+\\](?=\\/|$)/\n\n/**\n * Check if a route is dynamic.\n *\n * @param route - The route to check.\n * @param strict - Whether to use strict mode which prohibits segments with prefixes/suffixes (default: true).\n * @returns Whether the route is dynamic.\n */\nexport function isDynamicRoute(route: string, strict: boolean = true): boolean {\n  if (isInterceptionRouteAppPath(route)) {\n    route = extractInterceptionRouteInformation(route).interceptedRoute\n  }\n\n  if (strict) {\n    return TEST_STRICT_ROUTE.test(route)\n  }\n\n  return TEST_ROUTE.test(route)\n}\n","export { getSortedRoutes, getSortedRouteObjects } from './sorted-routes'\nexport { isDynamicRoute } from './is-dynamic'\n","import {\n  abortAndThrowOnSynchronousRequestDataAccess,\n  postponeWithTracking,\n} from '../../app-render/dynamic-rendering'\nimport { isDynamicRoute } from '../../../shared/lib/router/utils'\nimport {\n  NEXT_CACHE_IMPLICIT_TAG_ID,\n  NEXT_CACHE_SOFT_TAG_MAX_LENGTH,\n} from '../../../lib/constants'\nimport { workAsyncStorage } from '../../app-render/work-async-storage.external'\nimport { workUnitAsyncStorage } from '../../app-render/work-unit-async-storage.external'\nimport { DynamicServerError } from '../../../client/components/hooks-server-context'\nimport { InvariantError } from '../../../shared/lib/invariant-error'\n\n/**\n * This function allows you to purge [cached data](https://nextjs.org/docs/app/building-your-application/caching) on-demand for a specific cache tag.\n *\n * Read more: [Next.js Docs: `revalidateTag`](https://nextjs.org/docs/app/api-reference/functions/revalidateTag)\n */\nexport function revalidateTag(tag: string) {\n  return revalidate([tag], `revalidateTag ${tag}`)\n}\n\n/**\n * This function allows you to purge [cached data](https://nextjs.org/docs/app/building-your-application/caching) on-demand for a specific path.\n *\n * Read more: [Next.js Docs: `unstable_expirePath`](https://nextjs.org/docs/app/api-reference/functions/unstable_expirePath)\n */\nexport function unstable_expirePath(\n  originalPath: string,\n  type?: 'layout' | 'page'\n) {\n  if (originalPath.length > NEXT_CACHE_SOFT_TAG_MAX_LENGTH) {\n    console.warn(\n      `Warning: expirePath received \"${originalPath}\" which exceeded max length of ${NEXT_CACHE_SOFT_TAG_MAX_LENGTH}. See more info here https://nextjs.org/docs/app/api-reference/functions/unstable_expirePath`\n    )\n    return\n  }\n\n  let normalizedPath = `${NEXT_CACHE_IMPLICIT_TAG_ID}${originalPath}`\n\n  if (type) {\n    normalizedPath += `${normalizedPath.endsWith('/') ? '' : '/'}${type}`\n  } else if (isDynamicRoute(originalPath)) {\n    console.warn(\n      `Warning: a dynamic page path \"${originalPath}\" was passed to \"expirePath\", but the \"type\" parameter is missing. This has no effect by default, see more info here https://nextjs.org/docs/app/api-reference/functions/unstable_expirePath`\n    )\n  }\n  return revalidate([normalizedPath], `unstable_expirePath ${originalPath}`)\n}\n\n/**\n * This function allows you to purge [cached data](https://nextjs.org/docs/app/building-your-application/caching) on-demand for a specific cache tag.\n *\n * Read more: [Next.js Docs: `unstable_expireTag`](https://nextjs.org/docs/app/api-reference/functions/unstable_expireTag)\n */\nexport function unstable_expireTag(...tags: string[]) {\n  return revalidate(tags, `unstable_expireTag ${tags.join(', ')}`)\n}\n\n/**\n * This function allows you to purge [cached data](https://nextjs.org/docs/app/building-your-application/caching) on-demand for a specific path.\n *\n * Read more: [Next.js Docs: `revalidatePath`](https://nextjs.org/docs/app/api-reference/functions/revalidatePath)\n */\nexport function revalidatePath(originalPath: string, type?: 'layout' | 'page') {\n  if (originalPath.length > NEXT_CACHE_SOFT_TAG_MAX_LENGTH) {\n    console.warn(\n      `Warning: revalidatePath received \"${originalPath}\" which exceeded max length of ${NEXT_CACHE_SOFT_TAG_MAX_LENGTH}. See more info here https://nextjs.org/docs/app/api-reference/functions/revalidatePath`\n    )\n    return\n  }\n\n  let normalizedPath = `${NEXT_CACHE_IMPLICIT_TAG_ID}${originalPath}`\n\n  if (type) {\n    normalizedPath += `${normalizedPath.endsWith('/') ? '' : '/'}${type}`\n  } else if (isDynamicRoute(originalPath)) {\n    console.warn(\n      `Warning: a dynamic page path \"${originalPath}\" was passed to \"revalidatePath\", but the \"type\" parameter is missing. This has no effect by default, see more info here https://nextjs.org/docs/app/api-reference/functions/revalidatePath`\n    )\n  }\n  return revalidate([normalizedPath], `revalidatePath ${originalPath}`)\n}\n\nfunction revalidate(tags: string[], expression: string) {\n  const store = workAsyncStorage.getStore()\n  if (!store || !store.incrementalCache) {\n    throw new Error(\n      `Invariant: static generation store missing in ${expression}`\n    )\n  }\n\n  const workUnitStore = workUnitAsyncStorage.getStore()\n  if (workUnitStore) {\n    if (workUnitStore.phase === 'render') {\n      throw new Error(\n        `Route ${store.route} used \"${expression}\" during render which is unsupported. To ensure revalidation is performed consistently it must always happen outside of renders and cached functions. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`\n      )\n    }\n\n    switch (workUnitStore.type) {\n      case 'cache':\n      case 'private-cache':\n        throw new Error(\n          `Route ${store.route} used \"${expression}\" inside a \"use cache\" which is unsupported. To ensure revalidation is performed consistently it must always happen outside of renders and cached functions. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`\n        )\n      case 'unstable-cache':\n        throw new Error(\n          `Route ${store.route} used \"${expression}\" inside a function cached with \"unstable_cache(...)\" which is unsupported. To ensure revalidation is performed consistently it must always happen outside of renders and cached functions. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`\n        )\n      case 'prerender':\n      case 'prerender-runtime':\n        // cacheComponents Prerender\n        const error = new Error(\n          `Route ${store.route} used ${expression} without first calling \\`await connection()\\`.`\n        )\n        return abortAndThrowOnSynchronousRequestDataAccess(\n          store.route,\n          expression,\n          error,\n          workUnitStore\n        )\n      case 'prerender-client':\n        throw new InvariantError(\n          `${expression} must not be used within a client component. Next.js should be preventing ${expression} from being included in client components statically, but did not in this case.`\n        )\n      case 'prerender-ppr':\n        return postponeWithTracking(\n          store.route,\n          expression,\n          workUnitStore.dynamicTracking\n        )\n      case 'prerender-legacy':\n        workUnitStore.revalidate = 0\n\n        const err = new DynamicServerError(\n          `Route ${store.route} couldn't be rendered statically because it used \\`${expression}\\`. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`\n        )\n        store.dynamicUsageDescription = expression\n        store.dynamicUsageStack = err.stack\n\n        throw err\n      case 'request':\n        if (process.env.NODE_ENV !== 'production') {\n          // TODO: This is most likely incorrect. It would lead to the ISR\n          // status being flipped when revalidating a static page with a server\n          // action.\n          workUnitStore.usedDynamic = true\n        }\n        break\n      default:\n        workUnitStore satisfies never\n    }\n  }\n\n  if (!store.pendingRevalidatedTags) {\n    store.pendingRevalidatedTags = []\n  }\n\n  for (const tag of tags) {\n    if (!store.pendingRevalidatedTags.includes(tag)) {\n      store.pendingRevalidatedTags.push(tag)\n    }\n  }\n\n  // TODO: only revalidate if the path matches\n  store.pathWasRevalidated = true\n}\n","import { workAsyncStorage } from '../../app-render/work-async-storage.external'\nimport { workUnitAsyncStorage } from '../../app-render/work-unit-async-storage.external'\nimport { markCurrentScopeAsDynamic } from '../../app-render/dynamic-rendering'\n\n/**\n * This function can be used to declaratively opt out of static rendering and indicate a particular component should not be cached.\n *\n * It marks the current scope as dynamic.\n *\n * - In [non-PPR](https://nextjs.org/docs/app/api-reference/next-config-js/partial-prerendering) cases this will make a static render\n * halt and mark the page as dynamic.\n * - In PPR cases this will postpone the render at this location.\n *\n * If we are inside a cache scope then this function does nothing.\n *\n * @note It expects to be called within App Router and will error otherwise.\n *\n * Read more: [Next.js Docs: `unstable_noStore`](https://nextjs.org/docs/app/api-reference/functions/unstable_noStore)\n */\nexport function unstable_noStore() {\n  const callingExpression = 'unstable_noStore()'\n  const store = workAsyncStorage.getStore()\n  const workUnitStore = workUnitAsyncStorage.getStore()\n  if (!store) {\n    // This generally implies we are being called in Pages router. We should probably not support\n    // unstable_noStore in contexts outside of `react-server` condition but since we historically\n    // have not errored here previously, we maintain that behavior for now.\n    return\n  } else if (store.forceStatic) {\n    return\n  } else {\n    store.isUnstableNoStore = true\n    if (workUnitStore) {\n      switch (workUnitStore.type) {\n        case 'prerender':\n        case 'prerender-client':\n        case 'prerender-runtime':\n          // unstable_noStore() is a noop in Dynamic I/O.\n          return\n        case 'prerender-ppr':\n        case 'prerender-legacy':\n        case 'request':\n        case 'cache':\n        case 'private-cache':\n        case 'unstable-cache':\n          break\n        default:\n          workUnitStore satisfies never\n      }\n    }\n    markCurrentScopeAsDynamic(store, workUnitStore, callingExpression)\n  }\n}\n","import { workAsyncStorage } from '../app-render/work-async-storage.external'\nimport { workUnitAsyncStorage } from '../app-render/work-unit-async-storage.external'\n\nexport type CacheLife = {\n  // How long the client can cache a value without checking with the server.\n  stale?: number\n  // How frequently you want the cache to refresh on the server.\n  // Stale values may be served while revalidating.\n  revalidate?: number\n  // In the worst case scenario, where you haven't had traffic in a while,\n  // how stale can a value be until you prefer deopting to dynamic.\n  // Must be longer than revalidate.\n  expire?: number\n}\n// The equivalent header is kind of like:\n// Cache-Control: max-age=[stale],s-max-age=[revalidate],stale-while-revalidate=[expire-revalidate],stale-if-error=[expire-revalidate]\n// Except that stale-while-revalidate/stale-if-error only applies to shared caches - not private caches.\n\n// The default revalidates relatively frequently but doesn't expire to ensure it's always\n// able to serve fast results but by default doesn't hang.\n\n// This gets overridden by the next-types-plugin\ntype CacheLifeProfiles =\n  | 'default'\n  | 'seconds'\n  | 'minutes'\n  | 'hours'\n  | 'days'\n  | 'weeks'\n  | 'max'\n  | (string & {})\n\nfunction validateCacheLife(profile: CacheLife) {\n  if (profile.stale !== undefined) {\n    if ((profile.stale as any) === false) {\n      throw new Error(\n        'Pass `Infinity` instead of `false` if you want to cache on the client forever ' +\n          'without checking with the server.'\n      )\n    } else if (typeof profile.stale !== 'number') {\n      throw new Error('The stale option must be a number of seconds.')\n    }\n  }\n  if (profile.revalidate !== undefined) {\n    if ((profile.revalidate as any) === false) {\n      throw new Error(\n        'Pass `Infinity` instead of `false` if you do not want to revalidate by time.'\n      )\n    } else if (typeof profile.revalidate !== 'number') {\n      throw new Error('The revalidate option must be a number of seconds.')\n    }\n  }\n  if (profile.expire !== undefined) {\n    if ((profile.expire as any) === false) {\n      throw new Error(\n        'Pass `Infinity` instead of `false` if you want to cache on the server forever ' +\n          'without checking with the origin.'\n      )\n    } else if (typeof profile.expire !== 'number') {\n      throw new Error('The expire option must be a number of seconds.')\n    }\n  }\n\n  if (profile.revalidate !== undefined && profile.expire !== undefined) {\n    if (profile.revalidate > profile.expire) {\n      throw new Error(\n        'If providing both the revalidate and expire options, ' +\n          'the expire option must be greater than the revalidate option. ' +\n          'The expire option indicates how many seconds from the start ' +\n          'until it can no longer be used.'\n      )\n    }\n  }\n\n  if (profile.stale !== undefined && profile.expire !== undefined) {\n    if (profile.stale > profile.expire) {\n      throw new Error(\n        'If providing both the stale and expire options, ' +\n          'the expire option must be greater than the stale option. ' +\n          'The expire option indicates how many seconds from the start ' +\n          'until it can no longer be used.'\n      )\n    }\n  }\n}\n\nexport function cacheLife(profile: CacheLifeProfiles | CacheLife): void {\n  if (!process.env.__NEXT_USE_CACHE) {\n    throw new Error(\n      'cacheLife() is only available with the experimental.useCache config.'\n    )\n  }\n\n  const workUnitStore = workUnitAsyncStorage.getStore()\n\n  switch (workUnitStore?.type) {\n    case 'prerender':\n    case 'prerender-client':\n    case 'prerender-runtime':\n    case 'prerender-ppr':\n    case 'prerender-legacy':\n    case 'request':\n    case 'unstable-cache':\n    case undefined:\n      throw new Error(\n        'cacheLife() can only be called inside a \"use cache\" function.'\n      )\n    case 'cache':\n    case 'private-cache':\n      break\n    default:\n      workUnitStore satisfies never\n  }\n\n  if (typeof profile === 'string') {\n    const workStore = workAsyncStorage.getStore()\n    if (!workStore) {\n      throw new Error(\n        'cacheLife() can only be called during App Router rendering at the moment.'\n      )\n    }\n    if (!workStore.cacheLifeProfiles) {\n      throw new Error(\n        'cacheLifeProfiles should always be provided. This is a bug in Next.js.'\n      )\n    }\n\n    // TODO: This should be globally available and not require an AsyncLocalStorage.\n    const configuredProfile = workStore.cacheLifeProfiles[profile]\n    if (configuredProfile === undefined) {\n      if (workStore.cacheLifeProfiles[profile.trim()]) {\n        throw new Error(\n          `Unknown cacheLife profile \"${profile}\" is not configured in next.config.js\\n` +\n            `Did you mean \"${profile.trim()}\" without the spaces?`\n        )\n      }\n      throw new Error(\n        `Unknown cacheLife profile \"${profile}\" is not configured in next.config.js\\n` +\n          'module.exports = {\\n' +\n          '  experimental: {\\n' +\n          '    cacheLife: {\\n' +\n          `      \"${profile}\": ...\\n` +\n          '    }\\n' +\n          '  }\\n' +\n          '}'\n      )\n    }\n    profile = configuredProfile\n  } else if (\n    typeof profile !== 'object' ||\n    profile === null ||\n    Array.isArray(profile)\n  ) {\n    throw new Error(\n      'Invalid cacheLife() option. Either pass a profile name or object.'\n    )\n  } else {\n    validateCacheLife(profile)\n  }\n\n  if (profile.revalidate !== undefined) {\n    // Track the explicit revalidate time.\n    if (\n      workUnitStore.explicitRevalidate === undefined ||\n      workUnitStore.explicitRevalidate > profile.revalidate\n    ) {\n      workUnitStore.explicitRevalidate = profile.revalidate\n    }\n  }\n  if (profile.expire !== undefined) {\n    // Track the explicit expire time.\n    if (\n      workUnitStore.explicitExpire === undefined ||\n      workUnitStore.explicitExpire > profile.expire\n    ) {\n      workUnitStore.explicitExpire = profile.expire\n    }\n  }\n  if (profile.stale !== undefined) {\n    // Track the explicit stale time.\n    if (\n      workUnitStore.explicitStale === undefined ||\n      workUnitStore.explicitStale > profile.stale\n    ) {\n      workUnitStore.explicitStale = profile.stale\n    }\n  }\n}\n","import { workUnitAsyncStorage } from '../app-render/work-unit-async-storage.external'\nimport { validateTags } from '../lib/patch-fetch'\n\nexport function cacheTag(...tags: string[]): void {\n  if (!process.env.__NEXT_USE_CACHE) {\n    throw new Error(\n      'cacheTag() is only available with the experimental.useCache config.'\n    )\n  }\n\n  const workUnitStore = workUnitAsyncStorage.getStore()\n\n  switch (workUnitStore?.type) {\n    case 'prerender':\n    case 'prerender-client':\n    case 'prerender-runtime':\n    case 'prerender-ppr':\n    case 'prerender-legacy':\n    case 'request':\n    case 'unstable-cache':\n    case undefined:\n      throw new Error(\n        'cacheTag() can only be called inside a \"use cache\" function.'\n      )\n    case 'cache':\n    case 'private-cache':\n      break\n    default:\n      workUnitStore satisfies never\n  }\n\n  const validTags = validateTags(tags, 'cacheTag()')\n\n  if (!workUnitStore.tags) {\n    workUnitStore.tags = validTags\n  } else {\n    workUnitStore.tags.push(...validTags)\n  }\n}\n","const cacheExports = {\n  unstable_cache: require('next/dist/server/web/spec-extension/unstable-cache')\n    .unstable_cache,\n\n  revalidateTag: require('next/dist/server/web/spec-extension/revalidate')\n    .revalidateTag,\n  revalidatePath: require('next/dist/server/web/spec-extension/revalidate')\n    .revalidatePath,\n\n  unstable_expireTag: require('next/dist/server/web/spec-extension/revalidate')\n    .unstable_expireTag,\n  unstable_expirePath: require('next/dist/server/web/spec-extension/revalidate')\n    .unstable_expirePath,\n\n  unstable_noStore:\n    require('next/dist/server/web/spec-extension/unstable-no-store')\n      .unstable_noStore,\n  unstable_cacheLife: require('next/dist/server/use-cache/cache-life')\n    .cacheLife,\n  unstable_cacheTag: require('next/dist/server/use-cache/cache-tag').cacheTag,\n}\n\n// https://nodejs.org/api/esm.html#commonjs-namespaces\n// When importing CommonJS modules, the module.exports object is provided as the default export\nmodule.exports = cacheExports\n\n// make import { xxx } from 'next/cache' work\nexports.unstable_cache = cacheExports.unstable_cache\nexports.revalidatePath = cacheExports.revalidatePath\nexports.revalidateTag = cacheExports.revalidateTag\nexports.unstable_expireTag = cacheExports.unstable_expireTag\nexports.unstable_expirePath = cacheExports.unstable_expirePath\nexports.unstable_noStore = cacheExports.unstable_noStore\nexports.unstable_cacheLife = cacheExports.unstable_cacheLife\nexports.unstable_cacheTag = cacheExports.unstable_cacheTag\n"],"names":["AppRenderSpan","AppRouteRouteHandlersSpan","BaseServerSpan","LoadComponentsSpan","LogSpanAllowList","MiddlewareSpan","NextNodeServerSpan","NextServerSpan","NextVanillaSpanAllowlist","NodeSpan","RenderSpan","ResolveMetadataSpan","RouterSpan","StartServerSpan","isThenable","promise","then","BubbledError","SpanKind","SpanStatusCode","getTracer","isBubbledError","api","process","env","NEXT_RUNTIME","require","err","context","propagation","trace","ROOT_CONTEXT","Error","constructor","bubble","result","error","closeSpanWithError","span","setAttribute","recordException","name","setStatus","code","ERROR","message","end","rootSpanAttributesStore","Map","rootSpanIdKey","createContextKey","lastSpanId","getSpanId","clientTraceDataSetter","set","carrier","key","value","push","NextTracerImpl","getTracerInstance","getContext","getTracePropagationData","activeContext","active","entries","inject","getActiveScopeSpan","getSpan","withPropagatedContext","fn","getter","getSpanContext","remoteContext","extract","with","args","type","fnOrOptions","fnOrEmpty","options","spanName","includes","NEXT_OTEL_VERBOSE","hideSpan","spanContext","parentSpan","isRootSpan","isRemote","spanId","attributes","setValue","startActiveSpan","startTime","globalThis","performance","now","undefined","onCleanup","delete","NEXT_OTEL_PERFORMANCE_PREFIX","measure","split","pop","replace","match","toLowerCase","start","Object","length","res","catch","finally","wrap","tracer","optionsObj","apply","arguments","lastArgId","cb","scopeBoundCb","bind","_span","done","startSpan","setSpan","getRootSpanAttributes","getValue","get","setRootSpanAttribute","cloneResponse","noop","registry","FinalizationRegistry","weakRef","stream","deref","locked","cancel","original","body","body1","body2","tee","cloned1","Response","status","statusText","headers","defineProperty","url","configurable","enumerable","writable","register","WeakRef","cloned2","createDedupeFetch","simpleCacheKey","generateCacheKey","request","JSON","stringify","method","Array","from","mode","redirect","credentials","referrer","referrerPolicy","integrity","originalFetch","getCacheEntries","React","cache","dedupeFetch","resource","signal","cacheKey","URL","Request","keepalive","cacheEntries","i","j","response","InvariantError","entry","CachedRouteKind","IncrementalCacheKind","DetachedPromise","resolve","reject","Promise","rej","Batcher","cacheKeyFn","schedulerFn","pending","create","batch","ENCODED_TAGS","OPENING","HTML","Uint8Array","BODY","CLOSED","HEAD","BODY_AND_HTML","META","ICON_MARK","indexOfUint8Array","isEquivalentUint8Arrays","removeFromUint8Array","a","b","completeMatch","tagIndex","subarray","removed","slice","MISSING_ROOT_TAGS_ERROR","DOC_PREFETCH_RANGE_HEADER_VALUE","doesExportedHtmlMatchBuildId","insertBuildIdComment","DOCTYPE_PREFIX","MAX_BUILD_ID_LENGTH","escapeBuildId","buildId","truncated","originalHtml","startsWith","partialHtmlDocument","chainStreams","continueDynamicHTMLResume","continueDynamicPrerender","continueFizzStream","continueStaticPrerender","createBufferedTransformStream","createDocumentClosingStream","createRootLayoutValidatorStream","renderToInitialFizzStream","streamFromBuffer","streamFromString","streamToBuffer","streamToString","voidCatch","encoder","TextEncoder","streams","ReadableStream","controller","close","readable","TransformStream","pipeTo","preventClose","nextStream","lastStream","str","enqueue","encode","chunk","reader","getReader","chunks","read","Buffer","concat","decoder","TextDecoder","fatal","string","aborted","decode","bufferedChunks","bufferByteLength","flush","detached","scheduleImmediate","copiedBytes","bufferedChunk","byteLength","transform","createPrefetchCommentStream","isBuildTimePrerendering","didTransformFirstChunk","chunkStr","updatedChunkStr","ReactDOMServer","element","streamOptions","renderToReadableStream","createMetadataTransformStream","insert","chunkIndex","isMarkRemoved","iconMarkIndex","closedHeadIndex","iconMarkLength","replaced","insertion","encodedInsertion","insertionLength","createHeadInsertionTransformStream","inserted","hasBytes","index","insertedHeadContent","createDeferredSuffixStream","suffix","flushed","createFlightDataInjectionTransformStream","delayDataUntilFirstHtmlChunk","htmlStreamFinished","pull","donePulling","startOrContinuePulling","startPulling","atLeastOneTask","CLOSE_TAG","createMoveSuffixStream","foundSuffix","before","after","createStripDocumentClosingTagsTransform","foundHtml","foundBody","missingTags","map","c","join","chainTransformers","transformers","transformer","pipeThrough","renderStream","inlinedDataStream","isStaticGeneration","getServerInsertedHTML","getServerInsertedMetadata","validateRootLayout","suffixUnclosed","allReady","prerenderStream","NEXT_REQUEST_META","addRequestMeta","getRequestMeta","removeRequestMeta","setRequestMeta","Symbol","for","req","meta","isNodeNextRequest","isNodeNextResponse","isWebNextRequest","isWebNextResponse","NextRequestAdapter","ResponseAborted","ResponseAbortedName","createAbortController","signalFromNodeResponse","AbortController","once","writableFinished","abort","errored","destroyed","AbortSignal","fromBaseNextRequest","fromWebNextRequest","fromNodeNextRequest","base","NextRequest","fromNodeOutgoingHttpHeaders","duplex","getClientComponentLoaderMetrics","wrapClientComponentLoader","clientComponentLoadStart","clientComponentLoadTimes","clientComponentLoadCount","ComponentMod","__next_app__","loadChunk","metrics","reset","isAbortError","pipeToNodeResponse","e","createWriterFromResponse","waitUntilForEnd","started","drained","onDrain","on","off","finished","WritableStream","write","flushHeaders","startResponse","ok","cause","destroy","writer","RenderResult","EMPTY","metadata","contentType","fromStatic","waitUntil","assignMetadata","assign","isNull","isDynamic","toUnchunkedString","isBuffer","isArray","coerce","unshift","RouteKind","fromResponseCacheEntry","routeKindToIncrementalCacheKind","toResponseCacheEntry","cacheEntry","kind","PAGES","html","pageData","APP_PAGE","postponed","rscData","segmentData","isMiss","isStale","cacheControl","HTML_CONTENT_TYPE_HEADER","routeKind","IMAGE","APP_ROUTE","PAGES_API","ResponseCache","minimal_mode","batcher","isOnDemandRevalidate","scheduleOnNextTick","responseGenerator","hasResolved","previousCacheEntry","incrementalCache","isFallback","isRoutePPREnabled","prom","previousCacheItem","expiresAt","Date","resolved","cachedResponse","isPrefetch","isRevalidating","resolveValue","newRevalidate","Math","min","max","revalidate","newExpire","expire","console","NEXT_PATCH_SYMBOL","createPatchedFetcher","patchFetch","validateRevalidate","validateTags","isEdgeRuntime","isFetchPatched","revalidateVal","route","normalizedRevalidate","INFINITE_CACHE","isNaN","tags","description","validTags","invalidTags","tag","reason","NEXT_CACHE_TAG_MAX_LENGTH","NEXT_CACHE_TAG_MAX_ITEMS","warn","log","trackFetchMetric","workStore","ctx","shouldTrackFetchMetrics","fetchMetrics","timeOrigin","idx","nextFetchId","createCachedPrerenderResponse","incrementalCacheContext","handleUnlock","bodyBuffer","arrayBuffer","fetchedData","fromEntries","toString","FETCH","data","createCachedDynamicResponse","serverComponentsHmrCache","input","cacheSetPromise","pendingRevalidateKey","pendingRevalidates","originFetch","workAsyncStorage","workUnitAsyncStorage","patched","fetch","init","username","password","fetchUrl","href","toUpperCase","isInternal","next","internal","NEXT_OTEL_FETCH_DISABLED","fetchStart","getStore","workUnitStore","cacheSignal","getCacheSignal","beginRead","internalFetch","CLIENT","filter","Boolean","hostname","port","isDraftMode","isRequestInput","field","finalRevalidate","getNextField","originalFetchRevalidate","currentFetchRevalidate","revalidateStore","collectedTags","implicitTags","pageFetchCacheMode","fetchCache","isUsingNoStore","isUnstableNoStore","currentFetchCacheConfig","cacheReason","cacheWarning","isConflictingRevalidate","hasExplicitFetchCacheOptOut","noFetchConfigAndForceDynamic","forceDynamic","_headers","initHeaders","Headers","hasUnCacheableHeader","isUnCacheableMethod","hasNoExplicitCacheConfig","autoNoCache","isImplicitBuildTimeCache","endRead","makeHangingPromise","renderSignal","forceStatic","markCurrentScopeAsDynamic","isCacheableRevalidate","isHmrRefresh","fetchIdx","doOriginalFetch","cacheReasonOverride","requestInputFields","reqInput","reqOptions","_ogBody","otherInput","clonedInit","fetchType","cacheStatus","CACHE_ONE_YEAR","incrementalCacheConfig","isForegroundRevalidate","isHmrRefreshCache","cachedFetchData","lock","softTags","waitAtLeastOneReactRenderTask","isRevalidate","pendingRevalidate","hasNextConfig","revalidatedResult","pendingResponse","responses","__nextPatched","__nextGetStaticStore","_nextOriginalFetch","unstable_cache","noStoreFetchIdx","cacheNewResult","keyParts","fixedKey","cachedCb","maybeIncrementalCache","__incrementalCache","fetchUrlPrefix","getFetchUrlPrefix","invocationKey","innerCacheStore","phase","draftMode","getDraftModeProviderForCacheScope","isNestedUnstableCache","parse","run","pathname","searchParams","URLSearchParams","search","sortedSearch","keys","sort","localeCompare","getSortedRouteObjects","getSortedRoutes","UrlNode","urlPath","_insert","smoosh","_smoosh","prefix","childrenPaths","children","slugName","splice","indexOf","restSlugName","optionalRestSlugName","routes","reduce","prev","curr","placeholder","r","urlPaths","slugNames","isCatchAll","nextSegment","endsWith","segmentName","isOptional","substring","handleSlug","previousSlug","nextSlug","forEach","slug","has","normalizedPages","root","pagePath","objects","indexes","pathnames","sorted","isDynamicRoute","TEST_ROUTE","TEST_STRICT_ROUTE","strict","isInterceptionRouteAppPath","extractInterceptionRouteInformation","interceptedRoute","test","revalidatePath","revalidateTag","unstable_expirePath","unstable_expireTag","originalPath","NEXT_CACHE_SOFT_TAG_MAX_LENGTH","normalizedPath","NEXT_CACHE_IMPLICIT_TAG_ID","expression","store","abortAndThrowOnSynchronousRequestDataAccess","postponeWithTracking","dynamicTracking","DynamicServerError","dynamicUsageDescription","dynamicUsageStack","stack","NODE_ENV","usedDynamic","pendingRevalidatedTags","pathWasRevalidated","unstable_noStore","callingExpression","cacheLife","validateCacheLife","profile","stale","__NEXT_USE_CACHE","cacheLifeProfiles","configuredProfile","trim","explicitRevalidate","explicitExpire","explicitStale","cacheTag"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]}