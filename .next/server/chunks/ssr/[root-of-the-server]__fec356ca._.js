module.exports = [
"[project]/.next-internal/server/app/menu/page/actions.js [app-rsc] (server actions loader, ecmascript)", ((__turbopack_context__, module, exports) => {

}),
"[project]/app/favicon.ico.mjs { IMAGE => \"[project]/app/favicon.ico (static in ecmascript)\" } [app-rsc] (structured image object, ecmascript, Next.js Server Component)", ((__turbopack_context__) => {

__turbopack_context__.n(__turbopack_context__.i("[project]/app/favicon.ico.mjs { IMAGE => \"[project]/app/favicon.ico (static in ecmascript)\" } [app-rsc] (structured image object, ecmascript)"));
}),
"[project]/app/layout.tsx [app-rsc] (ecmascript, Next.js Server Component)", ((__turbopack_context__) => {

__turbopack_context__.n(__turbopack_context__.i("[project]/app/layout.tsx [app-rsc] (ecmascript)"));
}),
"[project]/app/menu/layout.tsx [app-rsc] (ecmascript, Next.js Server Component)", ((__turbopack_context__) => {

__turbopack_context__.n(__turbopack_context__.i("[project]/app/menu/layout.tsx [app-rsc] (ecmascript)"));
}),
"[project]/app/menu/error.tsx [app-rsc] (ecmascript, Next.js Server Component)", ((__turbopack_context__) => {

__turbopack_context__.n(__turbopack_context__.i("[project]/app/menu/error.tsx [app-rsc] (ecmascript)"));
}),
"[project]/app/menu/loading.tsx [app-rsc] (ecmascript, Next.js Server Component)", ((__turbopack_context__) => {

__turbopack_context__.n(__turbopack_context__.i("[project]/app/menu/loading.tsx [app-rsc] (ecmascript)"));
}),
"[project]/components/menu/menu-management-client.tsx [app-rsc] (client reference proxy) <module evaluation>", ((__turbopack_context__) => {
"use strict";

// This file is generated by next-core EcmascriptClientReferenceModule.
__turbopack_context__.s([
    "MenuManagementClient",
    ()=>MenuManagementClient
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$server$2d$dom$2d$turbopack$2d$server$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-server-dom-turbopack-server.js [app-rsc] (ecmascript)");
;
const MenuManagementClient = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$server$2d$dom$2d$turbopack$2d$server$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["registerClientReference"])(function() {
    throw new Error("Attempted to call MenuManagementClient() from the server but MenuManagementClient is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.");
}, "[project]/components/menu/menu-management-client.tsx <module evaluation>", "MenuManagementClient");
}),
"[project]/components/menu/menu-management-client.tsx [app-rsc] (client reference proxy)", ((__turbopack_context__) => {
"use strict";

// This file is generated by next-core EcmascriptClientReferenceModule.
__turbopack_context__.s([
    "MenuManagementClient",
    ()=>MenuManagementClient
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$server$2d$dom$2d$turbopack$2d$server$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-server-dom-turbopack-server.js [app-rsc] (ecmascript)");
;
const MenuManagementClient = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$server$2d$dom$2d$turbopack$2d$server$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["registerClientReference"])(function() {
    throw new Error("Attempted to call MenuManagementClient() from the server but MenuManagementClient is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.");
}, "[project]/components/menu/menu-management-client.tsx", "MenuManagementClient");
}),
"[project]/components/menu/menu-management-client.tsx [app-rsc] (ecmascript)", ((__turbopack_context__) => {
"use strict";

var __TURBOPACK__imported__module__$5b$project$5d2f$components$2f$menu$2f$menu$2d$management$2d$client$2e$tsx__$5b$app$2d$rsc$5d$__$28$client__reference__proxy$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/components/menu/menu-management-client.tsx [app-rsc] (client reference proxy) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$components$2f$menu$2f$menu$2d$management$2d$client$2e$tsx__$5b$app$2d$rsc$5d$__$28$client__reference__proxy$29$__ = __turbopack_context__.i("[project]/components/menu/menu-management-client.tsx [app-rsc] (client reference proxy)");
;
__turbopack_context__.n(__TURBOPACK__imported__module__$5b$project$5d2f$components$2f$menu$2f$menu$2d$management$2d$client$2e$tsx__$5b$app$2d$rsc$5d$__$28$client__reference__proxy$29$__);
}),
"[project]/lib/menu/data.ts [app-rsc] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "bulkDeleteItems",
    ()=>bulkDeleteItems,
    "bulkUpdateItems",
    ()=>bulkUpdateItems,
    "createMenu",
    ()=>createMenu,
    "createMenuGroup",
    ()=>createMenuGroup,
    "createMenuItem",
    ()=>createMenuItem,
    "createModifierGroup",
    ()=>createModifierGroup,
    "createModifierOption",
    ()=>createModifierOption,
    "deleteMenu",
    ()=>deleteMenu,
    "deleteMenuGroup",
    ()=>deleteMenuGroup,
    "deleteMenuItem",
    ()=>deleteMenuItem,
    "deleteModifierGroup",
    ()=>deleteModifierGroup,
    "deleteModifierOption",
    ()=>deleteModifierOption,
    "getAllergens",
    ()=>getAllergens,
    "getMenu",
    ()=>getMenu,
    "getMenuGroup",
    ()=>getMenuGroup,
    "getMenuGroups",
    ()=>getMenuGroups,
    "getMenuItem",
    ()=>getMenuItem,
    "getMenuItems",
    ()=>getMenuItems,
    "getMenus",
    ()=>getMenus,
    "getModifierGroup",
    ()=>getModifierGroup,
    "getModifierGroups",
    ()=>getModifierGroups,
    "getSalesChannels",
    ()=>getSalesChannels,
    "moveItem",
    ()=>moveItem,
    "reorderGroups",
    ()=>reorderGroups,
    "reorderItems",
    ()=>reorderItems,
    "updateMenu",
    ()=>updateMenu,
    "updateMenuGroup",
    ()=>updateMenuGroup,
    "updateMenuItem",
    ()=>updateMenuItem,
    "updateModifierGroup",
    ()=>updateModifierGroup,
    "updateModifierOption",
    ()=>updateModifierOption
]);
// Mock data for development - replace with actual API calls
const delay = (ms)=>new Promise((resolve)=>setTimeout(resolve, ms));
// Sample data
const sampleAllergens = [
    {
        id: '1',
        name: 'Gluten',
        description: 'Contains gluten',
        severity: 'moderate'
    },
    {
        id: '2',
        name: 'Dairy',
        description: 'Contains dairy products',
        severity: 'moderate'
    },
    {
        id: '3',
        name: 'Nuts',
        description: 'Contains tree nuts',
        severity: 'severe'
    },
    {
        id: '4',
        name: 'Shellfish',
        description: 'Contains shellfish',
        severity: 'severe'
    },
    {
        id: '5',
        name: 'Eggs',
        description: 'Contains eggs',
        severity: 'mild'
    }
];
const sampleChannels = [
    {
        id: 'dine-in',
        name: 'Dine In',
        type: 'dine_in',
        isActive: true
    },
    {
        id: 'takeout',
        name: 'Takeout',
        type: 'takeout',
        isActive: true
    },
    {
        id: 'delivery',
        name: 'Delivery',
        type: 'delivery',
        isActive: true
    },
    {
        id: 'online',
        name: 'Online Ordering',
        type: 'online',
        isActive: true
    }
];
let mockMenus = [
    {
        id: '1',
        name: 'Main Menu',
        description: 'Our signature dishes and classics',
        type: 'main',
        sortOrder: 1,
        isActive: true,
        createdAt: new Date('2024-01-01'),
        updatedAt: new Date('2024-01-15'),
        media: [],
        channelVisibility: [
            {
                channelId: 'dine-in',
                isVisible: true
            },
            {
                channelId: 'takeout',
                isVisible: true
            }
        ],
        locationIds: [],
        groups: [
            {
                id: 'group-1',
                name: 'Appetizers',
                description: 'Start your meal right',
                sortOrder: 1,
                isActive: true,
                createdAt: new Date('2024-01-01'),
                updatedAt: new Date('2024-01-10'),
                media: [],
                channelVisibility: [],
                menuId: '1',
                items: [
                    {
                        id: 'item-1',
                        name: 'Buffalo Wings',
                        description: 'Crispy wings tossed in our signature buffalo sauce',
                        basePrice: 12.99,
                        sortOrder: 1,
                        isActive: true,
                        isAvailable: true,
                        createdAt: new Date('2024-01-01'),
                        updatedAt: new Date('2024-01-05'),
                        pricingStrategies: [],
                        tags: [
                            'spicy',
                            'popular'
                        ],
                        allergens: [],
                        dietaryRestrictions: [],
                        media: [],
                        channelVisibility: [],
                        modifierGroups: [
                            {
                                id: 'mod-group-1',
                                name: 'Sauce Options',
                                description: 'Choose your sauce',
                                isRequired: true,
                                minSelections: 1,
                                maxSelections: 1,
                                sortOrder: 1,
                                displayType: 'radio',
                                isActive: true,
                                createdAt: new Date('2024-01-01'),
                                updatedAt: new Date('2024-01-01'),
                                options: [
                                    {
                                        id: 'mod-opt-1',
                                        name: 'Buffalo',
                                        description: 'Classic buffalo sauce',
                                        price: 0,
                                        sortOrder: 1,
                                        isDefault: true,
                                        isActive: true,
                                        createdAt: new Date('2024-01-01'),
                                        updatedAt: new Date('2024-01-01'),
                                        pricingStrategies: [],
                                        allergens: [],
                                        media: []
                                    },
                                    {
                                        id: 'mod-opt-2',
                                        name: 'BBQ',
                                        description: 'Sweet and smoky BBQ sauce',
                                        price: 0,
                                        sortOrder: 2,
                                        isDefault: false,
                                        isActive: true,
                                        createdAt: new Date('2024-01-01'),
                                        updatedAt: new Date('2024-01-01'),
                                        pricingStrategies: [],
                                        allergens: [],
                                        media: []
                                    }
                                ]
                            }
                        ]
                    }
                ],
                subGroups: []
            }
        ]
    }
];
async function getMenus(params) {
    await delay(100);
    let filtered = [
        ...mockMenus
    ];
    // Apply filters
    if (params?.search) {
        const search = params.search.toLowerCase();
        filtered = filtered.filter((menu)=>menu.name.toLowerCase().includes(search) || menu.description?.toLowerCase().includes(search));
    }
    if (params?.isActive !== undefined) {
        filtered = filtered.filter((menu)=>menu.isActive === params.isActive);
    }
    // Pagination
    const page = params?.page || 1;
    const limit = params?.limit || 10;
    const start = (page - 1) * limit;
    const end = start + limit;
    return {
        data: filtered.slice(start, end),
        total: filtered.length,
        page,
        limit
    };
}
async function getMenu(id) {
    await delay(100);
    return mockMenus.find((menu)=>menu.id === id) || null;
}
async function createMenu(data) {
    await delay(200);
    const newMenu = {
        ...data,
        id: `menu-${Date.now()}`,
        createdAt: new Date(),
        updatedAt: new Date(),
        groups: []
    };
    mockMenus.push(newMenu);
    return newMenu;
}
async function updateMenu(id, data) {
    await delay(200);
    const index = mockMenus.findIndex((menu)=>menu.id === id);
    if (index === -1) return null;
    mockMenus[index] = {
        ...mockMenus[index],
        ...data,
        updatedAt: new Date()
    };
    return mockMenus[index];
}
async function deleteMenu(id) {
    await delay(200);
    const index = mockMenus.findIndex((menu)=>menu.id === id);
    if (index === -1) return false;
    mockMenus.splice(index, 1);
    return true;
}
async function getMenuGroups(menuId) {
    await delay(100);
    const menu = mockMenus.find((m)=>m.id === menuId);
    return menu?.groups || [];
}
async function getMenuGroup(id) {
    await delay(100);
    for (const menu of mockMenus){
        const group = findGroupRecursive(menu.groups, id);
        if (group) return group;
    }
    return null;
}
function findGroupRecursive(groups, id) {
    for (const group of groups){
        if (group.id === id) return group;
        const found = findGroupRecursive(group.subGroups, id);
        if (found) return found;
    }
    return null;
}
async function createMenuGroup(data) {
    await delay(200);
    const newGroup = {
        ...data,
        id: `group-${Date.now()}`,
        createdAt: new Date(),
        updatedAt: new Date(),
        items: [],
        subGroups: []
    };
    // Add to appropriate menu
    const menu = mockMenus.find((m)=>m.id === data.menuId);
    if (menu) {
        if (data.parentGroupId) {
            const parentGroup = findGroupRecursive(menu.groups, data.parentGroupId);
            if (parentGroup) {
                parentGroup.subGroups.push(newGroup);
            }
        } else {
            menu.groups.push(newGroup);
        }
    }
    return newGroup;
}
async function updateMenuGroup(id, data) {
    await delay(200);
    for (const menu of mockMenus){
        const group = findGroupRecursive(menu.groups, id);
        if (group) {
            Object.assign(group, {
                ...data,
                updatedAt: new Date()
            });
            return group;
        }
    }
    return null;
}
async function deleteMenuGroup(id) {
    await delay(200);
    for (const menu of mockMenus){
        if (removeGroupRecursive(menu.groups, id)) {
            return true;
        }
    }
    return false;
}
function removeGroupRecursive(groups, id) {
    const index = groups.findIndex((group)=>group.id === id);
    if (index !== -1) {
        groups.splice(index, 1);
        return true;
    }
    for (const group of groups){
        if (removeGroupRecursive(group.subGroups, id)) {
            return true;
        }
    }
    return false;
}
async function getMenuItems(params) {
    await delay(100);
    let items = [];
    // Collect all items
    for (const menu of mockMenus){
        if (params?.menuId && menu.id !== params.menuId) continue;
        collectItemsRecursive(menu.groups, items, params?.groupId);
    }
    // Apply filters
    if (params?.filters) {
        items = applyMenuItemFilters(items, params.filters);
    }
    // Pagination
    const page = params?.page || 1;
    const limit = params?.limit || 20;
    const start = (page - 1) * limit;
    const end = start + limit;
    return {
        data: items.slice(start, end),
        total: items.length,
        page,
        limit
    };
}
function collectItemsRecursive(groups, items, targetGroupId) {
    for (const group of groups){
        if (!targetGroupId || group.id === targetGroupId) {
            items.push(...group.items);
        }
        if (!targetGroupId) {
            collectItemsRecursive(group.subGroups, items);
        }
    }
}
function applyMenuItemFilters(items, filters) {
    return items.filter((item)=>{
        if (filters.search) {
            const search = filters.search.toLowerCase();
            if (!item.name.toLowerCase().includes(search) && !item.description?.toLowerCase().includes(search)) {
                return false;
            }
        }
        if (filters.isActive !== undefined && item.isActive !== filters.isActive) {
            return false;
        }
        if (filters.isAvailable !== undefined && item.isAvailable !== filters.isAvailable) {
            return false;
        }
        if (filters.priceRange) {
            if (item.basePrice < filters.priceRange[0] || item.basePrice > filters.priceRange[1]) {
                return false;
            }
        }
        if (filters.allergens?.length) {
            const hasAllergen = filters.allergens.some((allergen)=>item.allergens.includes(allergen));
            if (hasAllergen) return false;
        }
        if (filters.tags?.length) {
            const hasTag = filters.tags.some((tag)=>item.tags.includes(tag));
            if (!hasTag) return false;
        }
        return true;
    });
}
async function getMenuItem(id) {
    await delay(100);
    for (const menu of mockMenus){
        const item = findItemRecursive(menu.groups, id);
        if (item) return item;
    }
    return null;
}
function findItemRecursive(groups, id) {
    for (const group of groups){
        const item = group.items.find((item)=>item.id === id);
        if (item) return item;
        const found = findItemRecursive(group.subGroups, id);
        if (found) return found;
    }
    return null;
}
async function createMenuItem(data) {
    await delay(200);
    const newItem = {
        ...data,
        id: `item-${Date.now()}`,
        createdAt: new Date(),
        updatedAt: new Date(),
        modifierGroups: []
    };
    // Add to appropriate group
    if (data.menuGroupId) {
        for (const menu of mockMenus){
            const group = findGroupRecursive(menu.groups, data.menuGroupId);
            if (group) {
                group.items.push(newItem);
                break;
            }
        }
    }
    return newItem;
}
async function updateMenuItem(id, data) {
    await delay(200);
    for (const menu of mockMenus){
        const item = findItemRecursive(menu.groups, id);
        if (item) {
            Object.assign(item, {
                ...data,
                updatedAt: new Date()
            });
            return item;
        }
    }
    return null;
}
async function deleteMenuItem(id) {
    await delay(200);
    for (const menu of mockMenus){
        if (removeItemRecursive(menu.groups, id)) {
            return true;
        }
    }
    return false;
}
function removeItemRecursive(groups, id) {
    for (const group of groups){
        const index = group.items.findIndex((item)=>item.id === id);
        if (index !== -1) {
            group.items.splice(index, 1);
            return true;
        }
        if (removeItemRecursive(group.subGroups, id)) {
            return true;
        }
    }
    return false;
}
async function getModifierGroups(itemId) {
    await delay(100);
    const item = await getMenuItem(itemId);
    return item?.modifierGroups || [];
}
async function createModifierGroup(itemId, data) {
    await delay(200);
    const newGroup = {
        ...data,
        id: `mod-group-${Date.now()}`,
        createdAt: new Date(),
        updatedAt: new Date(),
        options: []
    };
    // Add to item
    const item = await getMenuItem(itemId);
    if (item) {
        item.modifierGroups.push(newGroup);
    }
    return newGroup;
}
async function updateModifierGroup(id, data) {
    await delay(200);
    for (const menu of mockMenus){
        const group = findModifierGroupRecursive(menu.groups, id);
        if (group) {
            Object.assign(group, {
                ...data,
                updatedAt: new Date()
            });
            return group;
        }
    }
    return null;
}
function findModifierGroupRecursive(menuGroups, id) {
    for (const group of menuGroups){
        for (const item of group.items){
            const modGroup = item.modifierGroups.find((mg)=>mg.id === id);
            if (modGroup) return modGroup;
        }
        const found = findModifierGroupRecursive(group.subGroups, id);
        if (found) return found;
    }
    return null;
}
async function deleteModifierGroup(id) {
    await delay(200);
    for (const menu of mockMenus){
        if (removeModifierGroupRecursive(menu.groups, id)) {
            return true;
        }
    }
    return false;
}
function removeModifierGroupRecursive(menuGroups, id) {
    for (const group of menuGroups){
        for (const item of group.items){
            const index = item.modifierGroups.findIndex((mg)=>mg.id === id);
            if (index !== -1) {
                item.modifierGroups.splice(index, 1);
                return true;
            }
        }
        if (removeModifierGroupRecursive(group.subGroups, id)) {
            return true;
        }
    }
    return false;
}
async function createModifierOption(groupId, data) {
    await delay(200);
    const newOption = {
        ...data,
        id: `mod-opt-${Date.now()}`,
        createdAt: new Date(),
        updatedAt: new Date()
    };
    // Add to group
    const group = await getModifierGroup(groupId);
    if (group) {
        group.options.push(newOption);
    }
    return newOption;
}
async function getModifierGroup(id) {
    await delay(100);
    for (const menu of mockMenus){
        const group = findModifierGroupRecursive(menu.groups, id);
        if (group) return group;
    }
    return null;
}
async function updateModifierOption(id, data) {
    await delay(200);
    for (const menu of mockMenus){
        const option = findModifierOptionRecursive(menu.groups, id);
        if (option) {
            Object.assign(option, {
                ...data,
                updatedAt: new Date()
            });
            return option;
        }
    }
    return null;
}
function findModifierOptionRecursive(menuGroups, id) {
    for (const group of menuGroups){
        for (const item of group.items){
            for (const modGroup of item.modifierGroups){
                const option = modGroup.options.find((opt)=>opt.id === id);
                if (option) return option;
            }
        }
        const found = findModifierOptionRecursive(group.subGroups, id);
        if (found) return found;
    }
    return null;
}
async function deleteModifierOption(id) {
    await delay(200);
    for (const menu of mockMenus){
        if (removeModifierOptionRecursive(menu.groups, id)) {
            return true;
        }
    }
    return false;
}
function removeModifierOptionRecursive(menuGroups, id) {
    for (const group of menuGroups){
        for (const item of group.items){
            for (const modGroup of item.modifierGroups){
                const index = modGroup.options.findIndex((opt)=>opt.id === id);
                if (index !== -1) {
                    modGroup.options.splice(index, 1);
                    return true;
                }
            }
        }
        if (removeModifierOptionRecursive(group.subGroups, id)) {
            return true;
        }
    }
    return false;
}
async function getSalesChannels() {
    await delay(50);
    return [
        ...sampleChannels
    ];
}
async function getAllergens() {
    await delay(50);
    return [
        ...sampleAllergens
    ];
}
async function reorderItems(groupId, itemIds) {
    await delay(200);
    const group = await getMenuGroup(groupId);
    if (!group) return false;
    // Update sort orders based on new position
    group.items.sort((a, b)=>{
        const aIndex = itemIds.indexOf(a.id);
        const bIndex = itemIds.indexOf(b.id);
        return aIndex - bIndex;
    });
    group.items.forEach((item, index)=>{
        item.sortOrder = index + 1;
        item.updatedAt = new Date();
    });
    return true;
}
async function reorderGroups(menuId, groupIds) {
    await delay(200);
    const menu = await getMenu(menuId);
    if (!menu) return false;
    // Update sort orders based on new position
    menu.groups.sort((a, b)=>{
        const aIndex = groupIds.indexOf(a.id);
        const bIndex = groupIds.indexOf(b.id);
        return aIndex - bIndex;
    });
    menu.groups.forEach((group, index)=>{
        group.sortOrder = index + 1;
        group.updatedAt = new Date();
    });
    return true;
}
async function moveItem(itemId, targetGroupId) {
    await delay(200);
    // Find and remove item from current location
    let item = null;
    for (const menu of mockMenus){
        if (removeItemRecursive(menu.groups, itemId)) {
            item = await getMenuItem(itemId);
            break;
        }
    }
    if (!item) return false;
    // Add to new group
    const targetGroup = await getMenuGroup(targetGroupId);
    if (!targetGroup) return false;
    item.menuGroupId = targetGroupId;
    item.updatedAt = new Date();
    targetGroup.items.push(item);
    return true;
}
async function bulkUpdateItems(itemIds, updates) {
    await delay(300);
    const updatedItems = [];
    for (const itemId of itemIds){
        const item = await updateMenuItem(itemId, updates);
        if (item) {
            updatedItems.push(item);
        }
    }
    return updatedItems;
}
async function bulkDeleteItems(itemIds) {
    await delay(300);
    let allDeleted = true;
    for (const itemId of itemIds){
        const deleted = await deleteMenuItem(itemId);
        if (!deleted) {
            allDeleted = false;
        }
    }
    return allDeleted;
}
}),
"[project]/app/menu/page.tsx [app-rsc] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "default",
    ()=>MenuPage
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-jsx-dev-runtime.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$components$2f$ui$2f$page$2d$header$2e$tsx__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/components/ui/page-header.tsx [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$components$2f$menu$2f$menu$2d$management$2d$client$2e$tsx__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/components/menu/menu-management-client.tsx [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$menu$2f$data$2e$ts__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/lib/menu/data.ts [app-rsc] (ecmascript)");
;
;
;
;
;
async function MenuPage() {
    // Fetch initial data
    const [menusResult, channels, allergens] = await Promise.all([
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$menu$2f$data$2e$ts__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getMenus"])({
            page: 1,
            limit: 50
        }),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$menu$2f$data$2e$ts__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getSalesChannels"])(),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$menu$2f$data$2e$ts__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getAllergens"])()
    ]);
    return /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("div", {
        className: "container mx-auto p-6",
        children: [
            /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$components$2f$ui$2f$page$2d$header$2e$tsx__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["PageHeader"], {
                title: "Menu Management",
                description: "Manage your restaurant menus, items, pricing, and availability"
            }, void 0, false, {
                fileName: "[project]/app/menu/page.tsx",
                lineNumber: 16,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("div", {
                className: "mt-8",
                children: /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["Suspense"], {
                    fallback: /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])("div", {
                        children: "Loading menu management..."
                    }, void 0, false, {
                        fileName: "[project]/app/menu/page.tsx",
                        lineNumber: 22,
                        columnNumber: 29
                    }, void 0),
                    children: /*#__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$dev$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["jsxDEV"])(__TURBOPACK__imported__module__$5b$project$5d2f$components$2f$menu$2f$menu$2d$management$2d$client$2e$tsx__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["MenuManagementClient"], {
                        initialMenus: menusResult.data,
                        availableChannels: channels,
                        availableAllergens: allergens
                    }, void 0, false, {
                        fileName: "[project]/app/menu/page.tsx",
                        lineNumber: 23,
                        columnNumber: 11
                    }, this)
                }, void 0, false, {
                    fileName: "[project]/app/menu/page.tsx",
                    lineNumber: 22,
                    columnNumber: 9
                }, this)
            }, void 0, false, {
                fileName: "[project]/app/menu/page.tsx",
                lineNumber: 21,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true, {
        fileName: "[project]/app/menu/page.tsx",
        lineNumber: 15,
        columnNumber: 5
    }, this);
}
}),
"[project]/app/menu/page.tsx [app-rsc] (ecmascript, Next.js Server Component)", ((__turbopack_context__) => {

__turbopack_context__.n(__turbopack_context__.i("[project]/app/menu/page.tsx [app-rsc] (ecmascript)"));
}),
"[externals]/next/dist/shared/lib/no-fallback-error.external.js [external] (next/dist/shared/lib/no-fallback-error.external.js, cjs)", ((__turbopack_context__, module, exports) => {

const mod = __turbopack_context__.x("next/dist/shared/lib/no-fallback-error.external.js", () => require("next/dist/shared/lib/no-fallback-error.external.js"));

module.exports = mod;
}),
];

//# sourceMappingURL=%5Broot-of-the-server%5D__fec356ca._.js.map