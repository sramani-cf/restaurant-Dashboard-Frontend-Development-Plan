name: Deploy to Production

on:
  push:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Run CI checks before deployment
  pre-deploy-checks:
    name: Pre-deployment Checks
    uses: ./.github/workflows/ci.yml

  # Build Docker image
  build-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}

      - name: Output image
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-image
    environment:
      name: staging
      url: https://staging.restaurant-dashboard.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to ECS
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster restaurant-staging \
            --service restaurant-dashboard-staging \
            --task-definition restaurant-dashboard-staging \
            --force-new-deployment

          # Wait for deployment to complete
          aws ecs wait services-stable \
            --cluster restaurant-staging \
            --services restaurant-dashboard-staging

      - name: Run smoke tests against staging
        run: |
          # Wait for service to be available
          sleep 60
          
          # Run basic health checks
          curl -f https://staging.restaurant-dashboard.com/api/health || exit 1
          curl -f https://staging.restaurant-dashboard.com/ || exit 1

      - name: Run E2E tests against staging
        run: |
          npm ci
          npx playwright install --with-deps
          npm run test:e2e
        env:
          PLAYWRIGHT_BASE_URL: https://staging.restaurant-dashboard.com
          TEST_USER_EMAIL: ${{ secrets.STAGING_TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.STAGING_TEST_USER_PASSWORD }}

      - name: Notify staging deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            Staging deployment ${{ job.status }}
            Environment: staging
            Image: ${{ needs.build-image.outputs.image }}
            URL: https://staging.restaurant-dashboard.com
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Security scan of the built image
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-image
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-image.outputs.image }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-image, deploy-staging, security-scan]
    environment:
      name: production
      url: https://restaurant-dashboard.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create deployment backup
        run: |
          # Create backup of current deployment
          CURRENT_TASK_DEF=$(aws ecs describe-services \
            --cluster restaurant-production \
            --services restaurant-dashboard-production \
            --query 'services[0].taskDefinition' \
            --output text)
          
          echo "BACKUP_TASK_DEFINITION=${CURRENT_TASK_DEF}" >> $GITHUB_ENV

      - name: Deploy to production ECS
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster restaurant-production \
            --service restaurant-dashboard-production \
            --task-definition restaurant-dashboard-production \
            --force-new-deployment

      - name: Wait for deployment and health checks
        timeout-minutes: 10
        run: |
          # Wait for deployment to complete
          aws ecs wait services-stable \
            --cluster restaurant-production \
            --services restaurant-dashboard-production

          # Additional health checks
          sleep 30
          curl -f https://restaurant-dashboard.com/api/health || exit 1

      - name: Run production smoke tests
        run: |
          # Basic functionality tests
          curl -f https://restaurant-dashboard.com/ || exit 1
          curl -f https://restaurant-dashboard.com/api/health || exit 1
          
          # Check critical endpoints
          curl -f https://restaurant-dashboard.com/login || exit 1

      - name: Update deployment status
        if: success()
        run: |
          # Record successful deployment
          echo "Production deployment successful at $(date)" >> deployment.log

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, rolling back..."
          aws ecs update-service \
            --cluster restaurant-production \
            --service restaurant-dashboard-production \
            --task-definition ${{ env.BACKUP_TASK_DEFINITION }}

      - name: Notify production deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            Production deployment ${{ job.status }}
            Environment: production
            Image: ${{ needs.build-image.outputs.image }}
            URL: https://restaurant-dashboard.com
            ${{ job.status == 'failure' && 'Rollback initiated' || '' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Update monitoring and alerts
  update-monitoring:
    name: Update Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: success()
    steps:
      - name: Update DataDog deployment marker
        run: |
          curl -X POST "https://api.datadoghq.com/api/v1/events" \
            -H "Content-Type: application/json" \
            -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
            -d '{
              "title": "Restaurant Dashboard Deployment",
              "text": "New version deployed to production",
              "tags": ["environment:production", "service:restaurant-dashboard"],
              "alert_type": "info"
            }'

      - name: Update Sentry release
        run: |
          curl -X POST \
            https://sentry.io/api/0/organizations/${{ secrets.SENTRY_ORG }}/releases/ \
            -H "Authorization: Bearer ${{ secrets.SENTRY_AUTH_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.sha }}",
              "projects": ["restaurant-dashboard"],
              "dateReleased": "'$(date -Iseconds)'"
            }'

  # Performance monitoring after deployment
  post-deploy-monitoring:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: success()
    steps:
      - name: Wait for metrics stabilization
        run: sleep 300 # Wait 5 minutes for metrics to stabilize

      - name: Check performance metrics
        run: |
          # Check response times and error rates
          # This would typically integrate with your monitoring system
          echo "Monitoring performance metrics..."

      - name: Run Lighthouse audit
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun --url=https://restaurant-dashboard.com
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Cleanup old images
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: deploy-production
    if: success()
    steps:
      - name: Cleanup old Docker images
        run: |
          # Keep only the last 10 images
          OLD_IMAGES=$(docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} --format "table {{.Repository}}:{{.Tag}}" | tail -n +11)
          if [ ! -z "$OLD_IMAGES" ]; then
            echo "$OLD_IMAGES" | xargs docker rmi || true
          fi

      - name: Cleanup old ECS task definitions
        run: |
          # Deregister old task definitions (keep last 5)
          aws ecs list-task-definitions \
            --family-prefix restaurant-dashboard-production \
            --status ACTIVE \
            --query 'taskDefinitionArns[:-5]' \
            --output text | xargs -r -n1 aws ecs deregister-task-definition --task-definition